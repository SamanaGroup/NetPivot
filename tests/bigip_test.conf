#TMSH-VERSION: 11.6.1

analytics gui-widget /Common/uwid57a992ba3b8f1 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps avg_request_throughput }
    module avr
    order-on-page 1
    period 86400
    username irfanuk
    view-by url
    widget-type 2
}
analytics gui-widget /Common/uwid57a992ba5c6fc {
    gui-pagecode avr
    metrics { __ }
    module _______xxx___
    username irfanuk
    view-by __
    widget-type 1
}
analytics gui-widget /Common/uwid57a992ba20bb9 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    order-on-page 1
    period 86400
    username irfanuk
    view-by geo
    widget-type 1
}
analytics gui-widget /Common/uwid57a992ba28eb6 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    period 86400
    username irfanuk
    view-by resp_code
    widget-type 1
}
analytics gui-widget /Common/uwid57a992ba52b76 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 3
    period 86400
    username irfanuk
    view-by client_subnet
    widget-type 4
}
analytics gui-widget /Common/uwid57a992ba441b4 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 2
    period 86400
    username irfanuk
    view-by pool_member
    widget-type 4
}
analytics gui-widget /Common/uwid57a992ba3307a {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    period 86400
    username irfanuk
    view-by vip
    widget-type 3
}
analytics gui-widget /Common/uwid563f2725185f1 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    order-on-page 1
    period 86400
    username yehiaz
    view-by geo
    widget-type 1
}
analytics gui-widget /Common/uwid563f27252f553 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    period 86400
    username yehiaz
    view-by vip
    widget-type 3
}
analytics gui-widget /Common/uwid563f27253ef82 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 2
    period 86400
    username yehiaz
    view-by pool_member
    widget-type 4
}
analytics gui-widget /Common/uwid563f27254ef1e {
    gui-pagecode avr
    metrics { __ }
    module _______xxx___
    username yehiaz
    view-by __
    widget-type 1
}
analytics gui-widget /Common/uwid563f2725278d5 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    period 86400
    username yehiaz
    view-by resp_code
    widget-type 1
}
analytics gui-widget /Common/uwid563f272536fa8 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps avg_request_throughput }
    module avr
    order-on-page 1
    period 86400
    username yehiaz
    view-by url
    widget-type 2
}
analytics gui-widget /Common/uwid563f272546cc0 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 3
    period 86400
    username yehiaz
    view-by client_subnet
    widget-type 4
}
analytics gui-widget /Common/uwid5767b2aabf1b8 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    order-on-page 1
    period 86400
    username shamsn
    view-by geo
    widget-type 1
}
analytics gui-widget /Common/uwid5767b2aace90d {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { count }
    module avr
    period 86400
    username shamsn
    view-by resp_code
    widget-type 1
}
analytics gui-widget /Common/uwid5767b2aad8bd2 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    period 86400
    username shamsn
    view-by vip
    widget-type 3
}
analytics gui-widget /Common/uwid5767b2aae5397 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps avg_request_throughput }
    module avr
    order-on-page 1
    period 86400
    username shamsn
    view-by url
    widget-type 2
}
analytics gui-widget /Common/uwid5767b2aaee91d {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 2
    period 86400
    username shamsn
    view-by pool_member
    widget-type 4
}
analytics gui-widget /Common/uwid5767b2ab0c222 {
    cent-report-destination-type self
    gui-pagecode avr
    metrics { avg_tps }
    module avr
    order-on-page 3
    period 86400
    username shamsn
    view-by client_subnet
    widget-type 4
}
analytics gui-widget /Common/uwid5767b2ab142d5 {
    gui-pagecode avr
    metrics { __ }
    module _______xxx___
    username shamsn
    view-by __
    widget-type 1
}
apm epsec epsec-package /Common/EPSEC/Images/epsec-1.0.0-173.0.iso {
    cache-path /config/filestore/files_d/Common_d/epsec_package_d/:Common:EPSEC:Images:epsec-1.0.0-173.0.iso_57098_1
    oesis-version 3.6.4140.2
    revision 1
    version 1.0.0-173.0
}
apm resource remote-desktop citrix-client-bundle /Common/default-citrix-client-bundle { }
apm sso saml-sp-connector /Common/saml_office365 {
    assertion-consumer-uri https://login.microsoftonline.com/login.srf
    description "Predefined SP connector object for Office 365"
    entity-id urn:federation:MicrosoftOnline
}
ltm default-node-monitor {
    rule none
}
ltm ifile /Common/MaintenancePage {
    file-name /Common/MaintenancePage
}
ltm ifile /Common/eserverrorpage {
    file-name /Common/eserverrorpage
}
ltm ifile /Common/eservrestrictip {
    file-name /Common/eservrestrictip
}
ltm node /Common/10.15.60.60 {
    address 10.15.60.60
}
ltm node /Common/10.15.60.62 {
    address 10.15.60.62
}
ltm node /Common/10.15.60.65 {
    address 10.15.60.65
}
ltm node /Common/10.15.60.70 {
    address 10.15.60.70
}
ltm node /Common/10.21.11.11 {
    address 10.21.11.11
    description GRP_ProdWeb1
}
ltm node /Common/10.21.11.12 {
    address 10.21.11.12
    description GRP_ProdWeb2
}
ltm node /Common/10.21.12.11 {
    address 10.21.12.11
    description GRP_ServWeb1
}
ltm node /Common/10.21.12.12 {
    address 10.21.12.12
    description GRP_ServWeb2
}
ltm node /Common/10.21.12.21 {
    address 10.21.12.21
}
ltm node /Common/10.21.13.1 {
    address 10.21.13.1
}
ltm node /Common/10.21.14.11 {
    address 10.21.14.11
    description ARP-DEV-FE-APP1
}
ltm node /Common/10.21.14.12 {
    address 10.21.14.12
    description ARP-DEV-FE-APP2
}
ltm node /Common/10.21.14.21 {
    address 10.21.14.21
    description ARP-VIS-APP-DB
}
ltm node /Common/10.21.15.11 {
    address 10.21.15.11
    description GRP_RelWeb1
}
ltm node /Common/10.21.15.12 {
    address 10.21.15.12
    description GRP_RelWeb2
}
ltm node /Common/10.21.15.21 {
    address 10.21.15.21
    description GRP_RAPP1
}
ltm node /Common/10.21.15.22 {
    address 10.21.15.22
    description GRP_RAPP2
}
ltm node /Common/10.21.17.11 {
    address 10.21.17.11
    description GRP-PRD-REP1
}
ltm node /Common/10.21.17.12 {
    address 10.21.17.12
    description GRP-PRD-REP2
}
ltm node /Common/10.21.17.21 {
    address 10.21.17.21
}
ltm node /Common/10.21.20.11 {
    address 10.21.20.11
    description ARP-APP-1
}
ltm node /Common/10.21.20.12 {
    address 10.21.20.12
    description ARP-APP-2
}
ltm node /Common/10.21.172.21 {
    address 10.21.172.21
}
ltm node /Common/10.22.1.21 {
    address 10.22.1.21
    description GSB-1
    session user-disabled
    state user-down
}
ltm node /Common/10.22.1.22 {
    address 10.22.1.22
    description GSB-2
}
ltm node /Common/10.22.1.23 {
    address 10.22.1.23
    description Gess-1
}
ltm node /Common/10.22.1.24 {
    address 10.22.1.24
    description Gess-2
}
ltm node /Common/10.22.1.25 {
    address 10.22.1.25
    description Sync-1
}
ltm node /Common/10.22.1.26 {
    address 10.22.1.26
}
ltm node /Common/10.22.1.33 {
    address 10.22.1.33
    description DSS-1
}
ltm node /Common/10.22.1.34 {
    address 10.22.1.34
    description DSS-2
}
ltm node /Common/10.22.1.43 {
    address 10.22.1.43
    description IDS-1
}
ltm node /Common/10.22.1.44 {
    address 10.22.1.44
    description IDS-2
}
ltm node /Common/10.22.1.51 {
    address 10.22.1.51
}
ltm node /Common/10.22.1.53 {
    address 10.22.1.53
}
ltm node /Common/10.22.1.111 {
    address 10.22.1.111
}
ltm node /Common/10.22.1.112 {
    address 10.22.1.112
}
ltm node /Common/10.22.1.113 {
    address 10.22.1.113
    description "EI node 1"
}
ltm node /Common/10.22.1.114 {
    address 10.22.1.114
    description "EI node 2"
}
ltm node /Common/10.22.1.115 {
    address 10.22.1.115
    description "EI node 3"
    session user-disabled
    state user-down
}
ltm node /Common/10.22.1.116 {
    address 10.22.1.116
    description "EI node 4"
    session user-disabled
    state user-down
}
ltm node /Common/10.22.5.13 {
    address 10.22.5.13
    description ePay1_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.5.14 {
    address 10.22.5.14
    description ePay2_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.5.15 {
    address 10.22.5.15
    description mPay1_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.5.16 {
    address 10.22.5.16
    description mPay2_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.5.21 {
    address 10.22.5.21
    description eServ_Reports1_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.5.22 {
    address 10.22.5.22
    description eServ_Reports2_PROD
    monitor /Common/none 
}
ltm node /Common/10.22.10.11 {
    address 10.22.10.11
    description remedy-sdapp1
}
ltm node /Common/10.22.10.12 {
    address 10.22.10.12
    description remedy-sdapp2
}
ltm node /Common/10.22.10.13 {
    address 10.22.10.13
    description remedy-sdapp3
}
ltm node /Common/10.22.10.14 {
    address 10.22.10.14
    description remedy-sdapp4
}
ltm node /Common/10.23.1.55 {
    address 10.23.1.55
}
ltm node /Common/10.23.1.61 {
    address 10.23.1.61
}
ltm node /Common/10.23.1.62 {
    address 10.23.1.62
}
ltm node /Common/10.23.3.41 {
    address 10.23.3.41
}
ltm node /Common/10.23.3.42 {
    address 10.23.3.42
}
ltm node /Common/10.23.3.71 {
    address 10.23.3.71
}
ltm node /Common/10.23.3.72 {
    address 10.23.3.72
}
ltm node /Common/10.23.3.73 {
    address 10.23.3.73
}
ltm node /Common/10.23.3.74 {
    address 10.23.3.74
}
ltm node /Common/10.23.3.75 {
    address 10.23.3.75
}
ltm node /Common/10.23.3.85 {
    address 10.23.3.85
}
ltm node /Common/10.23.3.86 {
    address 10.23.3.86
}
ltm node /Common/10.23.3.89 {
    address 10.23.3.89
}
ltm node /Common/10.23.3.91 {
    address 10.23.3.91
}
ltm node /Common/10.23.3.92 {
    address 10.23.3.92
}
ltm node /Common/10.23.3.111 {
    address 10.23.3.111
}
ltm node /Common/10.23.4.54 {
    address 10.23.4.54
}
ltm node /Common/10.23.4.55 {
    address 10.23.4.55
}
ltm node /Common/10.23.5.21 {
    address 10.23.5.21
}
ltm node /Common/10.23.5.22 {
    address 10.23.5.22
}
ltm node /Common/10.23.5.23 {
    address 10.23.5.23
}
ltm node /Common/10.23.11.135 {
    address 10.23.11.135
}
ltm node /Common/10.23.11.136 {
    address 10.23.11.136
}
ltm node /Common/10.23.11.181 {
    address 10.23.11.181
}
ltm node /Common/10.23.11.182 {
    address 10.23.11.182
}
ltm node /Common/10.23.11.183 {
    address 10.23.11.183
}
ltm node /Common/10.23.11.184 {
    address 10.23.11.184
}
ltm node /Common/10.23.11.185 {
    address 10.23.11.185
}
ltm node /Common/10.23.11.186 {
    address 10.23.11.186
}
ltm node /Common/10.23.11.187 {
    address 10.23.11.187
}
ltm node /Common/10.23.11.188 {
    address 10.23.11.188
}
ltm node /Common/10.23.11.189 {
    address 10.23.11.189
}
ltm node /Common/10.23.11.190 {
    address 10.23.11.190
}
ltm node /Common/10.23.11.191 {
    address 10.23.11.191
}
ltm node /Common/10.23.11.192 {
    address 10.23.11.192
}
ltm node /Common/10.23.11.193 {
    address 10.23.11.193
}
ltm node /Common/10.23.11.194 {
    address 10.23.11.194
}
ltm node /Common/10.23.11.195 {
    address 10.23.11.195
}
ltm node /Common/10.23.11.196 {
    address 10.23.11.196
}
ltm node /Common/10.23.11.197 {
    address 10.23.11.197
}
ltm node /Common/10.23.11.198 {
    address 10.23.11.198
}
ltm node /Common/10.23.11.199 {
    address 10.23.11.199
}
ltm node /Common/10.23.11.200 {
    address 10.23.11.200
}
ltm node /Common/10.23.11.201 {
    address 10.23.11.201
}
ltm node /Common/10.23.11.202 {
    address 10.23.11.202
}
ltm node /Common/10.23.11.203 {
    address 10.23.11.203
}
ltm node /Common/10.23.11.204 {
    address 10.23.11.204
}
ltm node /Common/10.23.11.205 {
    address 10.23.11.205
}
ltm node /Common/10.23.11.206 {
    address 10.23.11.206
}
ltm node /Common/10.23.11.207 {
    address 10.23.11.207
}
ltm node /Common/10.23.11.208 {
    address 10.23.11.208
}
ltm node /Common/10.23.11.209 {
    address 10.23.11.209
}
ltm node /Common/10.23.11.210 {
    address 10.23.11.210
}
ltm node /Common/10.23.11.211 {
    address 10.23.11.211
}
ltm node /Common/10.23.11.212 {
    address 10.23.11.212
}
ltm node /Common/10.23.11.213 {
    address 10.23.11.213
}
ltm node /Common/10.23.11.214 {
    address 10.23.11.214
}
ltm node /Common/10.23.11.221 {
    address 10.23.11.221
}
ltm node /Common/10.23.11.222 {
    address 10.23.11.222
}
ltm node /Common/10.23.11.223 {
    address 10.23.11.223
}
ltm node /Common/10.23.11.224 {
    address 10.23.11.224
}
ltm node /Common/10.23.11.225 {
    address 10.23.11.225
}
ltm node /Common/10.23.11.226 {
    address 10.23.11.226
}
ltm node /Common/10.23.11.227 {
    address 10.23.11.227
}
ltm node /Common/10.23.11.228 {
    address 10.23.11.228
}
ltm node /Common/10.23.11.229 {
    address 10.23.11.229
}
ltm node /Common/10.23.11.230 {
    address 10.23.11.230
}
ltm node /Common/10.23.11.231 {
    address 10.23.11.231
}
ltm node /Common/10.23.11.232 {
    address 10.23.11.232
}
ltm node /Common/10.23.11.233 {
    address 10.23.11.233
}
ltm node /Common/10.23.11.240 {
    address 10.23.11.240
}
ltm node /Common/10.23.11.241 {
    address 10.23.11.241
}
ltm node /Common/10.23.11.243 {
    address 10.23.11.243
}
ltm node /Common/10.23.11.244 {
    address 10.23.11.244
}
ltm node /Common/10.23.11.245 {
    address 10.23.11.245
}
ltm node /Common/10.23.11.246 {
    address 10.23.11.246
}
ltm node /Common/10.23.11.247 {
    address 10.23.11.247
}
ltm node /Common/10.23.12.45 {
    address 10.23.12.45
}
ltm node /Common/10.23.12.46 {
    address 10.23.12.46
    session user-disabled
    state user-down
}
ltm node /Common/10.23.12.48 {
    address 10.23.12.48
}
ltm node /Common/10.23.12.49 {
    address 10.23.12.49
}
ltm node /Common/10.23.12.51 {
    address 10.23.12.51
}
ltm node /Common/10.23.12.52 {
    address 10.23.12.52
}
ltm node /Common/10.23.12.71 {
    address 10.23.12.71
}
ltm node /Common/10.23.12.75 {
    address 10.23.12.75
}
ltm node /Common/10.23.12.76 {
    address 10.23.12.76
}
ltm node /Common/10.23.12.85 {
    address 10.23.12.85
}
ltm node /Common/10.23.12.86 {
    address 10.23.12.86
}
ltm node /Common/10.23.12.151 {
    address 10.23.12.151
}
ltm node /Common/10.23.12.152 {
    address 10.23.12.152
}
ltm node /Common/10.23.12.165 {
    address 10.23.12.165
}
ltm node /Common/10.23.12.166 {
    address 10.23.12.166
}
ltm node /Common/10.23.12.167 {
    address 10.23.12.167
}
ltm node /Common/10.23.12.168 {
    address 10.23.12.168
}
ltm node /Common/10.23.12.179 {
    address 10.23.12.179
}
ltm node /Common/10.23.14.11 {
    address 10.23.14.11
}
ltm node /Common/10.23.14.21 {
    address 10.23.14.21
}
ltm node /Common/10.23.17.11 {
    address 10.23.17.11
}
ltm node /Common/10.23.17.12 {
    address 10.23.17.12
}
ltm node /Common/10.23.19.11 {
    address 10.23.19.11
}
ltm node /Common/10.23.19.12 {
    address 10.23.19.12
}
ltm node /Common/10.23.19.13 {
    address 10.23.19.13
}
ltm node /Common/10.23.19.14 {
    address 10.23.19.14
}
ltm node /Common/10.23.19.15 {
    address 10.23.19.15
}
ltm node /Common/10.23.19.16 {
    address 10.23.19.16
}
ltm node /Common/10.23.19.17 {
    address 10.23.19.17
}
ltm node /Common/10.23.19.18 {
    address 10.23.19.18
}
ltm node /Common/10.23.19.19 {
    address 10.23.19.19
}
ltm node /Common/10.23.19.20 {
    address 10.23.19.20
}
ltm node /Common/10.23.19.21 {
    address 10.23.19.21
}
ltm node /Common/10.23.19.22 {
    address 10.23.19.22
}
ltm node /Common/10.23.19.23 {
    address 10.23.19.23
}
ltm node /Common/10.23.19.24 {
    address 10.23.19.24
}
ltm node /Common/10.23.19.25 {
    address 10.23.19.25
}
ltm node /Common/10.23.19.26 {
    address 10.23.19.26
}
ltm node /Common/10.23.19.27 {
    address 10.23.19.27
}
ltm node /Common/10.23.19.28 {
    address 10.23.19.28
}
ltm node /Common/10.23.19.29 {
    address 10.23.19.29
}
ltm node /Common/10.23.19.30 {
    address 10.23.19.30
}
ltm node /Common/10.23.19.51 {
    address 10.23.19.51
}
ltm node /Common/10.23.19.52 {
    address 10.23.19.52
}
ltm node /Common/10.23.19.53 {
    address 10.23.19.53
}
ltm node /Common/10.23.19.54 {
    address 10.23.19.54
}
ltm node /Common/10.23.19.55 {
    address 10.23.19.55
}
ltm node /Common/10.23.19.56 {
    address 10.23.19.56
}
ltm node /Common/10.23.19.57 {
    address 10.23.19.57
}
ltm node /Common/10.23.19.58 {
    address 10.23.19.58
}
ltm node /Common/10.23.19.59 {
    address 10.23.19.59
}
ltm node /Common/10.23.19.60 {
    address 10.23.19.60
}
ltm node /Common/10.23.19.61 {
    address 10.23.19.61
}
ltm node /Common/10.23.19.62 {
    address 10.23.19.62
}
ltm node /Common/10.23.19.65 {
    address 10.23.19.65
}
ltm node /Common/10.23.19.66 {
    address 10.23.19.66
}
ltm node /Common/10.23.19.67 {
    address 10.23.19.67
}
ltm node /Common/10.23.19.68 {
    address 10.23.19.68
}
ltm node /Common/10.23.19.69 {
    address 10.23.19.69
}
ltm node /Common/10.23.19.70 {
    address 10.23.19.70
}
ltm node /Common/10.23.19.71 {
    address 10.23.19.71
}
ltm node /Common/10.23.19.72 {
    address 10.23.19.72
}
ltm node /Common/10.23.19.73 {
    address 10.23.19.73
}
ltm node /Common/10.23.19.74 {
    address 10.23.19.74
}
ltm node /Common/10.23.19.75 {
    address 10.23.19.75
}
ltm node /Common/10.23.19.76 {
    address 10.23.19.76
}
ltm node /Common/10.23.19.103 {
    address 10.23.19.103
}
ltm node /Common/10.23.19.104 {
    address 10.23.19.104
}
ltm node /Common/10.23.19.111 {
    address 10.23.19.111
}
ltm node /Common/10.23.19.112 {
    address 10.23.19.112
}
ltm node /Common/10.23.19.113 {
    address 10.23.19.113
}
ltm node /Common/10.23.19.114 {
    address 10.23.19.114
}
ltm node /Common/10.23.19.115 {
    address 10.23.19.115
}
ltm node /Common/10.23.19.116 {
    address 10.23.19.116
}
ltm node /Common/10.23.19.117 {
    address 10.23.19.117
}
ltm node /Common/10.23.19.118 {
    address 10.23.19.118
}
ltm node /Common/10.23.19.119 {
    address 10.23.19.119
}
ltm node /Common/10.23.19.120 {
    address 10.23.19.120
}
ltm node /Common/10.23.19.121 {
    address 10.23.19.121
}
ltm node /Common/10.23.19.122 {
    address 10.23.19.122
}
ltm node /Common/10.23.19.123 {
    address 10.23.19.123
}
ltm node /Common/10.23.19.124 {
    address 10.23.19.124
}
ltm node /Common/10.23.19.125 {
    address 10.23.19.125
}
ltm node /Common/10.23.19.126 {
    address 10.23.19.126
}
ltm node /Common/10.23.19.127 {
    address 10.23.19.127
}
ltm node /Common/10.23.19.128 {
    address 10.23.19.128
}
ltm node /Common/10.23.19.129 {
    address 10.23.19.129
}
ltm node /Common/10.23.19.130 {
    address 10.23.19.130
}
ltm node /Common/10.23.19.131 {
    address 10.23.19.131
}
ltm node /Common/10.23.19.132 {
    address 10.23.19.132
}
ltm node /Common/10.23.19.151 {
    address 10.23.19.151
}
ltm node /Common/10.23.19.152 {
    address 10.23.19.152
}
ltm node /Common/10.23.19.153 {
    address 10.23.19.153
}
ltm node /Common/10.23.19.154 {
    address 10.23.19.154
}
ltm node /Common/10.23.19.155 {
    address 10.23.19.155
}
ltm node /Common/10.23.19.156 {
    address 10.23.19.156
}
ltm node /Common/10.23.19.157 {
    address 10.23.19.157
}
ltm node /Common/10.23.19.158 {
    address 10.23.19.158
}
ltm node /Common/10.23.19.159 {
    address 10.23.19.159
}
ltm node /Common/10.23.19.160 {
    address 10.23.19.160
}
ltm node /Common/10.23.19.161 {
    address 10.23.19.161
}
ltm node /Common/10.23.19.162 {
    address 10.23.19.162
}
ltm node /Common/10.23.19.163 {
    address 10.23.19.163
}
ltm node /Common/10.23.19.164 {
    address 10.23.19.164
}
ltm node /Common/10.23.19.165 {
    address 10.23.19.165
}
ltm node /Common/10.23.19.166 {
    address 10.23.19.166
}
ltm node /Common/10.23.19.167 {
    address 10.23.19.167
}
ltm node /Common/10.23.19.168 {
    address 10.23.19.168
}
ltm node /Common/10.23.19.169 {
    address 10.23.19.169
}
ltm node /Common/10.23.19.170 {
    address 10.23.19.170
}
ltm node /Common/10.23.19.171 {
    address 10.23.19.171
}
ltm node /Common/10.23.19.172 {
    address 10.23.19.172
}
ltm node /Common/10.23.19.173 {
    address 10.23.19.173
}
ltm node /Common/10.23.19.174 {
    address 10.23.19.174
}
ltm node /Common/10.23.19.175 {
    address 10.23.19.175
}
ltm node /Common/10.23.19.176 {
    address 10.23.19.176
}
ltm node /Common/10.23.20.11 {
    address 10.23.20.11
}
ltm node /Common/10.23.20.12 {
    address 10.23.20.12
}
ltm node /Common/10.23.20.41 {
    address 10.23.20.41
}
ltm node /Common/10.23.20.42 {
    address 10.23.20.42
}
ltm node /Common/10.23.20.51 {
    address 10.23.20.51
}
ltm node /Common/10.23.20.52 {
    address 10.23.20.52
}
ltm node /Common/10.23.20.111 {
    address 10.23.20.111
}
ltm node /Common/10.23.20.112 {
    address 10.23.20.112
}
ltm node /Common/10.23.21.21 {
    address 10.23.21.21
    description EDCP-APP
    monitor /Common/none 
}
ltm node /Common/10.23.23.11 {
    address 10.23.23.11
}
ltm node /Common/10.23.23.12 {
    address 10.23.23.12
}
ltm node /Common/10.23.72.12 {
    address 10.23.72.12
}
ltm node /Common/10.23.72.13 {
    address 10.23.72.13
}
ltm node /Common/10.23.72.14 {
    address 10.23.72.14
}
ltm node /Common/10.23.72.15 {
    address 10.23.72.15
}
ltm node /Common/10.23.72.24 {
    address 10.23.72.24
}
ltm node /Common/10.25.1.13 {
    address 10.25.1.13
}
ltm node /Common/10.25.1.14 {
    address 10.25.1.14
}
ltm node /Common/10.50.1.11 {
    address 10.50.1.11
}
ltm node /Common/10.50.1.13 {
    address 10.50.1.13
}
ltm node /Common/10.50.1.14 {
    address 10.50.1.14
}
ltm node /Common/10.50.1.16 {
    address 10.50.1.16
}
ltm node /Common/10.50.1.17 {
    address 10.50.1.17
}
ltm node /Common/10.50.1.19 {
    address 10.50.1.19
}
ltm node /Common/10.50.1.20 {
    address 10.50.1.20
}
ltm node /Common/10.50.1.21 {
    address 10.50.1.21
}
ltm node /Common/10.50.1.28 {
    address 10.50.1.28
    description "Sharepoint 2016"
}
ltm node /Common/10.50.1.29 {
    address 10.50.1.29
    description "Sharepoint 2016"
}
ltm node /Common/10.50.1.230 {
    address 10.50.1.230
}
ltm node /Common/10.50.2.17 {
    address 10.50.2.17
}
ltm node /Common/10.50.2.18 {
    address 10.50.2.18
    session user-disabled
    state user-down
}
ltm node /Common/10.50.2.21 {
    address 10.50.2.21
}
ltm node /Common/10.50.2.22 {
    address 10.50.2.22
}
ltm node /Common/10.50.2.23 {
    address 10.50.2.23
}
ltm node /Common/10.50.2.24 {
    address 10.50.2.24
}
ltm node /Common/10.50.2.27 {
    address 10.50.2.27
}
ltm node /Common/10.50.2.28 {
    address 10.50.2.28
}
ltm node /Common/10.50.2.30 {
    address 10.50.2.30
}
ltm node /Common/10.50.2.33 {
    address 10.50.2.33
}
ltm node /Common/10.50.2.34 {
    address 10.50.2.34
}
ltm node /Common/10.50.2.37 {
    address 10.50.2.37
    session user-disabled
    state user-down
}
ltm node /Common/10.50.2.40 {
    address 10.50.2.40
}
ltm node /Common/10.50.2.41 {
    address 10.50.2.41
}
ltm node /Common/10.50.2.42 {
    address 10.50.2.42
}
ltm node /Common/10.50.2.43 {
    address 10.50.2.43
    session user-disabled
    state user-down
}
ltm node /Common/10.50.2.46 {
    address 10.50.2.46
    session user-disabled
    state user-down
}
ltm node /Common/10.50.2.47 {
    address 10.50.2.47
}
ltm node /Common/10.50.2.48 {
    address 10.50.2.48
}
ltm node /Common/10.50.2.52 {
    address 10.50.2.52
}
ltm node /Common/10.50.2.241 {
    address 10.50.2.241
}
ltm node /Common/10.50.5.11 {
    address 10.50.5.11
}
ltm node /Common/10.50.5.12 {
    address 10.50.5.12
}
ltm node /Common/10.50.5.13 {
    address 10.50.5.13
}
ltm node /Common/10.50.5.14 {
    address 10.50.5.14
}
ltm node /Common/10.50.5.15 {
    address 10.50.5.15
}
ltm node /Common/10.50.5.16 {
    address 10.50.5.16
}
ltm node /Common/10.50.5.17 {
    address 10.50.5.17
}
ltm node /Common/10.50.5.18 {
    address 10.50.5.18
}
ltm node /Common/10.50.5.19 {
    address 10.50.5.19
}
ltm node /Common/10.50.5.20 {
    address 10.50.5.20
}
ltm node /Common/10.50.5.22 {
    address 10.50.5.22
}
ltm node /Common/10.50.5.23 {
    address 10.50.5.23
}
ltm node /Common/10.50.5.101 {
    address 10.50.5.101
}
ltm node /Common/10.50.6.11 {
    address 10.50.6.11
}
ltm node /Common/10.50.6.12 {
    address 10.50.6.12
}
ltm node /Common/10.50.8.13 {
    address 10.50.8.13
}
ltm node /Common/10.50.10.13 {
    address 10.50.10.13
}
ltm node /Common/10.50.10.14 {
    address 10.50.10.14
}
ltm node /Common/10.50.11.14 {
    address 10.50.11.14
}
ltm node /Common/10.50.11.16 {
    address 10.50.11.16
}
ltm node /Common/10.50.11.17 {
    address 10.50.11.17
}
ltm node /Common/10.50.11.19 {
    address 10.50.11.19
}
ltm node /Common/10.50.11.20 {
    address 10.50.11.20
}
ltm node /Common/10.50.11.21 {
    address 10.50.11.21
}
ltm node /Common/10.50.11.22 {
    address 10.50.11.22
}
ltm node /Common/10.50.11.26 {
    address 10.50.11.26
}
ltm node /Common/10.50.11.27 {
    address 10.50.11.27
}
ltm node /Common/10.50.11.30 {
    address 10.50.11.30
}
ltm node /Common/10.50.11.32 {
    address 10.50.11.32
}
ltm node /Common/10.50.12.19 {
    address 10.50.12.19
}
ltm node /Common/10.50.12.20 {
    address 10.50.12.20
}
ltm node /Common/10.50.12.24 {
    address 10.50.12.24
}
ltm node /Common/10.50.12.27 {
    address 10.50.12.27
}
ltm node /Common/10.50.12.32 {
    address 10.50.12.32
    session user-disabled
    state user-down
}
ltm node /Common/10.50.12.33 {
    address 10.50.12.33
    session user-disabled
    state user-down
}
ltm node /Common/10.50.12.34 {
    address 10.50.12.34
    session user-disabled
    state user-down
}
ltm node /Common/10.50.12.35 {
    address 10.50.12.35
    session user-disabled
    state user-down
}
ltm node /Common/10.50.12.36 {
    address 10.50.12.36
    session user-disabled
    state user-down
}
ltm node /Common/10.50.12.39 {
    address 10.50.12.39
}
ltm node /Common/10.50.21.15 {
    address 10.50.21.15
}
ltm node /Common/10.50.22.12 {
    address 10.50.22.12
}
ltm node /Common/10.50.22.17 {
    address 10.50.22.17
}
ltm node /Common/10.50.22.19 {
    address 10.50.22.19
}
ltm node /Common/10.55.1.25 {
    address 10.55.1.25
}
ltm node /Common/10.55.11.12 {
    address 10.55.11.12
}
ltm node /Common/10.55.11.13 {
    address 10.55.11.13
    session user-disabled
    state user-down
}
ltm node /Common/10.55.11.18 {
    address 10.55.11.18
}
ltm node /Common/10.56.2.11 {
    address 10.56.2.11
}
ltm node /Common/10.56.2.14 {
    address 10.56.2.14
}
ltm node /Common/10.56.11.11 {
    address 10.56.11.11
}
ltm node /Common/10.56.11.13 {
    address 10.56.11.13
}
ltm node /Common/10.100.100.31 {
    address 10.100.100.31
    description GRP_DevWeb1
}
ltm node /Common/10.100.100.32 {
    address 10.100.100.32
    description GRP_DevApp1
}
ltm node /Common/10.100.100.47 {
    address 10.100.100.47
}
ltm node /Common/52.30.130.230 {
    address 52.30.130.230
}
ltm node /Common/54.171.37.147 {
    address 54.171.37.147
}
ltm node /Common/75.98.93.51 {
    address 75.98.93.51
}
ltm node /Common/91.235.132.130 {
    address 91.235.132.130
}
ltm node /Common/160.34.0.63 {
    address 160.34.0.63
}
ltm node /Common/160.34.0.93 {
    address 160.34.0.93
}
ltm node /Common/160.34.0.94 {
    address 160.34.0.94
}
ltm node /Common/160.34.0.103 {
    address 160.34.0.103
}
ltm node /Common/160.34.0.152 {
    address 160.34.0.152
}
ltm node /Common/160.34.0.161 {
    address 160.34.0.161
}
ltm node /Common/199.101.156.130 {
    address 199.101.156.130
}
ltm node /Common/213.42.48.71 {
    address 213.42.48.71
}
ltm node /Common/213.42.48.72 {
    address 213.42.48.72
}
ltm node /Common/213.42.48.165 {
    address 213.42.48.165
}
ltm node /Common/213.42.48.168 {
    address 213.42.48.168
}
ltm node /Common/213.42.48.169 {
    address 213.42.48.169
}
ltm node /Common/213.42.48.175 {
    address 213.42.48.175
}
ltm node /Common/213.42.48.186 {
    address 213.42.48.186
}
ltm node /Common/213.42.48.187 {
    address 213.42.48.187
}
ltm node /Common/213.42.48.188 {
    address 213.42.48.188
}
ltm node /Common/213.42.85.27 {
    address 213.42.85.27
}
ltm node /Common/213.42.85.28 {
    address 213.42.85.28
}
ltm node /Common/213.42.87.26 {
    address 213.42.87.26
}
ltm node /Common/API_PROD_Node1 {
    address 10.22.1.45
    session user-disabled
    state user-down
}
ltm node /Common/API_PROD_Node2 {
    address 10.22.1.46
}
ltm node /Common/GSA_PROD_1 {
    address 10.22.65.11
}
ltm node /Common/GSA_PROD_2 {
    address 10.22.65.12
}
ltm node /Common/GSA_QA_1 {
    address 10.22.65.13
}
ltm node /Common/HMC_NET_PROD_Node1 {
    address 10.23.3.61
}
ltm node /Common/HMC_NET_PROD_Node2 {
    address 10.23.3.62
}
ltm node /Common/HMC_NET_QA_Node1 {
    address 10.23.12.80
}
ltm node /Common/LAD-DMZ-WF-1 {
    address 10.23.72.22
}
ltm node /Common/LAD-DMZ-WF-2 {
    address 10.23.72.23
}
ltm node /Common/SIEM_Splunk_MS {
    address 172.18.50.201
}
ltm node /Common/SIEM_Splunk_MS_185 {
    address 185.78.244.243
}
ltm node /Common/Twig_1 {
    address 10.22.65.14
    description "Twigkit PROD"
}
ltm node /Common/Twig_2 {
    address 10.22.65.15
    description "Twigkit PROD"
}
ltm node /Common/Twig_QA_Node1 {
    address 10.23.11.83
}
ltm node /Common/Twig_QA_Node2 {
    address 10.23.11.84
}
ltm node /Common/WatchDox_Main {
    address 10.23.7.21
}
ltm node /Common/WatchDox_SSO_AUTH {
    address 10.23.3.93
}
ltm node /Common/grpUATapp {
    address 10.21.14.13
}
ltm node /Common/mDubai_Node1 {
    address 10.22.1.49
    description "Happiness Meter"
}
ltm node /Common/mDubai_Node2 {
    address 10.22.1.50
}
ltm pool /Common/ACC_Vitrue_SSL {
    members {
        /Common/160.34.0.93:443 {
            address 160.34.0.93
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ADFS_Token_Pool {
    description ADFS_Token_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.91:443 {
            address 10.23.3.91
        }
        /Common/10.23.3.92:443 {
            address 10.23.3.92
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/API-MGR-8243-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.51:8243 {
            address 10.22.1.51
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/API-MGR-9443-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.51:9443 {
            address 10.22.1.51
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/API_PROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.113:8245 {
            address 10.22.1.113
        }
        /Common/10.22.1.114:8245 {
            address 10.22.1.114
        }
        /Common/10.22.1.115:8245 {
            address 10.22.1.115
        }
        /Common/10.22.1.116:8245 {
            address 10.22.1.116
            session user-disabled
            state user-down
        }
        /Common/API_PROD_Node1:8243 {
            address 10.22.1.45
        }
        /Common/API_PROD_Node2:8243 {
            address 10.22.1.46
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-Dev-FE-Pool {
    description ARP-Dev-FE-Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.14.11:8073 {
            address 10.21.14.11
        }
        /Common/10.21.14.12:8073 {
            address 10.21.14.12
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-DevADF-FE-Pool {
    description ARP-DevADF-FE-Pool
    members {
        /Common/10.21.14.11:7001 {
            address 10.21.14.11
            session user-disabled
        }
        /Common/10.21.14.11:7005 {
            address 10.21.14.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-ADF-Admin-Pool {
    description ARP-PRD-ADF-Admin-Pool
    members {
        /Common/10.21.17.21:7001 {
            address 10.21.17.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-ADF-DMZ {
    description "ARP-PRD-ADF-DMZ #NC000000331383"
    members {
        /Common/10.21.12.21:10005 {
            address 10.21.12.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-ADFS-Pool {
    description "ARP-PRD-ADFS-Pool #TAS000000048813"
    members {
        /Common/10.21.17.21:10005 {
            address 10.21.17.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-DMZ {
    description ARP-PRD-DMZ
    load-balancing-mode least-connections-node
    members {
        /Common/10.21.12.21:8070 {
            address 10.21.12.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-Discov-Pool {
    description ARP-PRD-Discov-Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.17.21:8888 {
            address 10.21.17.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-PRD-FE {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.20.11:8070 {
            address 10.21.20.11
        }
        /Common/10.21.20.12:8070 {
            address 10.21.20.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-UAT-Discov-Pool-8090 {
    description ARP-UAT-Discov-Pool-8090
    members {
        /Common/10.21.17.21:8090 {
            address 10.21.17.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-UAT-FE-Pool {
    description "Temp ARP UAT Pool"
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.14.11:8077 {
            address 10.21.14.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ARP-VIS-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.14.21:8083 {
            address 10.21.14.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BAM_PROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.53:9443 {
            address 10.22.1.53
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BI_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.17.11:80 {
            address 10.23.17.11
        }
        /Common/10.23.17.12:80 {
            address 10.23.17.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BI_STAG_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.14.11:80 {
            address 10.23.14.11
            session user-disabled
        }
        /Common/10.23.14.21:80 {
            address 10.23.14.21
            monitor /Common/tcp 
            session user-disabled
        }
        /Common/10.50.12.39:80 {
            address 10.50.12.39
            description "BI QA"
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BMBO_Cloud_PROD_SSL_8085_Pool {
    description BMBO_Cloud_PROD_SSL_8085_Pool
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.2.27:8085 {
            address 10.50.2.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BMBO_Cloud_STG_SSL_8085_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8085 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BMBO_STG_SSL_8085_Pool {
    description "Bamboo Staging Pool"
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.85:8085 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BitBucket_Cloud_PROD_7990 {
    description BitBucket_Cloud_PROD_7990
    load-balancing-mode least-sessions
    members {
        /Common/10.50.2.28:7990 {
            address 10.50.2.28
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BitBucket_Cloud_STG_7990 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.24:7990 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/BitBucket_STG_7990 {
    members {
        /Common/10.23.12.85:7990 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Board_NET_PROD_Pool_8443 {
    description Board_NET_PROD_Pool_8443
    members {
        /Common/10.50.1.230:8443 {
            address 10.50.1.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/CAS_Vitrue_SSL {
    members {
        /Common/160.34.0.161:443 {
            address 160.34.0.161
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/CRM_QA_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.11.30:443 {
            address 10.50.11.30
        }
        /Common/10.50.11.32:443 {
            address 10.50.11.32
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Cloud_NET_PROD_8001_Pool {
    description Cloud_NET_PROD_8001_Pool
    members {
        /Common/10.50.2.40:8001 {
            address 10.50.2.40
        }
        /Common/10.50.2.41:8001 {
            address 10.50.2.41
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Cloud_NET_PROD_8002_Pool {
    description Cloud_NET_PROD_8002_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.40:8002 {
            address 10.50.2.40
        }
        /Common/10.50.2.41:8002 {
            address 10.50.2.41
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Cloud_NET_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.40:80 {
            address 10.50.2.40
        }
        /Common/10.50.2.40:443 {
            address 10.50.2.40
            description 10.50.2.40
        }
        /Common/10.50.2.41:80 {
            address 10.50.2.41
        }
        /Common/10.50.2.41:443 {
            address 10.50.2.41
            description 10.50.2.41
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Cloud_ShPnt_QA_2016_Pool {
    description Cloud_ShPnt_QA_2016_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.26:80 {
            address 10.50.11.26
        }
        /Common/10.50.11.26:443 {
            address 10.50.11.26
            session user-disabled
        }
        /Common/10.50.11.27:80 {
            address 10.50.11.27
        }
        /Common/10.50.11.27:443 {
            address 10.50.11.27
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Coesys_PRD_8080 {
    members {
        /Common/10.50.2.22:8080 {
            address 10.50.2.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_Cloud_QA_STG_80_Pool {
    description Confl_Cloud_QA_STG_80_Pool
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8090 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_Cloud_QA_STG_SSL_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8090 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_Prod_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.86:8090 {
            address 10.23.3.86
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_Prod_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.86:8090 {
            address 10.23.3.86
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_QA_STG_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.85:8090 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confl_QA_STG_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.85:8090 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Confluence_DEV_Pool {
    members {
        /Common/10.50.22.12:8090 {
            address 10.50.22.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/DDE_PROD_JIRA_Pool {
    description "DDE_PROD_JIRA_Poo # TAS000000051106"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.19:8080 {
            address 10.50.1.19
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dashboard_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.111:80 {
            address 10.23.3.111
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Diwan_SP_QA_Pool {
    description Diwan-SP-QA
    load-balancing-mode least-connections-member
    members {
        /Common/10.55.11.13:80 {
            address 10.55.11.13
        }
        /Common/10.55.11.18:80 {
            address 10.55.11.18
            description "#INC000000403846"
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Diwan_SP_QA_SSL_Pool {
    members {
        /Common/10.55.11.13:443 {
            address 10.55.11.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Docker_DTC_Prod_Pool {
    description "Docker_DTC_Prod_Pool#INC000000356391"
    members {
        /Common/10.50.12.36:80 {
            address 10.50.12.36
            session user-disabled
        }
        /Common/10.50.12.36:443 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Docker_DTR_Prod_Pool {
    description "INC000000376139 Docker DTR Prod Pool"
    members {
        /Common/10.50.2.46:443 {
            address 10.50.2.46
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Docker_UCP_Prod_Pool {
    description "INC000000376139 Docker Prod Pool"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.42:4443 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:4443 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:4443 {
            address 10.50.2.46
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Docker_UCP_QA_Pool {
    description "INC000000376139 Docker UCP_QA_Pool"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.32:4443 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:4443 {
            address 10.50.12.33
        }
        /Common/10.50.12.36:4443 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/DubaiID_PRD_80_Pool {
    description "DubaiID_PRD_80_Pool #INC000000348825"
    load-balancing-mode least-connections-member
    members {
        /Common/HMC_NET_PROD_Node1:80 {
            address 10.23.3.61
        }
        /Common/HMC_NET_PROD_Node2:80 {
            address 10.23.3.62
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_PRD_80 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.6.11:80 {
            address 10.50.6.11
        }
        /Common/10.50.6.12:80 {
            address 10.50.6.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_PRD_APP1 {
    description "Dubainow_PRD_APP1#INC000000322361"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.6.11:80 {
            address 10.50.6.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_PRD_APP2 {
    description "Dubainow_PRD_APP2 #INC000000322361"
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.6.12:80 {
            address 10.50.6.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50001 {
    members {
        /Common/10.50.12.27:50001 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50001 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50001 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50001 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50001 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50001 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50002 {
    members {
        /Common/10.50.12.27:50002 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50002 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50002 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50002 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50002 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50002 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50003 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50003 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50003 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50003 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50003 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50003 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50003 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50004 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50004 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50004 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50004 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50004 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50004 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50004 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50005 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50005 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50005 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50005 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50005 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50005 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50005 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50006 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50006 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:80 {
            address 10.50.12.32
            session user-disabled
            state user-down
        }
        /Common/10.50.12.32:4443 {
            address 10.50.12.32
            session user-disabled
        }
        /Common/10.50.12.32:50006 {
            address 10.50.12.32
            session user-disabled
        }
        /Common/10.50.12.33:80 {
            address 10.50.12.33
            session user-disabled
        }
        /Common/10.50.12.33:50006 {
            address 10.50.12.33
            session user-disabled
        }
        /Common/10.50.12.34:50006 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50006 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50006 {
            address 10.50.12.36
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50007 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50007 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50007 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50007 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50007 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50007 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50007 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50008 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50008 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50008 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50008 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50008 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50008 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50008 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50009 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50009 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50009 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50009 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50009 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50009 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50009 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50010 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50010 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50010 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50010 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50010 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50010 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50010 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50011 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50011 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50011 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50011 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50011 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50011 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50011 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50012 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50012 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50012 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50012 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50012 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50012 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50012 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50013 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50013 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50013 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50013 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50013 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50013 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50013 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50014 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50014 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50014 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50014 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50014 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50014 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50014 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50015 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50015 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50015 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50015 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50015 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50015 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50015 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50016 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50016 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50016 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50016 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50016 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50016 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50016 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50017 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50017 {
            address 10.50.12.27
            session user-disabled
            state user-down
        }
        /Common/10.50.12.32:50017 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50017 {
            address 10.50.12.33
            session user-disabled
            state user-down
        }
        /Common/10.50.12.34:50017 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50017 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50017 {
            address 10.50.12.36
            session user-disabled
            state user-down
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50018 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50018 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50018 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50018 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50018 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50018 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50018 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50019 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50019 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50019 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50019 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50019 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50019 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50019 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50020 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50020 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50020 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50020 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50020 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50020 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50020 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50021 {
    description Dubainow_QA_50021
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50021 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50021 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50021 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50021 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50021 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50021 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50022 {
    description Dubainow_QA_50022
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50022 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50022 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50022 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50022 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50022 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50022 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50023 {
    description Dubainow_QA_50023
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50023 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50023 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50023 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50023 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50023 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50023 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50024 {
    description Dubainow_QA_50024
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50024 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50024 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50024 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50024 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50024 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50024 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50025 {
    description Dubainow_QA_50025
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50025 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50025 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50025 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50025 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50025 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50025 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50026 {
    description Dubainow_QA_50026
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50026 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50026 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50026 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50026 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50026 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50026 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50027 {
    description Dubainow_QA_50027
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50027 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50027 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50027 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50027 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50027 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50027 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50028 {
    description Dubainow_QA_50028
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50028 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50028 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50028 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50028 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50028 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50028 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50029 {
    description Dubainow_QA_50029
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50029 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50029 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50029 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50029 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50029 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50029 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50030 {
    description Dubainow_QA_50030
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50030 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50030 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50030 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50030 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50030 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50030 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50031 {
    description Dubainow_QA_50031
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50031 {
            address 10.50.12.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50032 {
    description Dubainow_QA_50032
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50032 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50032 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50032 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50032 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50032 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50032 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50033 {
    description Dubainow_QA_50033
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50033 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50033 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50033 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50033 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50033 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50033 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50034 {
    description Dubainow_QA_50034
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50034 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50034 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50034 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50034 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50034 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50034 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50035 {
    description Dubainow_QA_50035
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50035 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50035 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50035 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50035 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50035 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50035 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50036 {
    description Dubainow_QA_50036
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50036 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50036 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50036 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50036 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50036 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50036 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50037 {
    description Dubainow_QA_50037
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50037 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50037 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50037 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50037 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50038 {
    description Dubainow_QA_50038
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50038 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50038 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50038 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50038 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50039 {
    description Dubainow_QA_50039
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50039 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50039 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50039 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50039 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50040 {
    description Dubainow_QA_50040
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50040 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50040 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50040 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50040 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50041 {
    description Dubainow_QA_50041
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50041 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50041 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50041 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50041 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50041 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50041 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50042 {
    description Dubainow_QA_50042
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50042 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50042 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50042 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50042 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50043 {
    description Dubainow_QA_50043
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50043 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50043 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50043 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50043 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50044 {
    description Dubainow_QA_50044
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50044 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:80 {
            address 10.50.12.32
            session user-disabled
            state user-down
        }
        /Common/10.50.12.32:50044 {
            address 10.50.12.32
            session user-disabled
        }
        /Common/10.50.12.33:50044 {
            address 10.50.12.33
            session user-disabled
        }
        /Common/10.50.12.34:50044 {
            address 10.50.12.34
            session user-disabled
        }
        /Common/10.50.12.35:50044 {
            address 10.50.12.35
            session user-disabled
        }
        /Common/10.50.12.36:50044 {
            address 10.50.12.36
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50045 {
    description Dubainow_QA_50045
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50045 {
            address 10.50.12.27
            session user-disabled
        }
        /Common/10.50.12.32:50045 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50045 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50045 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50046 {
    description Dubainow_QA_50046
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50046 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50046 {
            address 10.50.12.32
        }
        /Common/10.50.12.34:50046 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50046 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50047 {
    description Dubainow_QA_50047
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50047 {
            address 10.50.12.27
        }
        /Common/10.50.12.34:50047 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50047 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50047 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50048 {
    description Dubainow_QA_50048
    members {
        /Common/10.50.12.27:50048 {
            address 10.50.12.27
        }
        /Common/10.50.12.34:50048 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50048 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50049 {
    members {
        /Common/10.50.12.27:50049 {
            address 10.50.12.27
        }
        /Common/10.50.12.34:50049 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50049 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50049 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50050 {
    members {
        /Common/10.50.12.27:50050 {
            address 10.50.12.27
        }
        /Common/10.50.12.34:50050 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50050 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50050 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_50060 {
    description "INC000000360338, livingindubai"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50060 {
            address 10.50.12.27
            session user-disabled
        }
        /Common/10.50.12.34:50060 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50060 {
            address 10.50.12.35
            session user-disabled
        }
        /Common/10.50.21.15:8080 {
            address 10.50.21.15
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_DMNotification_50301 {
    description "#INC000000390231"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50301 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50301 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50301 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50301 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50301 {
            address 10.50.12.35
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_DMServices_50302 {
    description "#INC000000390231"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.27:50302 {
            address 10.50.12.27
        }
        /Common/10.50.12.32:50302 {
            address 10.50.12.32
        }
        /Common/10.50.12.33:50302 {
            address 10.50.12.33
        }
        /Common/10.50.12.34:50302 {
            address 10.50.12.34
        }
        /Common/10.50.12.35:50302 {
            address 10.50.12.35
        }
        /Common/10.50.12.36:50302 {
            address 10.50.12.36
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_SocialApi_50061 {
    members {
        /Common/10.50.12.27:50061 {
            address 10.50.12.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_QA_Test_50060 {
    members {
        /Common/10.50.12.27:50060 {
            address 10.50.12.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainow_ucpprod_admin_Pool {
    description Dubainow_ucpprod_admin_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.42:4443 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:4443 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:4443 {
            address 10.50.2.46
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50001 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50001 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50001 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50001 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50001 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50001 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50001 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50002 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50002 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50002 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50002 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50002 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50002 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50002 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50003 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50003 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50003 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50003 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50003 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50003 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50003 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50004 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50004 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50004 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50004 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50004 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50004 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50004 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50005 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50005 {
            address 10.50.2.37
            session user-disabled
        }
        /Common/10.50.2.42:50005 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50005 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50005 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50005 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50005 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50006 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50006 {
            address 10.50.2.37
            session user-disabled
        }
        /Common/10.50.2.42:50006 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50006 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50006 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50006 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50006 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50007 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50007 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50007 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50007 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50007 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50007 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50007 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50008 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50008 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50008 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50008 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50008 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50008 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50008 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50009 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50009 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50009 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50009 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50009 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50009 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50009 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50010 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50010 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50010 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50010 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50010 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50010 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50010 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50011 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50011 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50011 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50011 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50011 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50011 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50011 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50012 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50012 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50012 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50012 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50012 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50012 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50012 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50013 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50013 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50013 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50013 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50013 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50013 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50013 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50014 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50014 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50014 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50014 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50014 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50014 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50014 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50015 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50015 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50015 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50015 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50015 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50015 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50015 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50016 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50016 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50016 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50016 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50016 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50016 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50016 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50017 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50017 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50017 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50017 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50017 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50017 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50017 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50018 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50018 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50018 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50018 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50018 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50018 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50018 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50019 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50019 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50019 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50019 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50019 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50019 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50019 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50020 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50020 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50020 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50020 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50020 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50020 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50020 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50021 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50021 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50021 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50021 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50021 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50021 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50021 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50022 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50022 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50022 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50022 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50022 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50022 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50022 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50023 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50023 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50023 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50023 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50023 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50023 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50023 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50024 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50024 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50024 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50024 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50024 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50024 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50024 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50025 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50025 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50025 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50025 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50025 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50025 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50025 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50026 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50026 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50026 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50026 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50026 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50026 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50026 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50027 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50027 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50027 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50027 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50027 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50027 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50027 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50028 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.37:50028 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50028 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50028 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50028 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50028 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50028 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50029 {
    description Dubainowsvc_PROD_50029
    members {
        /Common/10.50.2.37:50029 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50029 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50029 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50029 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50029 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50029 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50030 {
    description Dubainowsvc_PROD_50030
    members {
        /Common/10.50.2.37:50030 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50030 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50030 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50030 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50030 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50030 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50031 {
    description Dubainowsvc_PROD_50031
    members {
        /Common/10.50.2.37:50031 {
            address 10.50.2.37
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50032 {
    description Dubainowsvc_PROD_50032
    members {
        /Common/10.50.2.37:50032 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50032 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50032 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50032 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50032 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50032 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50033 {
    description Dubainowsvc_PROD_50033
    members {
        /Common/10.50.2.37:50033 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50033 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50033 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50033 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50033 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50033 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50034 {
    description Dubainowsvc_PROD_50034
    members {
        /Common/10.50.2.37:50034 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50034 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50034 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50034 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50034 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50034 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50035 {
    description Dubainowsvc_PROD_50035
    members {
        /Common/10.50.2.37:50035 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50035 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50035 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50035 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50035 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50035 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50036 {
    description Dubainowsvc_PROD_50036
    members {
        /Common/10.50.2.37:50036 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50036 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50036 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50036 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50036 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50036 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50037 {
    description Dubainowsvc_PROD_50037
    members {
        /Common/10.50.2.37:50037 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50037 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50037 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50037 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50037 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50037 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50038 {
    description Dubainowsvc_PROD_50038
    members {
        /Common/10.50.2.37:50038 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50038 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50038 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50038 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50038 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50038 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50039 {
    description Dubainowsvc_PROD_50039
    members {
        /Common/10.50.2.37:50039 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50039 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50039 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50039 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50039 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50039 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50040 {
    description Dubainowsvc_PROD_50040
    members {
        /Common/10.50.2.37:50040 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50040 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50040 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50040 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50040 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50040 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50041 {
    description Dubainowsvc_PROD_50041
    members {
        /Common/10.50.2.37:50041 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50041 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50041 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50041 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50041 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50041 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50042 {
    description Dubainowsvc_PROD_50042
    members {
        /Common/10.50.2.37:50042 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50042 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50042 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50042 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50042 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50042 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50043 {
    description Dubainowsvc_PROD_50043
    members {
        /Common/10.50.2.37:50043 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50043 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50043 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50043 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50043 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50043 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50044 {
    description Dubainowsvc_PROD_50044
    members {
        /Common/10.50.2.37:50044 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50044 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50044 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50044 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50044 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50044 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50045 {
    description Dubainowsvc_PROD_50045
    members {
        /Common/10.50.2.37:50045 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50045 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50045 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50045 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50045 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50045 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50046 {
    description Dubainowsvc_PROD_50046
    members {
        /Common/10.50.2.37:50046 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50046 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50046 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50046 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50046 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50046 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50047 {
    description Dubainowsvc_PROD_50047
    members {
        /Common/10.50.2.37:50047 {
            address 10.50.2.37
        }
        /Common/10.50.2.42:50047 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50047 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50047 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50047 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50047 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50049 {
    description "#INC000000389204 -DarAlBer/*"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.42:50049 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50049 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50049 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50049 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50049 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Dubainowsvc_PROD_50050 {
    description "#INC000000389204 -/NoorDubai/*"
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.2.42:50050 {
            address 10.50.2.42
        }
        /Common/10.50.2.43:50050 {
            address 10.50.2.43
        }
        /Common/10.50.2.46:50050 {
            address 10.50.2.46
        }
        /Common/10.50.2.47:50050 {
            address 10.50.2.47
        }
        /Common/10.50.2.48:50050 {
            address 10.50.2.48
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP1_PROD_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.14:443 {
            address 10.50.1.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP1_PROD_Pool {
    members {
        /Common/10.23.23.11:80 {
            address 10.23.23.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP1_PROD_SSL_Pool {
    members {
        /Common/10.23.23.11:443 {
            address 10.23.23.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP1_QA_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.16:443 {
            address 10.50.11.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP1_QA_SSL_Pool {
    members {
        /Common/10.23.12.151:443 {
            address 10.23.12.151
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP2_PROD_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.16:443 {
            address 10.50.1.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP2_PROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.23.12:443 {
            address 10.23.23.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP2_QA_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.17:443 {
            address 10.50.11.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP2_QA_SSL_Pool {
    members {
        /Common/10.23.12.152:443 {
            address 10.23.12.152
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCPQA_kiteworks_Poc_Pool {
    description "#INC000000385967"
    members {
        /Common/10.50.2.241:80 {
            address 10.50.2.241
            session user-disabled
        }
        /Common/10.50.2.241:443 {
            address 10.50.2.241
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_Admin_QA_80_Pool {
    description EDCP_Admin_QA_80_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.16:80 {
            address 10.50.11.16
        }
        /Common/10.50.11.17:80 {
            address 10.50.11.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_BI_PROD_Cloud_Pool {
    description EDCP_BI_PROD_Cloud_Pool
    members {
        /Common/10.50.1.17:443 {
            address 10.50.1.17
            session user-disabled
        }
        /Common/10.50.1.17:8080 {
            address 10.50.1.17
            session user-disabled
        }
        /Common/10.50.2.17:443 {
            address 10.50.2.17
        }
        /Common/10.50.2.18:443 {
            address 10.50.2.18
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_BI_QA_Cloud_Pool {
    description EDCP_BI_QA_Cloud_Pool
    members {
        /Common/10.50.12.19:443 {
            address 10.50.12.19
        }
        /Common/10.50.12.19:8080 {
            address 10.50.12.19
            session user-disabled
        }
        /Common/10.50.12.20:443 {
            address 10.50.12.20
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_Dev_Cloud_Pool {
    description INC000000356650
    members {
        /Common/10.50.11.22:443 {
            address 10.50.11.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_PROD_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.23.11:80 {
            address 10.23.23.11
        }
        /Common/10.23.23.12:80 {
            address 10.23.23.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_PROD_Cloud_80 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.14:80 {
            address 10.50.1.14
        }
        /Common/10.50.1.16:80 {
            address 10.50.1.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_PROD_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.14:443 {
            address 10.50.1.14
        }
        /Common/10.50.1.16:443 {
            address 10.50.1.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_PROD_REPO_SSL {
    description "EDCP_PROD_REPO_SSL Cloud \"INC000000319361\""
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.17:443 {
            address 10.50.2.17
        }
        /Common/10.50.2.18:443 {
            address 10.50.2.18
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_PROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.23.11:443 {
            address 10.23.23.11
        }
        /Common/10.23.23.12:443 {
            address 10.23.23.12
            monitor /Common/tcp 
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_QA_80_Cloud_Pool {
    description EDCP_QA_80_Cloud_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.16:80 {
            address 10.50.11.16
        }
        /Common/10.50.11.17:80 {
            address 10.50.11.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_QA_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.151:80 {
            address 10.23.12.151
            session user-disabled
        }
        /Common/10.23.12.152:80 {
            address 10.23.12.152
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_QA_Cloud_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.16:80 {
            address 10.50.11.16
        }
        /Common/10.50.11.17:80 {
            address 10.50.11.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_QA_Cloud_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.16:443 {
            address 10.50.11.16
        }
        /Common/10.50.11.17:443 {
            address 10.50.11.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EDCP_QA_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.151:443 {
            address 10.23.12.151
        }
        /Common/10.23.12.152:443 {
            address 10.23.12.152
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/EXCH2016_ActiveSync {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_ActiveSync }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_AutoDisc {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_AutoDisc }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_ECP {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_ECP }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_EWS {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_EWS }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_IMAP {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:143 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:143 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:143 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:143 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:143 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_tcp_monitor }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_IMAPS {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:993 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:993 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:993 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:993 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:993 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_tcp_monitor }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_MAPI {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_MAPI }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_OAB {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_OAB }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_OWA {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_OWA }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_POP3 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:110 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:110 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:110 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:110 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:110 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_tcp_monitor }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_POP3S {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:995 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:995 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:995 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:995 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:995 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_tcp_monitor }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/EXCH2016_RPC {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.11:443 {
            address 10.50.5.11
        }
        /Common/10.50.5.12:443 {
            address 10.50.5.12
        }
        /Common/10.50.5.13:443 {
            address 10.50.5.13
        }
        /Common/10.50.5.14:443 {
            address 10.50.5.14
        }
        /Common/10.50.5.15:443 {
            address 10.50.5.15
        }
    }
    monitor min 1 of { /Common/EXCH2016_RPC }
    service-down-action reset
    slow-ramp-time 300
}
ltm pool /Common/Email_ArchRep_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.4.54:81 {
            address 10.23.4.54
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Email_Archive_Pool {
    members {
        /Common/10.23.4.55:443 {
            address 10.23.4.55
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Email_STS_ADFS_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.91:443 {
            address 10.23.3.91
        }
        /Common/10.23.3.92:443 {
            address 10.23.3.92
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Endeca-ARP-UAT {
    members {
        /Common/10.50.22.19:7004 {
            address 10.50.22.19
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Endeca-PROD-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.33:7004 {
            address 10.50.2.33
        }
        /Common/10.50.2.34:7004 {
            address 10.50.2.34
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_ca2_admin_pool {
    members {
        /Common/10.50.5.17:443 {
            address 10.50.5.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_ca2_https_pool {
    members {
        /Common/10.50.8.13:443 {
            address 10.50.8.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_ca2_pool {
    members {
        /Common/10.50.8.13:80 {
            address 10.50.8.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_cpanel_admin_pool {
    members {
        /Common/10.23.3.42:443 {
            address 10.23.3.42
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_cpanel_https_pool {
    members {
        /Common/10.23.3.41:443 {
            address 10.23.3.41
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_cpanel_pool {
    members {
        /Common/10.23.3.41:80 {
            address 10.23.3.41
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Exch2016_oos_pool {
    members {
        /Common/10.50.5.16:443 {
            address 10.50.5.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/FE_CRU_8060_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.28:8060 {
            address 10.50.2.28
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/FishEye_Cloud_STG_8060_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8060 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/GIN-ME-Public {
    members {
        /Common/213.42.48.169:80 {
            address 213.42.48.169
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/GRP-VIS-Pool-8010 {
    description GRP-VIS-Pool-8010
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.14.21:8010 {
            address 10.21.14.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/GSA_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/GSA_PROD_1:80 {
            address 10.22.65.11
            priority-group 100
        }
        /Common/GSA_PROD_2:80 {
            address 10.22.65.12
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/GSA_PROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/GSA_PROD_1:443 {
            address 10.22.65.11
            priority-group 100
        }
        /Common/GSA_PROD_2:443 {
            address 10.22.65.12
            priority-group 100
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/GeSSPROD_Internal_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.22.1.23:54546 {
            address 10.22.1.23
        }
        /Common/10.22.1.24:54546 {
            address 10.22.1.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HHRC-CONF-PRD {
    members {
        /Common/10.50.2.23:8090 {
            address 10.50.2.23
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HHRC-CONF-QA {
    description HHRC-CONF-QA-Diwan
    load-balancing-mode least-connections-node
    members {
        /Common/10.55.11.12:8090 {
            address 10.55.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HHRC-JIRA-PRD {
    members {
        /Common/10.50.2.23:8080 {
            address 10.50.2.23
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HHRC-JIRA-QA {
    description HHRC-JIRA-QA-DIWAN
    load-balancing-mode least-connections-node
    members {
        /Common/10.55.11.12:8080 {
            address 10.55.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HMC_NET_PROD_5100 {
    load-balancing-mode least-connections-member
    members {
        /Common/HMC_NET_PROD_Node1:5100 {
            address 10.23.3.61
        }
        /Common/HMC_NET_PROD_Node2:5100 {
            address 10.23.3.62
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HMC_NET_PROD_AS_Pool {
    description "Active Standby"
    load-balancing-mode least-connections-member
    members {
        /Common/HMC_NET_PROD_Node1:80 {
            address 10.23.3.61
            priority-group 100
        }
        /Common/HMC_NET_PROD_Node2:80 {
            address 10.23.3.62
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/HMC_NET_HTTP_Probe 
}
ltm pool /Common/HMC_NET_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/HMC_NET_PROD_Node1:80 {
            address 10.23.3.61
        }
        /Common/HMC_NET_PROD_Node2:80 {
            address 10.23.3.62
        }
    }
    monitor /Common/HMC_NET_HTTP_Probe 
}
ltm pool /Common/HMC_NET_QA_5100 {
    members {
        /Common/HMC_NET_QA_Node1:5100 {
            address 10.23.12.80
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HMC_NET_QA_Pool {
    members {
        /Common/HMC_NET_QA_Node1:80 {
            address 10.23.12.80
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HMC_PROD_IIS_FAD_Pool {
    description HMC_PROD_IIS_FAD_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.89:80 {
            address 10.23.3.89
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/HMC_PROD_ShPnt {
    description "SharePoint 2010"
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.71:80 {
            address 10.23.3.71
        }
        /Common/10.23.3.72:80 {
            address 10.23.3.72
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Hyperion-PRD-13080 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.25.1.13:13080 {
            address 10.25.1.13
            session user-disabled
        }
        /Common/10.25.1.14:13080 {
            address 10.25.1.14
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Hyperion-PRD-INT-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.25.1.13:19000 {
            address 10.25.1.13
        }
        /Common/10.25.1.14:19000 {
            address 10.25.1.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Hyperion-PRD-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.25.1.13:19000 {
            address 10.25.1.13
        }
        /Common/10.25.1.14:19000 {
            address 10.25.1.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/IDS_PROD_AS_8081_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.43:8081 {
            address 10.22.1.43
            priority-group 100
        }
        /Common/10.22.1.44:8081 {
            address 10.22.1.44
            priority-group 50
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/IDS_PROD_AS_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.43:9443 {
            address 10.22.1.43
            priority-group 100
        }
        /Common/10.22.1.44:9443 {
            address 10.22.1.44
            priority-group 50
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/INV_Vitrue_SSL {
    members {
        /Common/160.34.0.63:443 {
            address 160.34.0.63
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_Cloud_STG_8080_Pool {
    description JIRA_Cloud_STG_8080_Pool
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8080 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_Cloud_STG_SSL_Pool {
    load-balancing-mode least-connections-node
    members {
        /Common/10.50.12.24:8080 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_DEV_Pool {
    members {
        /Common/10.50.22.12:8080 {
            address 10.50.22.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_Prod_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.85:8080 {
            address 10.23.3.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_Prod_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.85:8080 {
            address 10.23.3.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_STG_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.85:8080 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/JIRA_STG_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.85:8080 {
            address 10.23.12.85
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-DMZ-App-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.72.24:80 {
            address 10.23.72.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-DMZ-WF-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/LAD-DMZ-WF-1:80 {
            address 10.23.72.22
        }
        /Common/LAD-DMZ-WF-2:80 {
            address 10.23.72.23
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-Intra-WF-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.72.12:443 {
            address 10.23.72.12
        }
        /Common/10.23.72.13:443 {
            address 10.23.72.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-IntraWF-80-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.72.12:80 {
            address 10.23.72.12
        }
        /Common/10.23.72.13:80 {
            address 10.23.72.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-Office-SSL-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.72.14:443 {
            address 10.23.72.14
        }
        /Common/10.23.72.15:443 {
            address 10.23.72.15
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/LAD-Office-Web-Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.72.14:80 {
            address 10.23.72.14
            session user-disabled
        }
        /Common/10.23.72.14:443 {
            address 10.23.72.14
            description test
        }
        /Common/10.23.72.15:80 {
            address 10.23.72.15
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/MS_GRP_PRD_APP_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.11.11:8050 {
            address 10.21.11.11
        }
        /Common/10.21.11.12:8050 {
            address 10.21.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/MS_GRP_PRD_DMZ_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.12.11:8050 {
            address 10.21.12.11
        }
        /Common/10.21.12.12:8050 {
            address 10.21.12.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/MS_GRP_PRD_REP_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.17.11:8090 {
            address 10.21.17.11
        }
        /Common/10.21.17.12:8090 {
            address 10.21.17.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/MyID_PROD_EIDA_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/213.42.87.26:443 {
            address 213.42.87.26
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/OEM-server {
    members {
        /Common/213.42.48.186:7788 {
            address 213.42.48.186
        }
        /Common/213.42.48.186:17802 {
            address 213.42.48.186
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/PBL_Vitrue_SSL {
    members {
        /Common/160.34.0.152:443 {
            address 160.34.0.152
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Pool-syslog {
    members {
        /Common/SIEM_Splunk_MS_185:514 {
            address 185.78.244.243
        }
    }
    monitor /Common/udp 
}
ltm pool /Common/Pool_10.23.3.86_SSL {
    members {
        /Common/10.23.3.86:443 {
            address 10.23.3.86
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/RSA_Self_Service {
    load-balancing-mode least-connections-member
    members {
        /Common/213.42.48.165:7004 {
            address 213.42.48.165
        }
        /Common/213.42.48.175:7004 {
            address 213.42.48.175
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SDESK_PROD_Cloud {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.11:8080 {
            address 10.50.1.11
        }
        /Common/10.50.1.13:8080 {
            address 10.50.1.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SDESK_STG_Cloud {
    members {
        /Common/10.50.11.14:80 {
            address 10.50.11.14
        }
        /Common/10.50.11.14:8080 {
            address 10.50.11.14
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SFB_8080_Pool {
    description SFB_8080_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.18:8080 {
            address 10.50.5.18
        }
        /Common/10.50.5.19:8080 {
            address 10.50.5.19
        }
        /Common/10.50.5.20:8080 {
            address 10.50.5.20
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SFB_SSL_Pool {
    description "SFB_SSL_Pool MS"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.18:4443 {
            address 10.50.5.18
        }
        /Common/10.50.5.19:4443 {
            address 10.50.5.19
        }
        /Common/10.50.5.20:4443 {
            address 10.50.5.20
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SLC-Tadween-80 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.20:80 {
            address 10.50.1.20
        }
        /Common/10.50.1.21:80 {
            address 10.50.1.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SONAR_PROD_9000_pool {
    description "SONAR_PROD_9000_pool #INC000000375462"
    members {
        /Common/10.50.2.27:9000 {
            address 10.50.2.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SONAR_QA_9000_pool {
    description SONAR_QA_9000_pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.12.24:9000 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SRM_Vitrue_SSL {
    members {
        /Common/160.34.0.103:443 {
            address 160.34.0.103
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO-ADP-PRD-1099 {
    members {
        /Common/10.23.20.51:1099 {
            address 10.23.20.51
            priority-group 100
        }
        /Common/10.23.20.52:1099 {
            address 10.23.20.52
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-ADP-PRD-1199 {
    members {
        /Common/10.23.20.51:1199 {
            address 10.23.20.51
            priority-group 100
        }
        /Common/10.23.20.52:1199 {
            address 10.23.20.52
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-ADP-PRD-1299 {
    members {
        /Common/10.23.20.51:1299 {
            address 10.23.20.51
            priority-group 100
        }
        /Common/10.23.20.52:1299 {
            address 10.23.20.52
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-ADP-PRD-45580 {
    members {
        /Common/10.23.20.51:45580 {
            address 10.23.20.51
            priority-group 100
        }
        /Common/10.23.20.52:45580 {
            address 10.23.20.52
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-CLM-PRD-7136 {
    members {
        /Common/10.23.20.111:7136 {
            address 10.23.20.111
            priority-group 100
        }
        /Common/10.23.20.112:7136 {
            address 10.23.20.112
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-HHRC-AD-Agent-pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.10.13:45580 {
            address 10.50.10.13
        }
        /Common/10.50.10.14:45580 {
            address 10.50.10.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO-SIM-PRD-SSL {
    members {
        /Common/10.23.20.41:443 {
            address 10.23.20.41
        }
        /Common/10.23.20.41:9080 {
            address 10.23.20.41
            session user-disabled
        }
        /Common/10.23.20.42:443 {
            address 10.23.20.42
        }
        /Common/10.23.20.42:9080 {
            address 10.23.20.42
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO-SIM-STG-1099 {
    members {
        /Common/10.23.12.165:1099 {
            address 10.23.12.165
            priority-group 100
        }
        /Common/10.23.12.166:1099 {
            address 10.23.12.166
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-SIM-STG-45580 {
    members {
        /Common/10.23.12.165:45580 {
            address 10.23.12.165
            priority-group 100
        }
        /Common/10.23.12.166:45580 {
            address 10.23.12.166
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-SIM-STG-SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.165:443 {
            address 10.23.12.165
        }
        /Common/10.23.12.166:443 {
            address 10.23.12.166
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-PRD-389 {
    members {
        /Common/10.23.20.11:389 {
            address 10.23.20.11
            priority-group 100
        }
        /Common/10.23.20.12:389 {
            address 10.23.20.12
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-PRD-636 {
    members {
        /Common/10.23.20.11:636 {
            address 10.23.20.11
            priority-group 100
        }
        /Common/10.23.20.12:636 {
            address 10.23.20.12
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-PRD-1389 {
    members {
        /Common/10.23.20.11:1389 {
            address 10.23.20.11
            priority-group 50
        }
        /Common/10.23.20.12:1389 {
            address 10.23.20.12
            priority-group 100
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-PRD-1636 {
    members {
        /Common/10.23.20.11:1636 {
            address 10.23.20.11
            priority-group 50
        }
        /Common/10.23.20.12:1636 {
            address 10.23.20.12
            priority-group 100
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-STG-389 {
    members {
        /Common/10.23.12.167:389 {
            address 10.23.12.167
            priority-group 100
        }
        /Common/10.23.12.168:389 {
            address 10.23.12.168
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-STG-636 {
    members {
        /Common/10.23.12.167:636 {
            address 10.23.12.167
            priority-group 100
        }
        /Common/10.23.12.168:636 {
            address 10.23.12.168
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-STG-1389 {
    members {
        /Common/10.23.12.167:1389 {
            address 10.23.12.167
            priority-group 100
        }
        /Common/10.23.12.168:1389 {
            address 10.23.12.168
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO-TDS-STG-1636 {
    members {
        /Common/10.23.12.167:1636 {
            address 10.23.12.167
            priority-group 100
        }
        /Common/10.23.12.168:1636 {
            address 10.23.12.168
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO1_Jirademo {
    description SSO_DEMO1_Jirademo
    members {
        /Common/10.23.11.231:443 {
            address 10.23.11.231
        }
        /Common/10.23.11.245:443 {
            address 10.23.11.245
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_IDM_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.183:443 {
            address 10.23.11.183
        }
        /Common/10.23.11.184:443 {
            address 10.23.11.184
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_JIRA_DSG_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.243:80 {
            address 10.23.11.243
        }
        /Common/10.23.11.245:9090 {
            address 10.23.11.245
            session user-disabled
        }
        /Common/10.23.11.246:9090 {
            address 10.23.11.246
            session user-disabled
        }
        /Common/10.23.11.247:7070 {
            address 10.23.11.247
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_QA_SmartSrv {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.213:80 {
            address 10.23.11.213
        }
        /Common/10.23.11.214:80 {
            address 10.23.11.214
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_SP_DSG_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.243:80 {
            address 10.23.11.243
        }
        /Common/10.23.11.244:80 {
            address 10.23.11.244
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_ecomp_esugg {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.209:80 {
            address 10.23.11.209
        }
        /Common/10.23.11.210:80 {
            address 10.23.11.210
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_edcp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.201:443 {
            address 10.23.11.201
        }
        /Common/10.23.11.202:443 {
            address 10.23.11.202
        }
        /Common/10.23.11.211:80 {
            address 10.23.11.211
            monitor /Common/tcp 
            session user-disabled
        }
        /Common/10.23.11.211:443 {
            address 10.23.11.211
            monitor /Common/tcp 
            session user-disabled
        }
        /Common/10.23.11.212:80 {
            address 10.23.11.212
            monitor /Common/tcp 
            session user-disabled
        }
        /Common/10.23.11.212:443 {
            address 10.23.11.212
            monitor /Common/tcp 
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_epay {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.203:80 {
            address 10.23.11.203
        }
        /Common/10.23.11.204:80 {
            address 10.23.11.204
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_gess_sync {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.207:80 {
            address 10.23.11.207
        }
        /Common/10.23.11.208:80 {
            address 10.23.11.208
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_grpdemo {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.193:80 {
            address 10.23.11.193
        }
        /Common/10.23.11.194:80 {
            address 10.23.11.194
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_grpdemo_discov {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.193:8090 {
            address 10.23.11.193
        }
        /Common/10.23.11.194:8090 {
            address 10.23.11.194
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_grpdemo_dmz {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.199:80 {
            address 10.23.11.199
        }
        /Common/10.23.11.200:80 {
            address 10.23.11.200
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_grpportal_8080 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.197:8080 {
            address 10.23.11.197
        }
        /Common/10.23.11.198:8080 {
            address 10.23.11.198
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_idp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.181:80 {
            address 10.23.11.181
        }
        /Common/10.23.11.182:80 {
            address 10.23.11.182
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_mpay {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.205:80 {
            address 10.23.11.205
        }
        /Common/10.23.11.206:80 {
            address 10.23.11.206
        }
        /Common/10.23.11.213:80 {
            address 10.23.11.213
            session user-disabled
        }
        /Common/10.23.11.214:80 {
            address 10.23.11.214
            session user-disabled
            state user-down
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sdesk {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.195:80 {
            address 10.23.11.195
        }
        /Common/10.23.11.196:80 {
            address 10.23.11.196
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sp2_dga {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.189:80 {
            address 10.23.11.189
        }
        /Common/10.23.11.190:80 {
            address 10.23.11.190
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sp_da {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.185:80 {
            address 10.23.11.185
        }
        /Common/10.23.11.186:80 {
            address 10.23.11.186
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sp_dga {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.183:80 {
            address 10.23.11.183
        }
        /Common/10.23.11.184:80 {
            address 10.23.11.184
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sp_edcp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.201:80 {
            address 10.23.11.201
        }
        /Common/10.23.11.202:80 {
            address 10.23.11.202
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_sp_pda {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.187:80 {
            address 10.23.11.187
            session user-disabled
        }
        /Common/10.23.11.188:80 {
            address 10.23.11.188
            session user-disabled
        }
        /Common/10.23.11.240:80 {
            address 10.23.11.240
        }
        /Common/10.23.11.241:80 {
            address 10.23.11.241
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_teams {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.197:80 {
            address 10.23.11.197
            session user-disabled
        }
        /Common/10.23.11.198:80 {
            address 10.23.11.198
            session user-disabled
        }
        /Common/10.23.11.240:80 {
            address 10.23.11.240
        }
        /Common/10.23.11.241:80 {
            address 10.23.11.241
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_token {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.135:80 {
            address 10.23.11.135
        }
        /Common/10.23.11.136:80 {
            address 10.23.11.136
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_DEMO_webmail {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.191:443 {
            address 10.23.11.191
        }
        /Common/10.23.11.192:443 {
            address 10.23.11.192
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_EDCP {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.67:443 {
            address 10.23.19.67
        }
        /Common/10.23.19.68:443 {
            address 10.23.19.68
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRPSec {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.161:80 {
            address 10.23.19.161
        }
        /Common/10.23.19.162:80 {
            address 10.23.19.162
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_APP {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.153:80 {
            address 10.23.19.153
        }
        /Common/10.23.19.154:80 {
            address 10.23.19.154
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_APP_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.53:80 {
            address 10.23.19.53
        }
        /Common/10.23.19.54:80 {
            address 10.23.19.54
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_DMZ {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.151:80 {
            address 10.23.19.151
        }
        /Common/10.23.19.152:80 {
            address 10.23.19.152
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_DMZ_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.51:80 {
            address 10.23.19.51
        }
        /Common/10.23.19.52:80 {
            address 10.23.19.52
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_REP {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.155:8090 {
            address 10.23.19.155
        }
        /Common/10.23.19.156:8090 {
            address 10.23.19.156
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_GRP_REP_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.55:8090 {
            address 10.23.19.55
        }
        /Common/10.23.19.56:8090 {
            address 10.23.19.56
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_Gess_Sync {
    load-balancing-mode least-connections-node
    members {
        /Common/10.23.19.75:80 {
            address 10.23.19.75
        }
        /Common/10.23.19.76:80 {
            address 10.23.19.76
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_IDM_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.13:443 {
            address 10.23.19.13
        }
        /Common/10.23.19.14:443 {
            address 10.23.19.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_SDRep {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.67:80 {
            address 10.23.19.67
        }
        /Common/10.23.19.68:80 {
            address 10.23.19.68
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_SDReport {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.167:80 {
            address 10.23.19.167
        }
        /Common/10.23.19.168:80 {
            address 10.23.19.168
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_SDesk {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.59:8080 {
            address 10.23.19.59
        }
        /Common/10.23.19.60:8080 {
            address 10.23.19.60
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ShPnt {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.65:80 {
            address 10.23.19.65
        }
        /Common/10.23.19.66:80 {
            address 10.23.19.66
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ShPnt_GPortal80 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.61:80 {
            address 10.23.19.61
        }
        /Common/10.23.19.62:80 {
            address 10.23.19.62
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ShPnt_GPortal8080 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.61:8080 {
            address 10.23.19.61
        }
        /Common/10.23.19.62:8080 {
            address 10.23.19.62
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_SharePoint {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.165:80 {
            address 10.23.19.165
        }
        /Common/10.23.19.166:80 {
            address 10.23.19.166
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_SrvcDsk {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.159:8080 {
            address 10.23.19.159
        }
        /Common/10.23.19.160:8080 {
            address 10.23.19.160
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_Sync_Gess {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.175:80 {
            address 10.23.19.175
        }
        /Common/10.23.19.176:80 {
            address 10.23.19.176
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_WebMail {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.157:443 {
            address 10.23.19.157
        }
        /Common/10.23.19.158:443 {
            address 10.23.19.158
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_Webmail {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.57:443 {
            address 10.23.19.57
        }
        /Common/10.23.19.58:443 {
            address 10.23.19.58
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_deg_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.117:80 {
            address 10.23.19.117
        }
        /Common/10.23.19.118:80 {
            address 10.23.19.118
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dga_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.113:80 {
            address 10.23.19.113
        }
        /Common/10.23.19.114:80 {
            address 10.23.19.114
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dga_sp1 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.129:80 {
            address 10.23.19.129
        }
        /Common/10.23.19.130:80 {
            address 10.23.19.130
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dga_sp2 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.115:80 {
            address 10.23.19.115
        }
        /Common/10.23.19.116:80 {
            address 10.23.19.116
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dghr_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.125:80 {
            address 10.23.19.125
        }
        /Common/10.23.19.126:80 {
            address 10.23.19.126
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dof_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.127:80 {
            address 10.23.19.127
        }
        /Common/10.23.19.128:80 {
            address 10.23.19.128
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dsg_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.121:80 {
            address 10.23.19.121
        }
        /Common/10.23.19.122:80 {
            address 10.23.19.122
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_dubai_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.119:80 {
            address 10.23.19.119
        }
        /Common/10.23.19.120:80 {
            address 10.23.19.120
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_eComp_eSugg {
    load-balancing-mode least-connections-node
    members {
        /Common/10.23.19.73:80 {
            address 10.23.19.73
        }
        /Common/10.23.19.74:80 {
            address 10.23.19.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ePayAdmin {
    load-balancing-mode least-connections-node
    members {
        /Common/10.23.19.69:80 {
            address 10.23.19.69
        }
        /Common/10.23.19.70:80 {
            address 10.23.19.70
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ePay_Admin {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.169:80 {
            address 10.23.19.169
        }
        /Common/10.23.19.170:80 {
            address 10.23.19.170
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_eSugg_eComp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.173:80 {
            address 10.23.19.173
        }
        /Common/10.23.19.174:80 {
            address 10.23.19.174
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_edcp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.167:443 {
            address 10.23.19.167
        }
        /Common/10.23.19.168:443 {
            address 10.23.19.168
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_fad_sp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.123:80 {
            address 10.23.19.123
        }
        /Common/10.23.19.124:80 {
            address 10.23.19.124
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_idm_rep {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.113:443 {
            address 10.23.19.113
        }
        /Common/10.23.19.114:443 {
            address 10.23.19.114
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_idp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.11:80 {
            address 10.23.19.11
        }
        /Common/10.23.19.12:80 {
            address 10.23.19.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_mPayAdmin {
    load-balancing-mode least-connections-node
    members {
        /Common/10.23.19.71:80 {
            address 10.23.19.71
        }
        /Common/10.23.19.72:80 {
            address 10.23.19.72
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_mPay_Admin {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.171:80 {
            address 10.23.19.171
        }
        /Common/10.23.19.172:80 {
            address 10.23.19.172
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp1_dga {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.29:80 {
            address 10.23.19.29
        }
        /Common/10.23.19.30:80 {
            address 10.23.19.30
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp2_dga {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.15:80 {
            address 10.23.19.15
        }
        /Common/10.23.19.16:80 {
            address 10.23.19.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_deg {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.17:80 {
            address 10.23.19.17
        }
        /Common/10.23.19.18:80 {
            address 10.23.19.18
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_dga {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.13:80 {
            address 10.23.19.13
        }
        /Common/10.23.19.14:80 {
            address 10.23.19.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_dghr {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.25:80 {
            address 10.23.19.25
        }
        /Common/10.23.19.26:80 {
            address 10.23.19.26
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_dof {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.27:80 {
            address 10.23.19.27
        }
        /Common/10.23.19.28:80 {
            address 10.23.19.28
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_dsg {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.21:80 {
            address 10.23.19.21
        }
        /Common/10.23.19.22:80 {
            address 10.23.19.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_dubai {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.19:80 {
            address 10.23.19.19
        }
        /Common/10.23.19.20:80 {
            address 10.23.19.20
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sp_fad {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.23:80 {
            address 10.23.19.23
        }
        /Common/10.23.19.24:80 {
            address 10.23.19.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sso_idp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.111:80 {
            address 10.23.19.111
        }
        /Common/10.23.19.112:80 {
            address 10.23.19.112
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_sso_token {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.131:80 {
            address 10.23.19.131
        }
        /Common/10.23.19.132:80 {
            address 10.23.19.132
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SSO_PROD_ssosp1 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.19.29:80 {
            address 10.23.19.29
        }
        /Common/10.23.19.30:80 {
            address 10.23.19.30
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/STS1_PROD_Cloud {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.22:443 {
            address 10.50.5.22
        }
        /Common/10.50.5.23:443 {
            address 10.50.5.23
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Saad_V2_Prod_8080 {
    description "Saad_V2_Prod_8080#TAS000000053590"
    members {
        /Common/10.50.2.52:8080 {
            address 10.50.2.52
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt2007_PROD_Pool {
    members {
        /Common/10.23.3.75:80 {
            address 10.23.3.75
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt2013_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.73:80 {
            address 10.23.3.73
        }
        /Common/10.23.3.74:80 {
            address 10.23.3.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt2016_PROD_Pool {
    description "ShPnt2016_PROD_Pool, INC000000346814"
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.28:80 {
            address 10.50.1.28
        }
        /Common/10.50.1.29:80 {
            address 10.50.1.29
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt2016_PROD_SSL {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.1.28:443 {
            address 10.50.1.28
        }
        /Common/10.50.1.29:443 {
            address 10.50.1.29
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_LAD_QA_Pool {
    description ShPnt_LAD_TWQ_QA_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.45:80 {
            address 10.23.12.45
        }
        /Common/10.23.12.46:80 {
            address 10.23.12.46
            session user-disabled
            state user-down
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_PROD_Pool {
    description "SharePoint 2013"
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.73:80 {
            address 10.23.3.73
        }
        /Common/10.23.3.74:80 {
            address 10.23.3.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_PROD_Pool_DoF {
    description ShPnt_PROD_Pool_DoF_Tmp
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.73:80 {
            address 10.23.3.73
        }
        /Common/10.23.3.74:80 {
            address 10.23.3.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_PROD_Pool_DoF_74 {
    description "ShPnt_PROD_Pool_DoF_Tmp Node .74"
    members {
        /Common/10.23.3.74:80 {
            address 10.23.3.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_QA_Office_Pool {
    members {
        /Common/10.23.12.71:80 {
            address 10.23.12.71
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_QA_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.48:80 {
            address 10.23.12.48
        }
        /Common/10.23.12.49:80 {
            address 10.23.12.49
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_QA_Pool_DCust {
    description "ShPnt_QA_Pool_Dubai Custom"
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.75:80 {
            address 10.23.12.75
        }
        /Common/10.23.12.75:443 {
            address 10.23.12.75
            session user-disabled
        }
        /Common/10.23.12.76:80 {
            address 10.23.12.76
        }
        /Common/10.23.12.76:443 {
            address 10.23.12.76
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_QA_Pool_DubaiNow {
    description ShPnt_QA_Pool_DubaiNow
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.11.20:80 {
            address 10.50.11.20
        }
        /Common/10.50.11.21:80 {
            address 10.50.11.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_QA_Tadween_Pool {
    description ShPnt_QA_Tadween_QA_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.12.86:80 {
            address 10.23.12.86
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ShPnt_SmartSurvey_QA_Pool {
    description "INC000000360741 ShPnt_SmartSurvey_QA_Pool"
    members {
        /Common/10.50.11.19:80 {
            address 10.50.11.19
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Smart_Customer_Pool {
    members {
        /Common/52.30.130.230:443 {
            address 52.30.130.230
        }
        /Common/54.171.37.147:443 {
            address 54.171.37.147
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SmrtBld_Cloud_PROD_22_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.27:21 {
            address 10.50.2.27
            session user-disabled
        }
        /Common/10.50.2.27:22 {
            address 10.50.2.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/SmrtBld_Cloud_PROD_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.27:80 {
            address 10.50.2.27
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Sts-Internal_PROD_Pool {
    description Sts-Internal_PROD_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.10.13:443 {
            address 10.50.10.13
        }
        /Common/10.50.10.14:443 {
            address 10.50.10.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Survey_PROD_Pool {
    members {
        /Common/75.98.93.51:443 {
            address 75.98.93.51
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Twig_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/Twig_1:80 {
            address 10.22.65.14
        }
        /Common/Twig_2:80 {
            address 10.22.65.15
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Twig_PROD_QA_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/Twig_1:80 {
            address 10.22.65.14
        }
        /Common/Twig_2:80 {
            address 10.22.65.15
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Twig_QA_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/Twig_QA_Node1:80 {
            address 10.23.11.83
        }
        /Common/Twig_QA_Node2:80 {
            address 10.23.11.84
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Veridoc-JBoss-PRD {
    members {
        /Common/10.50.2.22:8080 {
            address 10.50.2.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/WFolders_STG_SSL_Pool {
    description INC000000393275
    members {
        /Common/10.50.12.24:443 {
            address 10.50.12.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/WKFL_Vitrue_SSL {
    members {
        /Common/160.34.0.94:443 {
            address 160.34.0.94
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/WatchDox_FileShare {
    load-balancing-mode least-connections-member
    members {
        /Common/WatchDox_Main:443 {
            address 10.23.7.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/WatchDox_SSO_AUTH {
    load-balancing-mode least-connections-member
    members {
        /Common/WatchDox_SSO_AUTH:443 {
            address 10.23.3.93
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/Watson_Prod_Pool {
    description Watson_Prod_Pool
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.2.21:54546 {
            address 10.50.2.21
        }
        /Common/10.50.2.30:54546 {
            address 10.50.2.30
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/board_NET_PROD_Pool {
    description "#INC000000402292"
    members {
        /Common/10.50.1.230:80 {
            address 10.50.1.230
            session user-disabled
        }
        /Common/10.50.1.230:443 {
            address 10.50.1.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ePayPROD_ActiveStandby_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.13:54546 {
            address 10.22.5.13
            priority-group 25
        }
        /Common/10.22.5.14:54546 {
            address 10.22.5.14
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/ePayPROD_External_CS_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/199.101.156.130:443 {
            address 199.101.156.130
            monitor /Common/tcp 
            session user-disabled
        }
        /Common/91.235.132.130:443 {
            address 91.235.132.130
            monitor /Common/none 
        }
    }
}
ltm pool /Common/ePayPROD_Internal_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.13:54543 {
            address 10.22.5.13
        }
        /Common/10.22.5.14:54543 {
            address 10.22.5.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ePayPROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.13:54546 {
            address 10.22.5.13
        }
        /Common/10.22.5.14:54546 {
            address 10.22.5.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ePayPROD_SSL_Node1 {
    members {
        /Common/10.22.5.13:54543 {
            address 10.22.5.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ePayPROD_SSL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.13:54543 {
            address 10.22.5.13
        }
        /Common/10.22.5.14:54543 {
            address 10.22.5.14
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_DSS_Internal_Cloud_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.111:9763 {
            address 10.22.1.111
        }
        /Common/10.22.1.112:9763 {
            address 10.22.1.112
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_DSS_Internal_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.33:9763 {
            address 10.22.1.33
            priority-group 100
        }
        /Common/10.22.1.34:9763 {
            address 10.22.1.34
            priority-group 50
        }
    }
    min-active-members 1
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_ESB_8244_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.113:8245 {
            address 10.22.1.113
        }
        /Common/10.22.1.114:8245 {
            address 10.22.1.114
        }
        /Common/10.22.1.115:8245 {
            address 10.22.1.115
        }
        /Common/10.22.1.116:8245 {
            address 10.22.1.116
        }
        /Common/10.22.1.21:8245 {
            address 10.22.1.21
        }
        /Common/10.22.1.22:8245 {
            address 10.22.1.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_ESB_TL_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.21:8281 {
            address 10.22.1.21
        }
        /Common/10.22.1.22:8281 {
            address 10.22.1.22
        }
    }
    monitor /Common/http and /Common/tcp 
}
ltm pool /Common/eServPROD_GESS_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.23:54546 {
            address 10.22.1.23
        }
        /Common/10.22.1.24:54546 {
            address 10.22.1.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_Reports_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.21:8888 {
            address 10.22.5.21
        }
        /Common/10.22.5.22:8888 {
            address 10.22.5.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_SYNC_Internal_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.25:54546 {
            address 10.22.1.25
        }
        /Common/10.22.1.26:54546 {
            address 10.22.1.26
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/eServPROD_SYNC_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.1.25:54546 {
            address 10.22.1.25
        }
        /Common/10.22.1.26:54546 {
            address 10.22.1.26
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpMaintenance_pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.3.73:80 {
            address 10.23.3.73
        }
        /Common/10.23.3.74:80 {
            address 10.23.3.74
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpRepPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.17.11:8090 {
            address 10.21.17.11
        }
        /Common/10.21.17.12:8090 {
            address 10.21.17.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.11.11:8050 {
            address 10.21.11.11
        }
        /Common/10.21.11.12:8050 {
            address 10.21.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grp_10332WebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.11.11:10332 {
            address 10.21.11.11
        }
        /Common/10.21.11.12:10332 {
            address 10.21.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grp_dmz_test_pool {
    members {
        /Common/10.21.15.22:8001 {
            address 10.21.15.22
            session user-disabled
        }
    }
}
ltm pool /Common/grpappAppPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.17.11:9050 {
            address 10.21.17.11
        }
        /Common/10.21.17.12:9050 {
            address 10.21.17.12
        }
    }
    monitor /Common/gateway_icmp and /Common/tcp 
}
ltm pool /Common/grpapp_Internal_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.11.11:8050 {
            address 10.21.11.11
        }
        /Common/10.21.11.12:8050 {
            address 10.21.11.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpcrpaWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.11:8035 {
            address 10.21.15.11
            session user-disabled
        }
        /Common/10.21.15.12:8035 {
            address 10.21.15.12
            session user-disabled
        }
        /Common/10.21.15.21:8035 {
            address 10.21.15.21
            session user-disabled
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpdemoWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.21:8001 {
            address 10.21.15.21
        }
        /Common/10.21.15.22:8001 {
            address 10.21.15.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpdemo_disco_test {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.11:8090 {
            address 10.21.15.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpdemodmzWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.11:8001 {
            address 10.21.15.11
        }
        /Common/10.21.15.12:8001 {
            address 10.21.15.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpdevWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.22:8005 {
            address 10.21.15.22
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpprojWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.21:8030 {
            address 10.21.15.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grppservices80_temp {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.12.11:80 {
            address 10.21.12.11
        }
        /Common/10.21.12.12:80 {
            address 10.21.12.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpstarWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.11:8010 {
            address 10.21.15.11
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpsuptWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.15.21:8035 {
            address 10.21.15.21
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/grpuatWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/grpUATapp:8025 {
            address 10.21.14.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/mDubai_PROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/mDubai_Node1:54546 {
            address 10.22.1.49
        }
        /Common/mDubai_Node2:54546 {
            address 10.22.1.50
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/mPayPROD_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.5.15:54543 {
            address 10.22.5.15
        }
        /Common/10.22.5.16:54543 {
            address 10.22.5.16
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-midtier-8080 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.10.11:8080 {
            address 10.22.10.11
        }
        /Common/10.22.10.12:8080 {
            address 10.22.10.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp3-80 {
    members {
        /Common/10.22.10.13:80 {
            address 10.22.10.13
            session user-disabled
        }
        /Common/10.50.2.24:8181 {
            address 10.50.2.24
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp3-8080 {
    members {
        /Common/10.22.10.13:8080 {
            address 10.22.10.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp3-8090 {
    load-balancing-mode least-connections-member
    members {
        /Common/10.22.10.13:8090 {
            address 10.22.10.13
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp4-80 {
    members {
        /Common/10.22.10.14:80 {
            address 10.22.10.14
            session user-disabled
        }
        /Common/10.50.1.17:80 {
            address 10.50.1.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp4-8080 {
    members {
        /Common/10.22.10.14:8080 {
            address 10.22.10.14
            session user-disabled
        }
        /Common/10.50.1.17:80 {
            address 10.50.1.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/remedy-sdapp4-8181 {
    members {
        /Common/10.22.10.14:8181 {
            address 10.22.10.14
            session user-disabled
        }
        /Common/10.50.1.17:80 {
            address 10.50.1.17
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/servicesWebPool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.21.12.11:8050 {
            address 10.21.12.11
        }
        /Common/10.21.12.12:8050 {
            address 10.21.12.12
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/smartchat__Jira_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.50.5.101:443 {
            address 10.50.5.101
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_221_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.221:80 {
            address 10.23.11.221
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_221_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.221:443 {
            address 10.23.11.221
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_222_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.222:80 {
            address 10.23.11.222
        }
    }
}
ltm pool /Common/ssotest_223_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.223:443 {
            address 10.23.11.223
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_224_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.224:80 {
            address 10.23.11.224
        }
    }
}
ltm pool /Common/ssotest_224_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.224:443 {
            address 10.23.11.224
        }
    }
}
ltm pool /Common/ssotest_224_8090_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.224:8090 {
            address 10.23.11.224
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_225_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.225:80 {
            address 10.23.11.225
        }
    }
}
ltm pool /Common/ssotest_225_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.225:443 {
            address 10.23.11.225
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_226_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.226:443 {
            address 10.23.11.226
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_227_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.227:443 {
            address 10.23.11.227
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_228_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.228:443 {
            address 10.23.11.228
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_229_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.229:80 {
            address 10.23.11.229
        }
    }
}
ltm pool /Common/ssotest_230_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.230:80 {
            address 10.23.11.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_230_443_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.230:443 {
            address 10.23.11.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_230_8090_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.230:8090 {
            address 10.23.11.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_230_8091_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.230:8091 {
            address 10.23.11.230
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_231_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.231:80 {
            address 10.23.11.231
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_232_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.232:80 {
            address 10.23.11.232
        }
    }
    monitor /Common/tcp 
}
ltm pool /Common/ssotest_233_80_Pool {
    load-balancing-mode least-connections-member
    members {
        /Common/10.23.11.233:80 {
            address 10.23.11.233
        }
    }
    monitor /Common/tcp 
}
ltm rule /Common/API_MGR_SSL_Base {
    when RULE_INIT
{
	set static::API_MGR_flag_maintenance 0
	set static::API_MGR_Sorry "<html><head></head><body><p>Access Denied ...!!! </p></body></html>"
}

when HTTP_REQUEST
{
	set API_MGR_GLOBAL_poolName ""

	#set API_MGR_GLOBAL_BREAK_ALL 0
	#set API_MGR_GLOBAL_URI ""
	#set API_MGR_goToMaintenance 0
	#set API_MGR_GLOBAL_URI [HTTP::uri]

	#log local0. "Access allowed for Host: [HTTP::host]"

	if { ($static::API_MGR_flag_maintenance == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

		#set API_MGR_GLOBAL_BREAK_ALL 1

		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
		#persist cookie insert API_MGR_Maint 0

		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else
	{
		switch [string tolower [HTTP::host]] {
			"smartapis.dubai.gov.ae"
			{
				if { [HTTP::uri] starts_with "/store" or [HTTP::uri] starts_with "/publisher" or [HTTP::uri] starts_with "/registry"} {
					set API_MGR_GLOBAL_poolName "API-MGR-9443-Pool"
					pool $API_MGR_GLOBAL_poolName
					#persist cookie insert APIMGR9 0
				} elseif { [HTTP::uri] starts_with "/carbon" } {
					#if { [IP::client_addr] equals "213.42.50.181" } {
						set API_MGR_GLOBAL_poolName "API-MGR-9443-Pool"
						pool $API_MGR_GLOBAL_poolName	
					##} else {
					#	HTTP::respond 200 content $static::API_MGR_Sorry
					#}
				} elseif { [HTTP::uri] starts_with "/token" } {
					#[HTTP::uri] "/token"
					set API_MGR_GLOBAL_poolName "API-MGR-8243-Pool"
					pool $API_MGR_GLOBAL_poolName
					#persist cookie insert APIMGR8 0
				} elseif { [HTTP::uri] starts_with "/public" } {
					set API_MGR_GLOBAL_poolName "API-MGR-8243-Pool"
					pool $API_MGR_GLOBAL_poolName
					#persist cookie insert APIMGR8 0
				} elseif { [HTTP::uri] equals "/" } {
					HTTP::redirect "https://smartapis.dubai.gov.ae/store"
					#set API_MGR_GLOBAL_poolName "API-MGR-8243-Pool"
					#pool $API_MGR_GLOBAL_poolName
					#persist cookie insert APIMGR8 0
				}
				else {
					drop
				}
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#set API_MGR_GLOBAL_BREAK_ALL 1
				drop
			}
		}
	}		
}
}
ltm rule /Common/APR_UAT_SSL_Rewrite_discov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ARP_UAT_SSL_request_uri
	{
		"^//discoverer/====/discoverer/"
	}
	set static::ARP_UAT_SSL_request_host
	{
	} 
	set static::ARP_UAT_SSL_request_referer
	{
	}
	set static::ARP_UAT_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ARP_UAT_SSL_response_setCookie
	{
	}
	set static::ARP_UAT_SSL_response_location
	{
		"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
	}
	set static::ARP_UAT_SSL_response_contentLocation
	{
		"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
	}
	set static::ARP_UAT_SSL_response_body
	{
		"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$ARP_UAT_SSL_GLOBAL_poolName == "ARP-UAT-Discov-Pool-8090" and $ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_uri] > 0}
	{
	set ARP_UAT_SSL_request_val [HTTP::uri]
	foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_uri
	{
		set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
		set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
		if {$ARP_UAT_SSL_request_replace == "nothing"}
		{
			set ARP_UAT_SSL_request_replace ""
		}

		regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
	}
	if { [catch {HTTP::uri $ARP_UAT_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ARP_UAT_SSL_request_val [HTTP::host]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_host
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}
			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $ARP_UAT_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Referer]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_referer
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Cookie]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_cookie
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$ARP_UAT_SSL_GLOBAL_poolName == "ARP-UAT-Discov-Pool-8090" and $ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ARP_UAT_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_val_list
		{
			foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_setCookie
			{
				set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
				set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

				if {$ARP_UAT_SSL_request_replace == "nothing"}
				{
					set ARP_UAT_SSL_request_replace ""
				}
				regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $ARP_UAT_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Location]

		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_location
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Content-Location]

		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_contentLocation
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::ARP_UAT_SSL_response_body] > 0}
	{
		set ARP_UAT_SSL_expression ""
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_body
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			set ARP_UAT_SSL_expression "$ARP_UAT_SSL_expression@$ARP_UAT_SSL_request_find@$ARP_UAT_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $ARP_UAT_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$ARP_UAT_SSL_GLOBAL_poolName == "ARP-UAT-Discov-Pool-8090" and $ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {

		#set ARP_UAT_SSL_theMatch [STREAM::match]

		#log local0. "match found: $ARP_UAT_SSL_theMatch"
		#log local0. "on URI: $ARP_UAT_SSL_GLOBAL_URI"

    }
}
}
ltm rule /Common/ARP_ADF_PRD_Base {
    when RULE_INIT
{

}

when HTTP_REQUEST
{
	#set ARP_GLOBAL_BREAK_ALL 0
	#set ARP_PRD_SSL_GLOBAL_poolName ""
	#set ARP_GLOBAL_Rewrite_Class ""
	#set ARP_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 

		"arpportal.dubai.gov.ae:80" - "arpportal.dubai.gov.ae"
		{	
			HTTP::redirect "https://arpportal.dubai.gov.ae[HTTP::uri]"
		}


    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
			drop
        }
    }

}
}
ltm rule /Common/ARP_ADF_PRD_SSL_Base {
    when RULE_INIT
{
	set static::ARP_PRD_SSL_Maintenance_Flag 0
	set static::ARP_PRD_APP_Src "ARP_PRD_APP_Src"
}

when HTTP_REQUEST
{
	set ARP_PRD_SSL_GLOBAL_BREAK_ALL 0
	set ARP_PRD_SSL_GLOBAL_poolName ""
	set ARP_PRD_SSL_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 


		"arpportal.dubai.gov.ae"
	    {

			if { ($static::ARP_PRD_SSL_Maintenance_Flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

				set ARP_PRD_SSL_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}

			#log local0. "[HTTP::host] & URI: [HTTP::uri] accessed by Client: [IP::client_addr]"
			if { (not [class match [IP::client_addr] equals $static::ARP_PRD_APP_Src]) } {
				set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-ADF-DMZ"
				pool $ARP_PRD_SSL_GLOBAL_poolName	
				persist cookie insert ARP_PRD_ADF_DMZ 0
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else {
				set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-ADFS-Pool"
				pool $ARP_PRD_SSL_GLOBAL_poolName	
				persist cookie insert ARP_PRD_ADF 0
				log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
		}

	 	default
     	{
		 #   log local0. "Access blocked for Host: [HTTP::host]"
	    	set ARPPortal_PRD_SSL_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ARP_PRD_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set ARP_GLOBAL_BREAK_ALL 0
	set ARP_GLOBAL_poolName ""
	set ARP_GLOBAL_Rewrite_Class ""
	set ARP_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "arp.dubai.gov.ae" - "www.arp.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    set ARP_GLOBAL_BREAK_ALL 1
	        if { [HTTP::uri] equals "/"} { 
				HTTP::redirect "https://arp.dubai.gov.ae/OA_HTML/AppsLocalLogin.jsp"
			} elseif {[HTTP::uri] equals "/discoverer/plus"} {
				HTTP::redirect "https://arp.dubai.gov.ae/discoverer/plus"
			} elseif { [HTTP::uri] starts_with "/endeca" } {
				HTTP::redirect "https://arp.dubai.gov.ae[HTTP::uri]"
			} elseif { [HTTP::uri] starts_with "/FalconTimeZone" } {
				HTTP::redirect "https://arp.dubai.gov.ae/application/faces/FalconDetails.jsf"
				#HTTP::redirect "https://arp.dubai.gov.ae[HTTP::uri]"
			} elseif { [HTTP::uri] starts_with "/OA_HTML/runforms.jsp" } {
				#HTTP::redirect "https://arp.dubai.gov.ae/OA_HTML/runforms.jsp"
				HTTP::redirect "https://arp.dubai.gov.ae[HTTP::uri]"
			} else {
				drop
			}
        }

		"arpportal.dubai.gov.ae"
		{
			#HTTP::redirect "https://arpportal.dubai.gov.ae/application/faces/FalconDetails.jsf"
			HTTP::redirect "https://arpportal.dubai.gov.ae[HTTP::uri]"
			#pool ARP-PRD-ADFS-Pool

		}


    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
			drop
        }
    }

}
}
ltm rule /Common/ARP_PRD_SSL_Base {
    when RULE_INIT
{
	set static::ARP_PRD_SSL_Maintenance_Flag 0
	set static::ARP_PRD_APP_Src "ARP_PRD_APP_Src"
}

when HTTP_REQUEST
{
	set ARP_PRD_SSL_GLOBAL_BREAK_ALL 0
	set ARP_PRD_SSL_GLOBAL_poolName ""
	set ARP_PRD_SSL_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "arp.dubai.gov.ae"
	    {
			set ARP_PRD_SSL_GLOBAL_URI [HTTP::uri]
		   # log local0. "Access allowed for Host: [HTTP::host]"

			if { ($static::ARP_PRD_SSL_Maintenance_Flag == 1 and (not ([IP::client_addr] equals "213.42.50.181"))) or ([IP::client_addr] equals "MP_Enabled_IP") or ([IP::client_addr] equals "213.42.50.172") or ([IP::client_addr] equals "213.42.55.99")} {

				set ARP_PRD_SSL_GLOBAL_BREAK_ALL 1

				if {[HTTP::uri] ends_with "favicon.ico"} {		
					HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
				}
				elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
					HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
				}
				else {
					HTTP::uri "/sites/maintenance/maintenance.aspx"
				}

				#HTTP::redirect "http://maintenance.dubai.ae"

				HTTP::header replace Host "www.dsg.gov.ae"
				HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
				HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

				set ARP_PRD_SSL_GLOBAL_poolName "grpMaintenance_pool"
				pool $ARP_PRD_SSL_GLOBAL_poolName
				persist cookie insert ARP_PRD_Maint 0
				#or ([IP::client_addr] equals "213.42.50.181")
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				#log local0. "[HTTP::host] accessed by Client: [IP::client_addr]"
				if { [HTTP::uri] starts_with "/FalconTimeZone/" or [HTTP::uri] starts_with "/application/"   and (not [class match [IP::client_addr] equals $static::ARP_PRD_APP_Src]) } {
					set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-ADF-DMZ"
					pool $ARP_PRD_SSL_GLOBAL_poolName	
					persist cookie insert ARP_PRD_ADF_DMZ 0
				}
				elseif { (not [class match [IP::client_addr] equals $static::ARP_PRD_APP_Src]) } {
					#log local0. "Access allowed for DMZ: [HTTP::host] by Client: [IP::client_addr]"
					set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-DMZ"
					pool $ARP_PRD_SSL_GLOBAL_poolName	
					persist cookie insert ARP_PRD_DMZ 0
				} 
				else {
					switch -glob  $ARP_PRD_SSL_GLOBAL_URI
					{
						"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
						{
							# These URIs are exempted from Rewrite iRule
							set ARP_PRD_SSL_GLOBAL_BREAK_ALL 1
							set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-FE"
							pool $ARP_PRD_SSL_GLOBAL_poolName	
							persist cookie insert ARP_PRD_App 0
							#log local0. "Java Hit"
						}

						"/discoverer/*"
						{
							set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-Discov-Pool"
							pool $ARP_PRD_SSL_GLOBAL_poolName	
							persist cookie insert ARP_PRD_Dis 0
							#log local0. "Discoverer Hit"
						}

						"/FalconTimeZone/*" - "/FalconTimeZone/face*" - "/application/*"
						{
							set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-ADFS-Pool"
							pool $ARP_PRD_SSL_GLOBAL_poolName	
							persist cookie insert ARP_PRD_ADF 0
							#log local0. "Falcon Hit"
						}

						default
						{
							#log local0. "Access allowed for APP: [HTTP::host] by Client: [IP::client_addr]"
							set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-FE"
							pool $ARP_PRD_SSL_GLOBAL_poolName	
							persist cookie insert ARP_PRD_App 0
							#log local0. "Default Hit"
						}
					}
				}
			}			
        }

		"arpportal.dubai.gov.ae"
	    {
			set ARP_PRD_SSL_GLOBAL_poolName "ARP-PRD-ADFS-Pool"
			pool $ARP_PRD_SSL_GLOBAL_poolName	
			persist cookie insert ARP_PRD_ADF 0
			#log local0. "Falcon Hit"
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set ARP_PRD_SSL_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }
}
}
ltm rule /Common/ARP_PRD_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ARP_PRD_SSL_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"^//discoverer/====/discoverer/"
		#"https://arp.dubai.gov.ae====http://arp.dubai.gov.ae"
	}
	set static::ARP_PRD_SSL_request_host
	{
	} 
	set static::ARP_PRD_SSL_request_referer
	{
	}
	set static::ARP_PRD_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ARP_PRD_SSL_response_setCookie
	{
	}
	set static::ARP_PRD_SSL_response_location
	{
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:443====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://hfapap01.dubaigov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:10005====https://arp.dubai.gov.ae"
		#"http://hfapap02.dubaigov.local:8070====https://arp.dubai.gov.ae"
		"http://arpportal.dubai.gov.ae:80====https://arpportal.dubai.gov.ae"
	}
	set static::ARP_PRD_SSL_response_contentLocation
	{
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:443====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://hfapap01.dubaigov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:10005====https://arp.dubai.gov.ae"
		#"http://hfapap02.dubaigov.local:8070====https://arp.dubai.gov.ae"
		"http://arpportal.dubai.gov.ae:80====https://arpportal.dubai.gov.ae"
	}
	set static::ARP_PRD_SSL_response_body
	{
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:443====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://hfapap01.dubaigov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:10005====https://arp.dubai.gov.ae"
		#"http://hfapap02.dubaigov.local:8070====https://arp.dubai.gov.ae"
		"http://arpportal.dubai.gov.ae:80====https://arpportal.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_uri] > 0}
	{
	set ARP_PRD_SSL_request_val [HTTP::uri]
	foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_uri
	{
		set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
		set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
		if {$ARP_PRD_SSL_request_replace == "nothing"}
		{
			set ARP_PRD_SSL_request_replace ""
		}

		regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
	}
	if { [catch {HTTP::uri $ARP_PRD_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ARP_PRD_SSL_request_val [HTTP::host]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_host
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}
			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $ARP_PRD_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Referer]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_referer
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Cookie]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_cookie
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ARP_PRD_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_val_list
		{
			foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_setCookie
			{
				set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
				set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

				if {$ARP_PRD_SSL_request_replace == "nothing"}
				{
					set ARP_PRD_SSL_request_replace ""
				}
				regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $ARP_PRD_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Location]

		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_location
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Content-Location]

		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_contentLocation
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::ARP_PRD_SSL_response_body] > 0}
	{
		set ARP_PRD_SSL_expression ""
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_body
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			set ARP_PRD_SSL_expression "$ARP_PRD_SSL_expression@$ARP_PRD_SSL_request_find@$ARP_PRD_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $ARP_PRD_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {

		#set ARP_PRD_SSL_theMatch [STREAM::match]

		#log local0. "match found: $ARP_PRD_SSL_theMatch"
		#log local0. "on URI: $ARP_PRD_SSL_GLOBAL_URI"

    }
}
}
ltm rule /Common/ARP_PROD_SSL_Rewrite_discov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ARP_PRD_SSL_request_uri
	{
		"^//discoverer/====/discoverer/"
		#"https://arp.dubai.gov.ae====http://arp.dubai.gov.ae"
	}
	set static::ARP_PRD_SSL_request_host
	{
	} 
	set static::ARP_PRD_SSL_request_referer
	{
	}
	set static::ARP_PRD_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ARP_PRD_SSL_response_setCookie
	{
	}
	set static::ARP_PRD_SSL_response_location
	{
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"
		"http://hfapap01.dubaigov.ae:8888====https://arp.dubai.gov.ae"

	}
	set static::ARP_PRD_SSL_response_contentLocation
	{
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"

	}	
	set static::ARP_PRD_SSL_response_body
	{
		"http://arp.dubai.gov.ae:8888====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"https://arp.dubai.gov.ae:80====https://arp.dubai.gov.ae"
		"http://arp.dubai.gov.ae====https://arp.dubai.gov.ae"
		"http://hfapap01.dubaigov.ae:8888====https://arp.dubai.gov.ae"

	}
}

when HTTP_REQUEST
{
	if {$ARP_PRD_SSL_GLOBAL_poolName == "ARP-PRD-Discov-Pool" and $ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_uri] > 0}
	{
	set ARP_PRD_SSL_request_val [HTTP::uri]
	foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_uri
	{
		set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
		set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
		if {$ARP_PRD_SSL_request_replace == "nothing"}
		{
			set ARP_PRD_SSL_request_replace ""
		}

		regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
	}
	if { [catch {HTTP::uri $ARP_PRD_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ARP_PRD_SSL_request_val [HTTP::host]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_host
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}
			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $ARP_PRD_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Referer]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_referer
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ARP_PRD_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Cookie]
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_request_cookie
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$ARP_PRD_SSL_GLOBAL_poolName == "ARP-PRD-Discov-Pool" and $ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ARP_PRD_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_val_list
		{
			foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_setCookie
			{
				set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
				set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]

				if {$ARP_PRD_SSL_request_replace == "nothing"}
				{
					set ARP_PRD_SSL_request_replace ""
				}
				regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $ARP_PRD_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Location]

		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_location
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ARP_PRD_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ARP_PRD_SSL_request_val [HTTP::header value Content-Location]

		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_contentLocation
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			regsub -all $ARP_PRD_SSL_request_find $ARP_PRD_SSL_request_val $ARP_PRD_SSL_request_replace ARP_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $ARP_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::ARP_PRD_SSL_response_body] > 0}
	{
		set ARP_PRD_SSL_expression ""
		foreach ARP_PRD_SSL_request_rewriteRecord $static::ARP_PRD_SSL_response_body
		{
			set ARP_PRD_SSL_request_find [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 1]
			set ARP_PRD_SSL_request_replace [getfield $ARP_PRD_SSL_request_rewriteRecord "====" 2]
			if {$ARP_PRD_SSL_request_replace == "nothing"}
			{
				set ARP_PRD_SSL_request_replace ""
			}

			set ARP_PRD_SSL_expression "$ARP_PRD_SSL_expression@$ARP_PRD_SSL_request_find@$ARP_PRD_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $ARP_PRD_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$ARP_PRD_SSL_GLOBAL_poolName == "ARP-PRD-Discov-Pool" and $ARP_PRD_SSL_GLOBAL_BREAK_ALL == 0} {

		#set ARP_PRD_SSL_theMatch [STREAM::match]

		#log local0. "match found: $ARP_PRD_SSL_theMatch"
		#log local0. "on URI: $ARP_PRD_SSL_GLOBAL_URI"

    }
}
}
ltm rule /Common/ARP_UAT_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set ARP_UAT_GLOBAL_BREAK_ALL 0
	set ARP_UAT_GLOBAL_poolName ""
	set ARP_UAT_GLOBAL_Rewrite_Class ""
	set ARP_UAT_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "arpuat.dubai.gov.ae" - "www.arpuat.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    set ARP_UAT_GLOBAL_BREAK_ALL 1
	        if { [HTTP::uri] equals "/"} { 
				HTTP::redirect "https://arpuat.dubai.gov.ae/OA_HTML/AppsLocalLogin.jsp"
			} elseif {[HTTP::uri] equals "/discoverer/plus"} {
				HTTP::redirect "https://arpuat.dubai.gov.ae/discoverer/plus"
			} elseif { [HTTP::uri] starts_with "/endeca" } {
				HTTP::redirect "https://arpuat.dubai.gov.ae[HTTP::uri]"
			} elseif { [HTTP::uri] starts_with "/OA_HTML/runforms.jsp" } {
				#HTTP::redirect "https://arpuat.dubai.gov.ae/OA_HTML/runforms.jsp"
				HTTP::redirect "https://arpuat.dubai.gov.ae[HTTP::uri]"
			} 
			else {
				drop
			}
        }


		"arpdev.dubai.gov.ae" - "www.arpdev.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			pool ARP-Dev-FE-Pool
        }

		"arpdevadf.dubai.gov.ae" - "www.arpdevadf.dubai.gov.ae"
	    {

		    #log local0. "Access allowed for Host: [HTTP::host]"
			pool ARP-DevADF-FE-Pool


        }


		"arpvis.dubai.gov.ae" - "www.arpvis.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			pool ARP-VIS-Pool
        }
		"grpvis.dubai.gov.ae" - "www.grpvis.dubai.gov.ae"
		{
		    pool GRP-VIS-Pool-8010
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
			drop
        }
    }

}
}
ltm rule /Common/ARP_UAT_SSL_Base {
    when RULE_INIT
{
	set static::ARP_UAT_SSL_Maintenance_Flag 0
}

when HTTP_REQUEST
{
	set ARP_UAT_SSL_GLOBAL_BREAK_ALL 0
	set ARP_UAT_SSL_GLOBAL_poolName ""
	set ARP_UAT_SSL_Rewrite_Class ""
	set ARP_UAT_SSL_GLOBAL_URI [HTTP::uri]

	switch [string tolower [HTTP::host]] { 
        "arpuat.dubai.gov.ae" - "arpuat.dubai.gov.ae:443"
	    {
			#set ARP_UAT_SSL_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"

			if { ($static::ARP_UAT_SSL_Maintenance_Flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "MP_Enabled_IP") } {

				set ARP_UAT_SSL_GLOBAL_BREAK_ALL 1

				if {[HTTP::uri] ends_with "favicon.ico"} {		
					HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
				}
				elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
					HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
				}
				else {
					HTTP::uri "/sites/maintenance/maintenance.aspx"
				}

				#HTTP::redirect "http://maintenance.dubai.ae"

				HTTP::header replace Host "www.dsg.gov.ae"
				HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
				HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

				set ARP_UAT_SSL_GLOBAL_poolName "grpMaintenance_pool"
				pool $ARP_UAT_SSL_GLOBAL_poolName
				persist cookie insert ARP_UAT_Maint 0

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				switch -glob  $ARP_UAT_SSL_GLOBAL_URI
				{
					"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
					{
						# These URIs are exempted from Rewrite iRule
						set ARP_UAT_SSL_GLOBAL_BREAK_ALL 1
	        	        set ARP_UAT_SSL_GLOBAL_poolName "ARP-UAT-FE-Pool"
						pool $ARP_UAT_SSL_GLOBAL_poolName	
						persist cookie insert ARP_UAT 0
					}

					"/discoverer/*" - "//discoverer/*" - "/discoverer/plus/"
					{
						#set ARP_UAT_SSL_GLOBAL_BREAK_ALL 1
						#set ARP_UAT_SSL_GLOBAL_poolName "ARP-PRD-Discov-Pool"
						set ARP_UAT_SSL_GLOBAL_poolName "ARP-UAT-Discov-Pool-8090"
						pool $ARP_UAT_SSL_GLOBAL_poolName
						persist cookie insert ARP_PRD_Dis 0
					}
					"/endeca*"
					{
						set ARP_UAT_SSL_GLOBAL_poolName "Endeca-ARP-UAT" 
						pool $ARP_UAT_SSL_GLOBAL_poolName
						persist cookie insert ARPUAT_Endeca 0
						set ARP_UAT_SSL_Rewrite_Class "endeca"
					}
					default
					{
						set ARP_UAT_SSL_GLOBAL_poolName "ARP-UAT-FE-Pool"
						pool $ARP_UAT_SSL_GLOBAL_poolName	
						persist cookie insert ARP_UAT 0
					}
				}
			}			
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set ARP_UAT_SSL_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }
}
}
ltm rule /Common/ARP_UAT_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ARP_UAT_SSL_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"https://arpuat.dubai.gov.ae====http://arpuat.dubai.gov.ae"
		#"^//discoverer/====/discoverer/"
	}
	set static::ARP_UAT_SSL_request_host
	{
		#"arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
	} 
	set static::ARP_UAT_SSL_request_referer
	{
	}
	set static::ARP_UAT_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ARP_UAT_SSL_response_setCookie
	{
	}
	set static::ARP_UAT_SSL_response_location
	{
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:443====https://arpuat.dubai.gov.ae"
		#"https://arpuat.dubai.gov.ae:443====https://arpuat.dubai.gov.ae"
		#"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
	}
	set static::ARP_UAT_SSL_response_contentLocation
	{
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:443====https://arpuat.dubai.gov.ae"
		#"https://arpuat.dubai.gov.ae:443====https://arpuat.dubai.gov.ae"
		#"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
	}
	set static::ARP_UAT_SSL_response_body
	{
		"http://arpuat.dubai.gov.ae====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:443====https://arpuat.dubai.gov.ae"
		#"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://dfadapp1.dubaigov.local:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:8090====https://arpuat.dubai.gov.ae"
		"http://arpuat.dubai.gov.ae:8077====https://arpuat.dubai.gov.ae"
		#"http://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
		"https://arpuat.dubai.gov.ae:80====https://arpuat.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_uri] > 0}
	{
	set ARP_UAT_SSL_request_val [HTTP::uri]
	foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_uri
	{
		set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
		set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
		if {$ARP_UAT_SSL_request_replace == "nothing"}
		{
			set ARP_UAT_SSL_request_replace ""
		}

		regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
	}
	if { [catch {HTTP::uri $ARP_UAT_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ARP_UAT_SSL_request_val [HTTP::host]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_host
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}
			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $ARP_UAT_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Referer]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_referer
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ARP_UAT_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Cookie]
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_request_cookie
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ARP_UAT_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_val_list
		{
			foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_setCookie
			{
				set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
				set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]

				if {$ARP_UAT_SSL_request_replace == "nothing"}
				{
					set ARP_UAT_SSL_request_replace ""
				}
				regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $ARP_UAT_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Location]

		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_location
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ARP_UAT_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ARP_UAT_SSL_request_val [HTTP::header value Content-Location]

		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_contentLocation
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			regsub -all $ARP_UAT_SSL_request_find $ARP_UAT_SSL_request_val $ARP_UAT_SSL_request_replace ARP_UAT_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $ARP_UAT_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::ARP_UAT_SSL_response_body] > 0}
	{
		set ARP_UAT_SSL_expression ""
		foreach ARP_UAT_SSL_request_rewriteRecord $static::ARP_UAT_SSL_response_body
		{
			set ARP_UAT_SSL_request_find [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 1]
			set ARP_UAT_SSL_request_replace [getfield $ARP_UAT_SSL_request_rewriteRecord "====" 2]
			if {$ARP_UAT_SSL_request_replace == "nothing"}
			{
				set ARP_UAT_SSL_request_replace ""
			}

			set ARP_UAT_SSL_expression "$ARP_UAT_SSL_expression@$ARP_UAT_SSL_request_find@$ARP_UAT_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $ARP_UAT_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$ARP_UAT_SSL_GLOBAL_BREAK_ALL == 0} {

		#set ARP_UAT_SSL_theMatch [STREAM::match]

		#log local0. "match found: $ARP_UAT_SSL_theMatch"
		#log local0. "on URI: $ARP_UAT_SSL_GLOBAL_URI"

    }
}
}
ltm rule /Common/ARP_VIS_Base {
    when HTTP_REQUEST {
  if { [HTTP::host] eq "arpdev.dubai.gov.ae" } {
    pool ARP-Dev-FE-Pool

  } elseif { [HTTP::host] eq "arpuat.dubai.gov.ae" } {
    HTTP::redirect "https://arpuat.dubai.gov.ae/OA_HTML/AppsLocalLogin.jsp"

  } elseif { [HTTP::host] eq "arpvis.dubai.gov.ae" } {
    pool ARP-VIS-Pool

	} elseif { [HTTP::host] eq "grpvis.dubai.gov.ae" } {
		#HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		pool GRP-VIS-Pool-8010

  } else {
    drop
  }

 }
}
ltm rule /Common/BI_PROD_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"bi.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    } else {
				drop
			}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/BI_PROD_Base {
    when RULE_INIT
{
	set static::BI_PROD_flag_maintenance 0
}

when HTTP_REQUEST
{
	set BI_PROD_GLOBAL_BREAK_ALL 0
	set BI_PROD_GLOBAL_poolName ""
	set BI_PROD_GLOBAL_URI ""
	set BI_PROD_goToMaintenance 0

	switch [string tolower [HTTP::host]] { 
        "bi.dubai.gov.ae"
	    {
			#set BI_PROD_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"

			if { ($static::BI_PROD_flag_maintenance == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

				set BI_PROD_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				set BI_PROD_GLOBAL_poolName "BI_PROD_Pool"
				pool $BI_PROD_GLOBAL_poolName	
				persist cookie insert BI_PROD 0
			}
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set BI_PROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/BI_PROD_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::BI_PROD_qlik_request_uri
	{
		"^/\$====/qlikview"
	}
	set static::BI_PROD_qlik_request_host
	{
	} 
	set static::BI_PROD_qlik_request_referer
	{
	}
	set static::BI_PROD_qlik_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::BI_PROD_qlik_response_setCookie
	{
	}
	set static::BI_PROD_qlik_response_location
	{
		"http://bi.dubai.gov.ae====https://bi.dubai.gov.ae"
	}
	set static::BI_PROD_qlik_response_contentLocation
	{
		"http://bi.dubai.gov.ae====https://bi.dubai.gov.ae"
	}
	set static::BI_PROD_qlik_response_body
	{
		"http://bi.dubai.gov.ae====https://bi.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$BI_PROD_GLOBAL_poolName == "BI_PROD_Pool" and $BI_PROD_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::BI_PROD_qlik_request_uri] > 0}
	{
	set BI_PROD_qlik_request_val [HTTP::uri]
	foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_request_uri
	{
		set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
		set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]
		if {$BI_PROD_qlik_request_replace == "nothing"}
		{
			set BI_PROD_qlik_request_replace ""
		}

		regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
	}
	if { [catch {HTTP::uri $BI_PROD_qlik_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::BI_PROD_qlik_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set BI_PROD_qlik_request_val [HTTP::host]
		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_request_host
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]

			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}
			regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
		}
		if { [catch {HTTP::header replace Host $BI_PROD_qlik_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::BI_PROD_qlik_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set BI_PROD_qlik_request_val [HTTP::header value Referer]
		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_request_referer
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]

			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}

			regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
		}

		if { [catch {HTTP::header replace Referer $BI_PROD_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::BI_PROD_qlik_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set BI_PROD_qlik_request_val [HTTP::header value Cookie]
		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_request_cookie
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]

			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}

			regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
		}
		if { [catch {HTTP::header replace Cookie $BI_PROD_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$BI_PROD_GLOBAL_poolName == "BI_PROD_Pool" and $BI_PROD_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::BI_PROD_qlik_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set BI_PROD_qlik_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach BI_PROD_qlik_request_val $BI_PROD_qlik_request_val_list
		{
			foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_response_setCookie
			{
				set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
				set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]

				if {$BI_PROD_qlik_request_replace == "nothing"}
				{
					set BI_PROD_qlik_request_replace ""
				}
				regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $BI_PROD_qlik_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::BI_PROD_qlik_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set BI_PROD_qlik_request_val [HTTP::header value Location]

		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_response_location
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]
			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}

			regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
		}
		if { [catch {HTTP::header replace Location $BI_PROD_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::BI_PROD_qlik_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set BI_PROD_qlik_request_val [HTTP::header value Content-Location]

		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_response_contentLocation
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]
			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}

			regsub -all $BI_PROD_qlik_request_find $BI_PROD_qlik_request_val $BI_PROD_qlik_request_replace BI_PROD_qlik_request_val
		}
		if { [catch {HTTP::header replace Content-Location $BI_PROD_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::BI_PROD_qlik_response_body] > 0}
	{
		set BI_PROD_qlik_expression ""
		foreach BI_PROD_qlik_request_rewriteRecord $static::BI_PROD_qlik_response_body
		{
			set BI_PROD_qlik_request_find [getfield $BI_PROD_qlik_request_rewriteRecord "====" 1]
			set BI_PROD_qlik_request_replace [getfield $BI_PROD_qlik_request_rewriteRecord "====" 2]
			if {$BI_PROD_qlik_request_replace == "nothing"}
			{
				set BI_PROD_qlik_request_replace ""
			}

			set BI_PROD_qlik_expression "$BI_PROD_qlik_expression@$BI_PROD_qlik_request_find@$BI_PROD_qlik_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $BI_PROD_qlik_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$BI_PROD_GLOBAL_poolName == "BI_PROD_Pool" and $BI_PROD_GLOBAL_BREAK_ALL == 0} {

		#set BI_PROD_qlik_theMatch [STREAM::match]

		#log local0. "match found: $BI_PROD_qlik_theMatch"
		#log local0. "on URI: $BI_PROD_GLOBAL_URI"

    }
}
}
ltm rule /Common/BI_STAG_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set BI_STAG_GLOBAL_BREAK_ALL 0
	set BI_STAG_GLOBAL_poolName ""
	set BI_STAG_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "bi.qa.dubai.gov.ae"
	    {
			set BI_STAG_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set BI_STAG_GLOBAL_poolName "BI_STAG_Pool"
			pool $BI_STAG_GLOBAL_poolName	
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set BI_STAG_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/BI_STAG_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::BI_STAG_qlik_request_uri
	{
		"^/\$====/qlikview"
	}
	set static::BI_STAG_qlik_request_host
	{
	} 
	set static::BI_STAG_qlik_request_referer
	{
	}
	set static::BI_STAG_qlik_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::BI_STAG_qlik_response_setCookie
	{
	}
	set static::BI_STAG_qlik_response_location
	{
		"http://bi.qa.dubai.gov.ae====https://bi.qa.dubai.gov.ae"
	}
	set static::BI_STAG_qlik_response_contentLocation
	{
		"http://bi.qa.dubai.gov.ae====https://bi.qa.dubai.gov.ae"
	}
	set static::BI_STAG_qlik_response_body
	{
		"http://bi.qa.dubai.gov.ae====https://bi.qa.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$BI_STAG_GLOBAL_poolName == "BI_STAG_Pool" and $BI_STAG_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::BI_STAG_qlik_request_uri] > 0}
	{
	set BI_STAG_qlik_request_val [HTTP::uri]
	foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_request_uri
	{
		set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
		set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]
		if {$BI_STAG_qlik_request_replace == "nothing"}
		{
			set BI_STAG_qlik_request_replace ""
		}

		regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
	}
	if { [catch {HTTP::uri $BI_STAG_qlik_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::BI_STAG_qlik_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set BI_STAG_qlik_request_val [HTTP::host]
		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_request_host
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]

			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}
			regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
		}
		if { [catch {HTTP::header replace Host $BI_STAG_qlik_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::BI_STAG_qlik_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set BI_STAG_qlik_request_val [HTTP::header value Referer]
		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_request_referer
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]

			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}

			regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
		}

		if { [catch {HTTP::header replace Referer $BI_STAG_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::BI_STAG_qlik_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set BI_STAG_qlik_request_val [HTTP::header value Cookie]
		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_request_cookie
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]

			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}

			regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
		}
		if { [catch {HTTP::header replace Cookie $BI_STAG_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$BI_STAG_GLOBAL_poolName == "BI_STAG_Pool" and $BI_STAG_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::BI_STAG_qlik_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set BI_STAG_qlik_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach BI_STAG_qlik_request_val $BI_STAG_qlik_request_val_list
		{
			foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_response_setCookie
			{
				set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
				set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]

				if {$BI_STAG_qlik_request_replace == "nothing"}
				{
					set BI_STAG_qlik_request_replace ""
				}
				regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $BI_STAG_qlik_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::BI_STAG_qlik_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set BI_STAG_qlik_request_val [HTTP::header value Location]

		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_response_location
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]
			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}

			regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
		}
		if { [catch {HTTP::header replace Location $BI_STAG_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::BI_STAG_qlik_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set BI_STAG_qlik_request_val [HTTP::header value Content-Location]

		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_response_contentLocation
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]
			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}

			regsub -all $BI_STAG_qlik_request_find $BI_STAG_qlik_request_val $BI_STAG_qlik_request_replace BI_STAG_qlik_request_val
		}
		if { [catch {HTTP::header replace Content-Location $BI_STAG_qlik_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::BI_STAG_qlik_response_body] > 0}
	{
		set BI_STAG_qlik_expression ""
		foreach BI_STAG_qlik_request_rewriteRecord $static::BI_STAG_qlik_response_body
		{
			set BI_STAG_qlik_request_find [getfield $BI_STAG_qlik_request_rewriteRecord "====" 1]
			set BI_STAG_qlik_request_replace [getfield $BI_STAG_qlik_request_rewriteRecord "====" 2]
			if {$BI_STAG_qlik_request_replace == "nothing"}
			{
				set BI_STAG_qlik_request_replace ""
			}

			set BI_STAG_qlik_expression "$BI_STAG_qlik_expression@$BI_STAG_qlik_request_find@$BI_STAG_qlik_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $BI_STAG_qlik_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$BI_STAG_GLOBAL_poolName == "BI_STAG_Pool" and $BI_STAG_GLOBAL_BREAK_ALL == 0} {

		#set BI_STAG_qlik_theMatch [STREAM::match]

		#log local0. "match found: $BI_STAG_qlik_theMatch"
		#log local0. "on URI: $BI_STAG_GLOBAL_URI"

    }
}
}
ltm rule /Common/Cloud_NET_PROD_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"smartsurvey.dubai.gov.ae" - "smartsurvey.dubai.gov.ae:80"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    #	HTTP::redirect "https://[HTTP::host]"
		    #} else {
			#	drop
			#}
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			#HTTP::redirect "https://smartsurvey.dubai.gov.ae/admin/login"
			#pool "Cloud_NET_PROD_Pool"	
			#persist cookie insert NET_SmartS 0
        }
		"fams.dubai.gov.ae"
		{
			pool "Cloud_NET_PROD_Pool"	
			persist cookie insert NET_FAMS 0
		}
		

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/Cloud_NET_PROD_SSL_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"smartsurvey.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			pool "Cloud_NET_PROD_Pool"

        }
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	HTTP::respond 200 content "Access denied"
        }
    }	
}
}
ltm rule /Common/Cloud_NET_PROD_SSL_Disable {
    when SERVER_CONNECTED
{
	if { $Cloud_NET_PROD_SSL_poolName != "board_NET_PROD_Pool" } {
		SSL::disable
		log local0. "SSL disabled for pool: $Cloud_NET_PROD_SSL_poolName"
	} 
}
}
ltm rule /Common/Coesys_PRD_SSL_Base {
    when HTTP_REQUEST
{
	set Coesys_PRD_SSL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"coesys.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://coesys.dubai.gov.ae/coesys/"
				set Coesys_PRD_SSL_BREAK_ALL 0
		    } else {
				pool "Coesys_PRD_8080"
			}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/Coesys_PRD_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Coesys_PRD_SSL_request_uri
	{
		#"^/\$====/coesys/"
		#"^/assests/====/coesys/assests/"
	}
	set static::Coesys_PRD_SSL_request_host
	{
		#"dsgservicedeskqa.dubai.gov.ae====sdhfwpweb1:8080"
		#"servicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::Coesys_PRD_SSL_request_referer
	{
	}
	set static::Coesys_PRD_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Coesys_PRD_SSL_response_setCookie
	{
	}
	set static::Coesys_PRD_SSL_response_location
	{
		"http://coesys.dubai.gov.ae====https://coesys.dubai.gov.ae"
	}
	set static::Coesys_PRD_SSL_response_contentLocation
	{
		"http://coesys.dubai.gov.ae====https://coesys.dubai.gov.ae"
	}
	set static::Coesys_PRD_SSL_response_body
	{
		"http://coesys.dubai.gov.ae====https://coesys.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$Coesys_PRD_SSL_BREAK_ALL == 0} {

            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::Coesys_PRD_SSL_request_uri] > 0}
	{
	set Coesys_PRD_SSL_request_val [HTTP::uri]
	foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_request_uri
	{
		set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
		set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]
		if {$Coesys_PRD_SSL_request_replace == "nothing"}
		{
			set Coesys_PRD_SSL_request_replace ""
		}

		regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
	}
	if { [catch {HTTP::uri $Coesys_PRD_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Coesys_PRD_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Coesys_PRD_SSL_request_val [HTTP::host]
		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_request_host
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}
			regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $Coesys_PRD_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Coesys_PRD_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Coesys_PRD_SSL_request_val [HTTP::header value Referer]
		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_request_referer
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}

			regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $Coesys_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Coesys_PRD_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Coesys_PRD_SSL_request_val [HTTP::header value Cookie]
		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_request_cookie
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}

			regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $Coesys_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Coesys_PRD_SSL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Coesys_PRD_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Coesys_PRD_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_val_list
		{
			foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_response_setCookie
			{
				set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
				set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]

				if {$Coesys_PRD_SSL_request_replace == "nothing"}
				{
					set Coesys_PRD_SSL_request_replace ""
				}
				regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Coesys_PRD_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Coesys_PRD_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Coesys_PRD_SSL_request_val [HTTP::header value Location]

		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_response_location
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}

			regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $Coesys_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Coesys_PRD_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Coesys_PRD_SSL_request_val [HTTP::header value Content-Location]

		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_response_contentLocation
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}

			regsub -all $Coesys_PRD_SSL_request_find $Coesys_PRD_SSL_request_val $Coesys_PRD_SSL_request_replace Coesys_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Coesys_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::Coesys_PRD_SSL_response_body] > 0}
	{
		set Coesys_PRD_SSL_expression ""
		foreach Coesys_PRD_SSL_request_rewriteRecord $static::Coesys_PRD_SSL_response_body
		{
			set Coesys_PRD_SSL_request_find [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 1]
			set Coesys_PRD_SSL_request_replace [getfield $Coesys_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Coesys_PRD_SSL_request_replace == "nothing"}
			{
				set Coesys_PRD_SSL_request_replace ""
			}

			set Coesys_PRD_SSL_expression "$Coesys_PRD_SSL_expression@$Coesys_PRD_SSL_request_find@$Coesys_PRD_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Coesys_PRD_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$Coesys_PRD_SSL_BREAK_ALL == 0} {

		#set Coesys_PRD_SSL_theMatch [STREAM::match]

		#log local0. "match found: $Coesys_PRD_SSL_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/Dashboard_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set Dashboard_GLOBAL_BREAK_ALL 0
	set Dashboard_GLOBAL_poolName ""
	set Dashboard_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "dashboard.dubai.gov.ae"
	    {
			set Dashboard_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set Dashboard_GLOBAL_poolName "Dashboard_Pool"
			pool $Dashboard_GLOBAL_poolName

        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set Dashboard_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/Dashboard_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Dashboard_dash_request_uri
	{
	}
	set static::Dashboard_dash_request_host
	{
	} 
	set static::Dashboard_dash_request_referer
	{
	}
	set static::Dashboard_dash_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Dashboard_dash_response_setCookie
	{
	}
	set static::Dashboard_dash_response_location
	{
		"http://dashboard.dubai.gov.ae====https://dashboard.dubai.gov.ae"
	}
	set static::Dashboard_dash_response_contentLocation
	{
		"http://dashboard.dubai.gov.ae====https://dashboard.dubai.gov.ae"
	}
	set static::Dashboard_dash_response_body
	{
		"http://dashboard.dubai.gov.ae====https://dashboard.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$Dashboard_GLOBAL_poolName == "Dashboard_Pool" and $Dashboard_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::Dashboard_dash_request_uri] > 0}
	{
	set Dashboard_dash_request_val [HTTP::uri]
	foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_request_uri
	{
		set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
		set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]
		if {$Dashboard_dash_request_replace == "nothing"}
		{
			set Dashboard_dash_request_replace ""
		}

		regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
	}
	if { [catch {HTTP::uri $Dashboard_dash_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Dashboard_dash_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Dashboard_dash_request_val [HTTP::host]
		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_request_host
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]

			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}
			regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
		}
		if { [catch {HTTP::header replace Host $Dashboard_dash_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Dashboard_dash_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Dashboard_dash_request_val [HTTP::header value Referer]
		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_request_referer
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]

			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}

			regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
		}

		if { [catch {HTTP::header replace Referer $Dashboard_dash_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Dashboard_dash_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Dashboard_dash_request_val [HTTP::header value Cookie]
		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_request_cookie
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]

			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}

			regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
		}
		if { [catch {HTTP::header replace Cookie $Dashboard_dash_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Dashboard_GLOBAL_poolName == "Dashboard_Pool" and $Dashboard_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Dashboard_dash_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Dashboard_dash_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Dashboard_dash_request_val $Dashboard_dash_request_val_list
		{
			foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_response_setCookie
			{
				set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
				set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]

				if {$Dashboard_dash_request_replace == "nothing"}
				{
					set Dashboard_dash_request_replace ""
				}
				regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Dashboard_dash_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Dashboard_dash_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Dashboard_dash_request_val [HTTP::header value Location]

		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_response_location
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]
			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}

			regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
		}
		if { [catch {HTTP::header replace Location $Dashboard_dash_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Dashboard_dash_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Dashboard_dash_request_val [HTTP::header value Content-Location]

		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_response_contentLocation
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]
			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}

			regsub -all $Dashboard_dash_request_find $Dashboard_dash_request_val $Dashboard_dash_request_replace Dashboard_dash_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Dashboard_dash_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::Dashboard_dash_response_body] > 0}
	{
		set Dashboard_dash_expression ""
		foreach Dashboard_dash_request_rewriteRecord $static::Dashboard_dash_response_body
		{
			set Dashboard_dash_request_find [getfield $Dashboard_dash_request_rewriteRecord "====" 1]
			set Dashboard_dash_request_replace [getfield $Dashboard_dash_request_rewriteRecord "====" 2]
			if {$Dashboard_dash_request_replace == "nothing"}
			{
				set Dashboard_dash_request_replace ""
			}

			set Dashboard_dash_expression "$Dashboard_dash_expression@$Dashboard_dash_request_find@$Dashboard_dash_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Dashboard_dash_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$Dashboard_GLOBAL_poolName == "Dashboard_Pool" and $Dashboard_GLOBAL_BREAK_ALL == 0} {

		#set Dashboard_dash_theMatch [STREAM::match]

		#log local0. "match found: $Dashboard_dash_theMatch"
		#log local0. "on URI: $Dashboard_GLOBAL_URI"

    }
}
}
ltm rule /Common/DockerPoc_QA_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"dockerpoc.qa.dubai.ae" - "www.dockerpoc.qa.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://dockerpoc.qa.dubai.ae/OneHubRTNoAuth/*"

        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/DockerPoc_QA_SSL_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"dockerpoc.qa.dubai.ae "
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    pool "Dockerpoc_QA_54546_Pool"
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Docker_UCP_DTR_Prod_SSL_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {

		"ucp.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    pool "Docker_UCP_Prod_Pool"
        }

		"dtr.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    pool "Docker_DTR_Prod_Pool"
        }

		"ucpqa.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    pool "Docker_UCP_QA_Pool"
        }


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Dubainow_PRD_Base {
    when RULE_INIT
	{
		set static::Dubaicareers_PROD_eJob_for_Dept "PRODeJobRedirect"
	}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"dubainowdeveloper.dubai.ae" -
		"www.dubainowdeveloper.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://dubainowdeveloper.dubai.ae"
		    } else {
				drop
			}
        }

		"dubaicareers.ae" - "admin.dubaicareers.ae" -  "www.dubaicareers.ae"
		{
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}

		"ejob.ae" - "www.ejob.ae" - "ejob.dubai.ae" - "www.ejob.dubai.ae"
		{
			HTTP::redirect "https://dubaicareers.ae/ar/pages/default.aspx"
		}

		"ejob.dubai.gov.ae" - "www.ejob.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set Dubaicareers_PROD_eJob_for_Dept_URI [string toupper [HTTP::uri]]
			if { ([HTTP::uri] equals "/") or ([HTTP::uri] starts_with "/DSC_AR") or [class match $Dubaicareers_PROD_eJob_for_Dept_URI starts_with $static::Dubaicareers_PROD_eJob_for_Dept] } {
		    	HTTP::redirect "https://dubaicareers.ae/ar/pages/default.aspx"
		    } else {
				drop
			}
        }


		"dubainow.dubai.ae" - "www.dubainow.dubai.ae" - "dubainowadmin.dubai.ae" - "dubainowdevadmin.dubai.ae"
		{
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}	


		"intranet.dsg.gov.ae" - "intranet.sdg.gov.ae" - "sdgintranet" - "intranet.deg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		   	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}

		"happinessportal.dubai.ae" - "happinessportaladmin.dubai.ae"
		{
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}

		"smartemployee.dubai.ae" - "smartemployeeadmin.dubai.ae" - "smartsupport.dubai.ae" - "smartsupportadmin.dubai.ae"
		{
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}



		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Dubainow_PRD_SSL_Base {
    when RULE_INIT
{
	set static::Dubainow_PRD_SSL_Maint_flag 0

}

when HTTP_REQUEST
{
	set Dubainow_PRD_SSL_poolName ""
	set DubainowAPP_URI [string tolower [HTTP::uri]]
	set Dubainow_PRD_SSL_hostName [string tolower [HTTP::host]]

	if { ($static::Dubainow_PRD_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "213.42.50.181"))) or ([IP::client_addr] equals "MP_Enabled_IP") or ([IP::client_addr] equals "213.42.50.172") or ([IP::client_addr] equals "213.42.55.99") } {
		switch [string tolower [HTTP::host]] {
			"dubainow.dubai.ae"
			{
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
			}
			default
			{
				# Hash the below line is ONLY dubainow.dubai.ae needs MP
				#HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
			}
		}
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else
	{
		switch [string tolower [HTTP::host]] {
			"dubainowdeveloper.dubai.ae" - "dubainowdevadmin.dubai.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				set Dubainow_PRD_SSL_poolName "Dubainow_PRD_80"
				pool $Dubainow_PRD_SSL_poolName
				persist cookie insert DubaiNow_Dev 0
			}

			"dubainow.dubai.ae"
			{
				if { $DubainowAPP_URI starts_with "/app1" } {					
						pool Dubainow_PRD_APP1
						persist cookie insert DubaiNow_app1 0
						HTTP::uri "/"

				}elseif { [HTTP::cookie exists "DubaiNow_app1"]} {
						pool Dubainow_PRD_APP1
						persist cookie insert DubaiNow_app1 0

				}elseif { $DubainowAPP_URI starts_with "/app2" } {
						pool Dubainow_PRD_APP2
						persist cookie insert DubaiNow_app2 0
						HTTP::uri "/"

				}elseif { [HTTP::cookie exists "DubaiNow_app2"]} {
						pool Dubainow_PRD_APP2
						persist cookie insert DubaiNow_app2 0
				}else {
						pool Dubainow_PRD_80
						persist cookie insert DubaiNow_Portal 0
						#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
				}
			}

			"dubainowadmin.dubai.ae" 
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				# allowed only for DSG servers
				if { [IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.50.180" } {
					pool "Dubainow_PRD_80"
					persist cookie insert DubaiNow_admin 0
				}
				else {
					drop
				}
			}

			"intranet.deg.gov.ae" - "intranet.dsg.gov.ae" - "sdgintranet" - "intranet.sdg.gov.ae"
			{
				# allowed only for DSG users & HHRC VPN users
				set Dubainow_PRD_SSL_poolName "Dubainow_PRD_80"
				pool $Dubainow_PRD_SSL_poolName
				persist cookie insert ShPnt_Intranet 0
			}

			"happinessportal.dubai.ae" - "happinessportaladmin.dubai.ae"
			{
				set Dubainow_PRD_SSL_poolName "Dubainow_PRD_80"
				pool $Dubainow_PRD_SSL_poolName
				persist cookie insert Happiness_Portal 0
			}

			"dubaicareers.ae" - "www.dubaicareers.ae" - "admin.dubaicareers.ae" 
			{
				set Dubainow_PRD_SSL_poolName "Dubainow_PRD_80"
				pool $Dubainow_PRD_SSL_poolName
				persist cookie insert dubaicareers 0
			}

			"smartemployee.dubai.ae" - "smartsupport.dubai.ae"
			{
				set Dubainow_PRD_SSL_poolName "Dubainow_PRD_80"
				pool $Dubainow_PRD_SSL_poolName
				persist cookie insert SmartEmp 0
			}

			"smartemployeeadmin.dubai.ae" - "smartsupportadmin.dubai.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				# allowed only for DSG servers
				if { [IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.50.180" } {
					pool "Dubainow_PRD_80"
					persist cookie insert SmartEmp_admin 0
				}
				else {
					drop
				}
			}

			"ejob.ae" - "www.ejob.ae" 
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				HTTP::redirect "https://dubaicareers.ae/ar/pages/default.aspx"
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				drop
			}
		}
	}
}

when HTTP_RESPONSE
{
	# Remove all instances of the Server header 
    HTTP::header remove Server 
	 # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    }
	#***
    set Dubainow_PRD_SSL_myCookies [HTTP::cookie names]

    foreach Dubainow_PRD_SSL_myCookieVal $Dubainow_PRD_SSL_myCookies {
      HTTP::cookie secure $Dubainow_PRD_SSL_myCookieVal enable
    }
}
}
ltm rule /Common/Dubainow_PRD_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Dubainow_PRD_SSL_request_uri
	{
	}
	set static::Dubainow_PRD_SSL_request_host
	{
	} 
	set static::Dubainow_PRD_SSL_request_referer
	{
	}
	set static::Dubainow_PRD_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Dubainow_PRD_SSL_response_setCookie
	{
	}
	set static::Dubainow_PRD_SSL_response_location
	{
		"http://smartemployee.dubai.ae====https://smartemployee.dubai.ae"
	}
	set static::Dubainow_PRD_SSL_response_contentLocation
	{
		"http://smartemployee.dubai.ae====https://smartemployee.dubai.ae"
	}
	set static::Dubainow_PRD_SSL_response_body
	{
		"http://smartemployee.dubai.ae====https://smartemployee.dubai.ae"
	}
}

when HTTP_REQUEST
{
	if {$Dubainow_PRD_SSL_hostName equals "smartemployee.dubai.ae"} {

            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }
	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::Dubainow_PRD_SSL_request_uri] > 0}
	{
	set Dubainow_PRD_SSL_request_val [HTTP::uri]
	foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_request_uri
	{
		set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
		set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]
		if {$Dubainow_PRD_SSL_request_replace == "nothing"}
		{
			set Dubainow_PRD_SSL_request_replace ""
		}

		regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
	}
	if { [catch {HTTP::uri $Dubainow_PRD_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Dubainow_PRD_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Dubainow_PRD_SSL_request_val [HTTP::host]
		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_request_host
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}
			regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $Dubainow_PRD_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Dubainow_PRD_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Dubainow_PRD_SSL_request_val [HTTP::header value Referer]
		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_request_referer
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}

			regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $Dubainow_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Dubainow_PRD_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Dubainow_PRD_SSL_request_val [HTTP::header value Cookie]
		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_request_cookie
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]

			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}

			regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $Dubainow_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Dubainow_PRD_SSL_hostName equals "smartemployee.dubai.ae"} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Dubainow_PRD_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Dubainow_PRD_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_val_list
		{
			foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_response_setCookie
			{
				set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
				set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]

				if {$Dubainow_PRD_SSL_request_replace == "nothing"}
				{
					set Dubainow_PRD_SSL_request_replace ""
				}
				regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Dubainow_PRD_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Dubainow_PRD_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Dubainow_PRD_SSL_request_val [HTTP::header value Location]

		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_response_location
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}

			regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $Dubainow_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Dubainow_PRD_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Dubainow_PRD_SSL_request_val [HTTP::header value Content-Location]

		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_response_contentLocation
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}

			regsub -all $Dubainow_PRD_SSL_request_find $Dubainow_PRD_SSL_request_val $Dubainow_PRD_SSL_request_replace Dubainow_PRD_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Dubainow_PRD_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::Dubainow_PRD_SSL_response_body] > 0}
	{
		set Dubainow_PRD_SSL_expression ""
		foreach Dubainow_PRD_SSL_request_rewriteRecord $static::Dubainow_PRD_SSL_response_body
		{
			set Dubainow_PRD_SSL_request_find [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 1]
			set Dubainow_PRD_SSL_request_replace [getfield $Dubainow_PRD_SSL_request_rewriteRecord "====" 2]
			if {$Dubainow_PRD_SSL_request_replace == "nothing"}
			{
				set Dubainow_PRD_SSL_request_replace ""
			}

			set Dubainow_PRD_SSL_expression "$Dubainow_PRD_SSL_expression@$Dubainow_PRD_SSL_request_find@$Dubainow_PRD_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Dubainow_PRD_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
    }
    }
}

when STREAM_MATCHED
{
	#if {$Dubainow_PRD_SSL_hostName == "smartemployee.dubai.ae"} {

		#set Dubainow_PRD_SSL_theMatch [STREAM::match]

		#log local0. "match found: $Dubainow_PRD_SSL_theMatch"
		#log local0. "on URI: $Dubainow_PRD_SSL_URI"

   # }
}
}
ltm rule /Common/Dubainow_QA_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {

			

		"rashidui.dubai.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool "Dubainow_QA_50060"
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    #	drop
        }
    }	
}
}
ltm rule /Common/Dubainow_QA_HRM_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST {
	switch [string tolower [HTTP::host]] {

	"dubainowsvcqa.dubai.ae"
		{	
			set dockar_uri [HTTP::uri]
			set docker_append [getfield [HTTP::host] "." 1]
			set HTTP::uri "$dockar_uri.$docker_append"

			#HTTP::redirect "$dockar_uri/$docker_append[HTTP::host]"
			pool Dubainow_QA_50006
		}

		"dtr.dubai.ae"
		{	
			pool Docker_DTC_Prod_Pool
		}


	}
}
}
ltm rule /Common/Dubainow_QA_SSL_Base {
    when HTTP_REQUEST
{
	set Dubainow_QA_SSL_URI [HTTP::uri]
	set Dubainow_QA_SSL_NewURI ""

	if { [string tolower [HTTP::host]] equals "dubainowsvcqa.dubai.ae"  or [HTTP::host] equals "livingindubaiqa.dubai.ae" or [HTTP::host] equals "livingindubaitest.dubai.ae" or [HTTP::host] equals "rashidqa.dubai.ae"  or [HTTP::host] equals "rashidui.dubai.ae"} {

		#log local0. "Access allowed for Host: [HTTP::host]"
		switch -glob $Dubainow_QA_SSL_URI
		{
			"/DewaBill/*"
			{ 
				#regsub "/services/" $Dubainow_QA_SSL_URI "/" Dubainow_QA_SSL_NewURI **TAS000000045010**
				#HTTP::uri $Dubainow_QA_SSL_NewURI
				pool "Dubainow_QA_50001"
			}
			"/DuPostpaid/*"
			{ 
				pool "Dubainow_QA_50002"
			}
			"/DuPrepaid/*"
			{ 
				pool "Dubainow_QA_50003"
			}
			"/EtisalatPostpaid/*"
			{ 
				pool "Dubainow_QA_50004"
			}
			"/EtisalatPrepaid/*"
			{ 
				pool "Dubainow_QA_50005"
			}
			"/FlightInfo/*"
			{ 
				pool "Dubainow_QA_50006"
			}
			"/NOL/*"
			{ 
				pool "Dubainow_QA_50007"
			}
			"/PayAll/*"
			{ 
				pool "Dubainow_QA_50008"
			}
			"/Salik/*"
			{ 
				pool "Dubainow_QA_50009"
			}
			"/VisaResidency/*"
			{ 
				pool "Dubainow_QA_50010"
			}
			"/DoctorsAndClinics/*"
			{ 
				pool "Dubainow_QA_50011"
			}
			"/DewaConsumption/*"
			{ 
				pool "Dubainow_QA_50012"
			}
			"/DubaiCalendar/*"
			{ 
				pool "Dubainow_QA_50013"
			}
			"/DubaiCustoms/*"
			{ 
				pool "Dubainow_QA_50014"
			}
			"/JourneyPlanner/*"
			{ 
				pool "Dubainow_QA_50015"
			}
			"/PrayerTimes/*"
			{ 
				pool "Dubainow_QA_50016"
			}
			"/RentIncreaseCalculator/*"
			{ 
				pool "Dubainow_QA_50017"
			}
			"/Universities/*"
			{ 
				pool "Dubainow_QA_50018"
			}
			"/TrafficFines/*"
			{ 
				pool "Dubainow_QA_50019"
			}
			"/Schools/*"
			{ 
				pool "Dubainow_QA_50020"
			}
			"/ATMS/*"
			{ 
				pool "Dubainow_QA_50021"
			}
			"/AccidentNotification/*"
			{ 
				pool "Dubainow_QA_50022"
			}
			"/AlJalila/*"
			{ 
				pool "Dubainow_QA_50023"
			}
			"/DMVoucher/*"
			{ 
				pool "Dubainow_QA_50024"
			}
			"/DubaiCares/*"
			{ 
				pool "Dubainow_QA_50025"
			}
			"/FuelLocator/*"
			{ 
				pool "Dubainow_QA_50026"
			}
			"/PoliceStations/*"
			{ 
				pool "Dubainow_QA_50027"
			}
			"/TasjeelCenters/*"
			{ 
				pool "Dubainow_QA_50028"
			}

			"/VaccinationPlan/*"
			{ 
				pool "Dubainow_QA_50029"
			}

			"/TradeActivitySearch/*"
			{ 
				pool "Dubainow_QA_50030"
			}
			"/WeArePolice/*"
			{ 
				pool "Dubainow_QA_50031"
			}
			"/ReserveTradeName/*"
			{ 
				pool "Dubainow_QA_50032"
			}
			"/PropertyTransactions/*"
			{ 
				pool "Dubainow_QA_50033"
			}
			"/Pharmacy/*"
			{ 
				pool "Dubainow_QA_50034"
			}
			"/MyCar/*"
			{ 
				pool "Dubainow_QA_50035"
			}
			"/Makani/*"
			{ 
				pool "Dubainow_QA_50036"
			}
			"/MaintenanceRequest/*"
			{ 
				pool "Dubainow_QA_50037"
			}
			"/Ejari/*"
			{ 
				pool "Dubainow_QA_50038"
			}
			"/Empost/*"
			{ 
				pool "Dubainow_QA_50039"
			}
			"/Dashboard/*"
			{ 
				pool "Dubainow_QA_50040"
			}
			"/ApplicationStatus/*"
			{ 
				pool "Dubainow_QA_50041"
			}
			"/CarRenewal/*"
			{ 
				pool "Dubainow_QA_50042"
			}
			"/CourtCaseInquiry/*"
			{ 
				pool "Dubainow_QA_50043"
			}
			"/Weather/*"
			{ 
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_50044"
			}
			"/TrialLoanCalculator/*"
			{ 
				pool "Dubainow_QA_50045"
			}
			"/TradeLicensesList/*"
			{ 
				pool "Dubainow_QA_50046"
			}
			"/RenewTradeLicense/*"
			{ 
				pool "Dubainow_QA_50047"
			}

			"/DubaiNowSample/*"
			{ 
				pool "Dubainow_QA_50048"
			}
			"/DarAlBer/*"
			{
				pool "Dubainow_QA_50049"
			}
			"/NoorDubai/*"
			{
				pool "Dubainow_QA_50050"
			}

			"/DSGLivingDubaiWatson/*"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_50060"
			}

			"/DSGLivingDubaiTest/*"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_Test_50060"
			}

			"/socialapi/*"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_SocialApi_50061"
			}

			"/DMNotification/*"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_DMNotification_50301"
			}

			"/DMServices/*"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Dubainow_QA_DMServices_50302"
			}


			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#drop
				pool "Dubainow_QA_50060"
			}
		}
	} else {
		drop
	}
}
}
ltm rule /Common/EDCP_PROD_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"edcp.dubai.gov.ae" - "edcp.dubai.gov.ae:80"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] starts_with "/?AutoOpenDocId=" or [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::uri] equals "/APP1" or [HTTP::uri] equals "/APP2" } {
		    	HTTP::redirect "https://edcp.dubai.gov.ae[HTTP::uri]"
		    } else {
				drop
			}
        }

		"medcp.dubai.gov.ae" - "edcpviewer.dubai.gov.ae" - "edcpsvc.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"ws.edcp.dubai.gov.ae"
		{
			pool "EDCP_PROD_80_Pool"
			persist cookie insert WS_EDCP_PROD 0
		}

		"outlooksvc.edcp.dubai.gov.ae"
		{
			pool "EDCP_PROD_80_Pool"
			persist cookie insert Outlooksvc_EDCP_PROD 0
		}

		"tawtheeq.legal.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    #	HTTP::redirect "https://[HTTP::host]"
			#}
			pool "EDCP_PROD_80_Pool"
			persist cookie insert Tawtheeq_PROD 0
        }

		"tawtheeq.slc.dubai.gov.ae"
	    {
			# NOT ACTIVE
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"edcpssows.dubai.gov.ae" - "edcpssows.dubai.gov.ae:80"
		{
			if { [IP::client_addr] equals "213.42.56.171" or [IP::client_addr] equals "213.42.56.170" or [IP::client_addr] equals "213.42.48.9" } {
				pool "EDCP_PROD_Cloud_80"
				persist cookie insert EDCP_SSO_WS 0
			} else {
				drop
			}
		}


		"edcpbi.dubai.gov.ae" - "edcpbi.dubai.gov.ae:80" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			} else {
				drop
			}	
        }


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/EDCP_PROD_Base {
    when RULE_INIT
{
	set static::EDCP_PROD_SSO_Enable "ACL_EDCP_PROD_SSO_Enable"
	set static::EDCP_PROD_Maint_BypassIPs "EDCP_PROD_Maint_BypassIPs"
	set static::EDCP_PROD_GLOBAL_SrcIPs "EDCP_PROD_Allowed_IPs"
	set static::EDCP_PROD_Sorry "<html><head></head><body><p>Sorry, Access Denied...!!!</p></body></html>"
}


when HTTP_REQUEST
{
	set EDCP_PROD_Use_Cloud 1
	set EDCP_PROD_GLOBAL_SSODisable 0
	set EDCP_PROD_GLOBAL_BREAK_ALL 0
	set EDCP_PROD_GLOBAL_poolName ""
	set EDCP_PROD_GLOBAL_URI ""

	#if { [IP::client_addr] equals "213.42.48.180" } {
	#	set EDCP_PROD_Use_Cloud 1
	#} else {
	#	set EDCP_PROD_Use_Cloud 0
	#}

	switch [string tolower [HTTP::host]] { 
        "edcp.dubai.gov.ae" - "edcp.dubai.gov.ae:443"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::uri] equals "/APP1" or [HTTP::uri] equals "/APP2" or [HTTP::cookie exists "EDCP_PROD"] or [HTTP::cookie exists "EDCP_PROD1"] or [HTTP::cookie exists "EDCP_PROD2"] or [HTTP::uri] starts_with "/reports_edcpsqlp" or [HTTP::uri] starts_with "/reportserver_edcpsqlp" or [HTTP::cookie exists "EDCP_REPO"]} {
				set EDCP_PROD_GLOBAL_SSODisable 1
			}
        }

		"medcp.dubai.gov.ae" - "edcpviewer.dubai.gov.ae" - "edcpsvc.dubai.gov.ae"
		{
		}

		"edcpstorage.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
		}

		"tawtheeq.legal.dubai.gov.ae"
		{
		}

		"sso.edcp.dubai.gov.ae"
		{
			# NOT ACTIVE
		}

		"tawtheeq.slc.dubai.gov.ae"
		{
			# NOT ACTIVE
		}

		"edcpbi.dubai.gov.ae" - "edcpbi.dubai.gov.ae:443"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "EDCP_REPO"]} {
					set EDCP_PROD_GLOBAL_SSODisable 1
				}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set EDCP_PROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	if { $EDCP_PROD_GLOBAL_SSODisable == 0 } {
		if {not [class match [IP::client_addr] equals $static::EDCP_PROD_SSO_Enable]} {
			set EDCP_PROD_GLOBAL_SSODisable 1
		}
	}

	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::uri] equals "/APP1" or [HTTP::uri] equals "/APP2" or [HTTP::cookie exists "EDCP_PROD"] or [HTTP::cookie exists "EDCP_PROD1"] or [HTTP::cookie exists "EDCP_PROD2"]) } { 
		if { $EDCP_PROD_GLOBAL_SSODisable == 1 } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "SSO_PROD_EDCP"]} {
				set EDCP_PROD_GLOBAL_SSODisable 0
				#log local0. "SSO_PROD_wMail_GLOBAL_SSODisable: $SSO_PROD_wMail_GLOBAL_SSODisable"
			}
		}
	}

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/EDCP_PROD_Maintenance {
    when RULE_INIT
{
	set static::EDCP_PROD_flag_maintenance 0
}

when HTTP_REQUEST {

	set EDCP_PROD_goToMaintenance 0

    switch [string tolower [HTTP::host]] { 
		"edcp.dubai.gov.ae" - "edcpstorage.dubai.gov.ae" - "medcp.dubai.gov.ae" - "edcpbi.dubai.gov.ae" - "edcpbi.dubai.gov.ae:443"
		{
			if {not ([class match [IP::client_addr] equals $static::EDCP_PROD_Maint_BypassIPs]) and $static::EDCP_PROD_flag_maintenance == 1} {
				set EDCP_PROD_goToMaintenance 1
				#log local0. "EDCP_PROD_goToMaintenance = $EDCP_PROD_goToMaintenance"
			}

			if {$EDCP_PROD_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" } {

				set EDCP_PROD_GLOBAL_BREAK_ALL 1

				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"			
			} 
		}
	}
}
}
ltm rule /Common/EDCP_PROD_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $EDCP_PROD_GLOBAL_poolName == "grpMaintenance_pool" } {
	    SSL::disable
	} 
}
}
ltm rule /Common/EDCP_PROD_Pool_Select {
    when RULE_INIT
{
	#set static::EDCP_PROD_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST
{

	if { $EDCP_PROD_GLOBAL_BREAK_ALL == 0 } {

		switch [string tolower [HTTP::host]] { 

			"edcpstorage.dubai.gov.ae"
			{
				if { not [class match [IP::client_addr] equals $static::EDCP_PROD_GLOBAL_SrcIPs] }
					{
						HTTP::respond 200 content $static::EDCP_PROD_Sorry
					}
				elseif { $EDCP_PROD_Use_Cloud } {
					set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_Cloud_SSL"
				} else {
					set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_SSL_Pool"
				}
				pool $EDCP_PROD_GLOBAL_poolName
				persist cookie insert EDCP_PROD_storage 0
			}

			"medcp.dubai.gov.ae" 
			{
				if { $EDCP_PROD_Use_Cloud } {
					set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_Cloud_SSL"
				} else {
					set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_SSL_Pool"
				}
				pool $EDCP_PROD_GLOBAL_poolName
				persist cookie insert MEDCP_PROD 0
			}

			"tawtheeq.legal.dubai.gov.ae"
			{
				set EDCP_PROD_GLOBAL_poolName "EDCP1_PROD_SSL_Pool"
				pool $EDCP_PROD_GLOBAL_poolName
				persist cookie insert Tawtheeq_PROD 0
			}

			"edcpviewer.dubai.gov.ae"
			{
				set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_Cloud_SSL"
				pool $EDCP_PROD_GLOBAL_poolName
				persist cookie insert EDCPviewer_new_PROD 0
			}

			"edcpsvc.dubai.gov.ae"
			{
				set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_Cloud_SSL"
				pool $EDCP_PROD_GLOBAL_poolName
				persist cookie insert EDCPsvc_new_PROD 0
			}


			default
			{
				# No default Pool
			}
		} 

		if { $EDCP_PROD_GLOBAL_SSODisable == 1 } {

			switch [string tolower [HTTP::host]] { 

				"edcp.dubai.gov.ae"
				{
					if { not [class match [IP::client_addr] equals $static::EDCP_PROD_GLOBAL_SrcIPs] }
					{
						HTTP::respond 200 content $static::EDCP_PROD_Sorry
					}
					else {
						if { [HTTP::uri] equals "/APP1" } {
							if { $EDCP_PROD_Use_Cloud } {
								set EDCP_PROD_GLOBAL_poolName "EDCP1_PROD_Cloud_SSL"
							} else {
								set EDCP_PROD_GLOBAL_poolName "EDCP1_PROD_SSL_Pool"
							}
							persist cookie insert "EDCP_PROD1" 0
							HTTP::uri "/"
						}
						elseif { [HTTP::cookie exists "EDCP_PROD1"] } {
							if { $EDCP_PROD_Use_Cloud } {
								set EDCP_PROD_GLOBAL_poolName "EDCP1_PROD_Cloud_SSL"
							} else {
								set EDCP_PROD_GLOBAL_poolName "EDCP1_PROD_SSL_Pool"
							}
							persist cookie insert "EDCP_PROD1" 0
						}
						elseif { [HTTP::uri] equals "/APP2" } {
							if { $EDCP_PROD_Use_Cloud } {
								set EDCP_PROD_GLOBAL_poolName "EDCP2_PROD_Cloud_SSL"
							} else {
								set EDCP_PROD_GLOBAL_poolName "EDCP2_PROD_SSL_Pool"
							}
							persist cookie insert "EDCP_PROD2" 0
							HTTP::uri "/"
						}
						elseif { [HTTP::cookie exists "EDCP_PROD2"]} {
							if { $EDCP_PROD_Use_Cloud } {
								set EDCP_PROD_GLOBAL_poolName "EDCP2_PROD_Cloud_SSL"
							} else {
								set EDCP_PROD_GLOBAL_poolName "EDCP2_PROD_SSL_Pool"
							}
							persist cookie insert "EDCP_PROD2" 0
						}						
						elseif { [HTTP::uri] starts_with "/reports_edcpsqlp" or [HTTP::uri] starts_with "/reportserver_edcpsqlp" or [HTTP::cookie exists "EDCP_REPO"]} {
							set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_REPO_SSL"
							persist cookie insert "EDCP_REPO" 0
						}
						else {
							if { $EDCP_PROD_Use_Cloud } {
								set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_Cloud_SSL"
							} else {
								set EDCP_PROD_GLOBAL_poolName "EDCP_PROD_SSL_Pool"
							}
							persist cookie insert "EDCP_PROD" 0
						}

						pool $EDCP_PROD_GLOBAL_poolName

						if { [HTTP::uri] equals "/SSO_BYPASS" } {
							HTTP::uri "/"
						}
					}
				}


				"edcpbi.dubai.gov.ae" - "edcpbi.dubai.gov.ae:443"
					{
						if { not [class match [IP::client_addr] equals $static::EDCP_PROD_GLOBAL_SrcIPs] }
							{
								HTTP::respond 200 content $static::EDCP_PROD_Sorry
							}
						else {
								set EDCP_QA_GLOBAL_poolName "EDCP_PROD_REPO_SSL"
								pool $EDCP_QA_GLOBAL_poolName
								persist cookie insert "EDCP_REPO" 0
							}	
						if {[HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_BYPASS" } {
							HTTP::uri "/Reports_EDCPSQLP"
							}
					}

				default
				{
				# No default Pool
				}
			}
		} 
	}
}

when HTTP_RESPONSE
{
	 # Remove all instances of the Server header 
	 HTTP::header remove Server 
	# Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
   set EDCP_PROD_myCookies [HTTP::cookie names]
    foreach EDCP_PROD_myCookieVal $EDCP_PROD_myCookies {
      HTTP::cookie secure $EDCP_PROD_myCookieVal enable
    }
}
}
ltm rule /Common/EDCP_PROD_Pool_Select_sso {
    when RULE_INIT
{
	#set static::EDCP_PROD_SAM8_Enable 1
	#set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::EDCP_PROD_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team.</p></body></html>"
}

when HTTP_REQUEST {

	if { $EDCP_PROD_GLOBAL_BREAK_ALL == 0 and $EDCP_PROD_GLOBAL_SSODisable == 0 } {

		#set EDCP_PROD_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

			"edcp.dubai.gov.ae"
			{
				if { not [class match [IP::client_addr] equals $static::EDCP_PROD_GLOBAL_SrcIPs] } {
					HTTP::respond 200 content $static::EDCP_PROD_Sorry
				}
				else {
					set EDCP_PROD_GLOBAL_poolName "SSO_PROD_edcp"				
					pool $EDCP_PROD_GLOBAL_poolName
					persist cookie insert SSO_PROD_EDCP 0

					if { [HTTP::uri] equals "/SSO_ENABLE" } {
						HTTP::uri "/"
					}
				}
			}

			"edcpbi.dubai.gov.ae" - "edcpbi.dubai.gov.ae:443"
			{
				if { not [class match [IP::client_addr] equals $static::EDCP_PROD_GLOBAL_SrcIPs] } {
					HTTP::respond 200 content $static::EDCP_PROD_Sorry
				}
				else {
					set EDCP_PROD_GLOBAL_poolName "SSO_PROD_edcp"				
					pool $EDCP_PROD_GLOBAL_poolName
					persist cookie insert SSO_PROD_EDCP_BI 0
					}
				if {[HTTP::uri] equals "/"  or [HTTP::uri] equals "/SSO_ENABLE"  } {
					HTTP::uri "/Reports_EDCPSQLP"
					}
			}

			default
			{
				# No default Pool
			}
		} 
	}
}

when HTTP_RESPONSE
{
    set EDCP_PROD_myCookies [HTTP::cookie names]
    foreach EDCP_PROD_myCookieVal $EDCP_PROD_myCookies {
       HTTP::cookie secure $EDCP_PROD_myCookieVal enable
    }
}
}
ltm rule /Common/EDCP_QA_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] {

        "edcpqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#log local0.info " TestF5123" 
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"

		    } else {
				drop
			}
        }
		"medcpqa.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"intranetqa.dubai.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"edcpviewerqa.dubai.gov.ae" - "edcpsvcqa.dubai.gov.ae" 
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"devportalqa.dubai.gov.ae" 
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"admin.devportalqa.dubai.gov.ae" 
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"outlooksvc.edcpqa.dubai.gov.ae"
		{
			pool "EDCP_QA_80_Pool"
			persist cookie insert Outlooksvc_EDCP_QA 0
		}

		"ws.edcpqa.dubai.gov.ae"
		{
			pool "EDCP_QA_80_Pool"
			persist cookie insert WS_EDCP_QA 0
		}

		"edcpbiqa.dubai.gov.ae"
		{
			#pool "EDCP_BI_QA_Cloud_Pool"
			#persist cookie insert EDCP_BI_QA 0
			    #log local0. "Access allowed for Host: [HTTP::host]"
			HTTP::redirect "https://edcpbiqa.dubai.gov.ae/Reports_EDCPQADB"

		}

		"edcpviewerdev.dubai.gov.ae" - "edcpservicesdev.dubai.gov.ae" - "edcpstoragedev.dubai.gov.ae" - 
		"edcpbidev.dubai.gov.ae" - "edcpdev.dubai.gov.ae"
		{
			#pool "EDCP_BI_QA_Cloud_Pool"
			#persist cookie insert EDCP_BI_QA 0
			    #log local0. "Access allowed for Host: [HTTP::host]"
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}
		"crmqa.dubai.gov.ae" - "crmportalqa.dubai.gov.ae" -
		"discqa.dubai.gov.ae" - "stagingdsg.dubai.gov.ae" - "authqa.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}
		"kiteworks.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			#pool "EDCPQA_kiteworks_Poc_Pool"
			#persist cookie insert kiteworks 0
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}

		"sso.edcpqa.dubai.gov.ae"
		{
			#pool "EDCP_QA_80_Pool"
			#persist cookie insert SSO_EDCP_QA 0
		}

		"edcpssowsqa.dubai.gov.ae" - "edcpssowsqa.dubai.gov.ae:80"
		{
			if { [IP::client_addr] equals "213.42.56.171" or [IP::client_addr] equals "213.42.56.170" or [IP::client_addr] equals "213.42.50.181" or ([IP::client_addr] equals "213.42.50.172") or ([IP::client_addr] equals "213.42.55.99")} {
				pool "EDCP_QA_Cloud_Pool"
				persist cookie insert EDCP_SSO_WS_QA 0
			} else {
				drop
			}
		}

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

}
}
ltm rule /Common/EDCP_QA_Base {
    when RULE_INIT
{
	set static::EDCP_QA_GLOBAL_SrcIPs "GIN_Range"
	set static::EDCP_QA_Sorry "<html><head></head><body><p>Sorry, Access Denied...!!!</p></body></html>"
}

when HTTP_REQUEST
{
	set EDCP_QA_GLOBAL_BREAK_ALL 0
	set EDCP_QA_GLOBAL_poolName ""
	set EDCP_QA_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "edcpqa.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			#set EDCP_QA_GLOBAL_URI [HTTP::uri]

			if { not [class match [IP::client_addr] equals $static::EDCP_QA_GLOBAL_SrcIPs] }
			{
				HTTP::respond 200 content $static::EDCP_QA_Sorry
			}
			else {
				if { [HTTP::uri] equals "/APP1" or [HTTP::uri] equals "/"} {
					#set EDCP_QA_GLOBAL_poolName "EDCP1_QA_SSL_Pool"
					set EDCP_QA_GLOBAL_poolName "EDCP1_QA_Cloud_SSL"
					persist cookie insert "EDCP_QA_APP1" 0
					HTTP::uri "/"

				} elseif { [HTTP::cookie exists "EDCP_QA_APP1"]} {
					#set EDCP_QA_GLOBAL_poolName "EDCP1_QA_SSL_Pool"
					set EDCP_QA_GLOBAL_poolName "EDCP1_QA_Cloud_SSL"
					persist cookie insert "EDCP_QA_APP1" 0

				} elseif { [HTTP::uri] equals "/APP2" } {
					#set EDCP_QA_GLOBAL_poolName "EDCP2_QA_SSL_Pool"
					set EDCP_QA_GLOBAL_poolName "EDCP2_QA_Cloud_SSL"
					persist cookie insert "EDCP_QA_APP2" 0
					HTTP::uri "/"
				} elseif { [HTTP::cookie exists "EDCP_QA_APP2"]} {
					#set EDCP_QA_GLOBAL_poolName "EDCP2_QA_SSL_Pool"
					set EDCP_QA_GLOBAL_poolName "EDCP2_QA_Cloud_SSL"
					persist cookie insert "EDCP_QA_APP2" 0
				} else {
					#set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
					#HTTP::respond 302 noserver Location "https://[HTTP::host][HTTP::uri]" 
					set EDCP_QA_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
					persist cookie insert "EDCP_QA" 0

				}

				pool $EDCP_QA_GLOBAL_poolName
				#HTTP::header remove Server
			}
        }


		"medcpqa.dubai.gov.ae"
		{
			#set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
			#set EDCP_QA_GLOBAL_poolName "SSO_DEMO_edcp"
			set EDCP_QA_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert MEDCP_QA 0
		}

		 "edcpsvcqa.dubai.gov.ae" - "devportalqa.dubai.gov.ae" 
		{
			#set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
			#set EDCP_QA_GLOBAL_poolName "SSO_DEMO_edcp"
			set EDCP_QA_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
			pool $EDCP_QA_GLOBAL_poolName
			#HTTP::cookie encrypt $cookiename $encryption_passphrase
			persist cookie insert MEDCP_QA 0

		}


		"intranetqa.dubai.gov.ae"
		{
			if { not [class match [IP::client_addr] equals $static::EDCP_QA_GLOBAL_SrcIPs] }
			{
				HTTP::respond 200 content $static::EDCP_QA_Sorry
			}
			else {
				set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
				pool $EDCP_QA_GLOBAL_poolName
				persist cookie insert Intranet_QA 0
			}
		}

		"admin.devportalqa.dubai.gov.ae" -  "edcpstorageqa.dubai.gov.ae" 
		{
			#set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
			#set EDCP_QA_GLOBAL_poolName "SSO_DEMO_edcp"
			set EDCP_QA_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert EDCP_Admin_QA 0
			HTTP::header remove Server
		}

		"edcpbiqa.dubai.gov.ae" 
		{
			#set EDCP_QA_GLOBAL_poolName "EDCP_QA_SSL_Pool"
			#set EDCP_QA_GLOBAL_poolName "SSO_DEMO_edcp"
			set EDCP_QA_GLOBAL_poolName "EDCP_BI_QA_Cloud_Pool"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert EDCP_BIQA 0

		}

		"edcpservicesdev.dubai.gov.ae" - "edcpstoragedev.dubai.gov.ae" - "edcpbidev.dubai.gov.ae" - "edcpdev.dubai.gov.ae" - "edcpviewerdev.dubai.gov.ae"
		{
			set EDCP_QA_GLOBAL_poolName "EDCP_Dev_Cloud_Pool"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert EDCP_Dev 0

		}

		"edcpviewerqa.dubai.gov.ae" 
		{
			if { ( [HTTP::uri] contains "/_layouts/15/EverSuite.Viewer/" ) } {
			set EDCP_QA_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
			pool $EDCP_QA_GLOBAL_poolName
			#HTTP::cookie encrypt $cookiename $encryption_passphrase
			persist cookie insert MEDCP_QA 0
			} else {
				HTTP::respond 200 content $static::EDCP_QA_Sorry
				HTTP::header remove Server
				}

		}


		"kiteworks.dubai.gov.ae" 
		{
			set EDCP_QA_GLOBAL_poolName "EDCPQA_kiteworks_Poc_Pool"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert EDCPQA_kiteworks 0

		}
		
		"crmqa.dubai.gov.ae" - "crmportalqa.dubai.gov.ae" -
		"discqa.dubai.gov.ae" - "stagingdsg.dubai.gov.ae" - "authqa.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			set EDCP_QA_GLOBAL_poolName "CRM_QA_Pool"
			pool $EDCP_QA_GLOBAL_poolName
			persist cookie insert CRM_QA_F 0
			#pool "ShPnt_QA_Pool"
        }
		


    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set EDCP_QA_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	#STREAM::disable
}

when HTTP_RESPONSE
{
	 # Remove all instances of the Server header 
	HTTP::header remove Server 
	# Remove all headers starting with x- 
    if { $EDCP_QA_GLOBAL_poolName != "EDCPQA_kiteworks_Poc_Pool" } {
		foreach header_name [HTTP::header names] { 
		   if {[string match -nocase x-* $header_name]}{ 
			  HTTP::header remove $header_name 
		   } 
		}
	}
	#STREAM::disable
	#HTTP::header remove Server
	foreach CookieNames [HTTP::cookie names] {
		switch $CookieNames {
			"MEDCP_QA" - "EDCP_QA" - 
			"EDCP_QA_APP1" - "EDCP_QA_APP2"
			{	
				#	log local0. "cookie $CookieNames exists"
				set ckname $CookieNames
				set ckvalue [HTTP::cookie value $CookieNames]
				HTTP::cookie remove $CookieNames
				HTTP::cookie insert name $ckname value $ckvalue path "/" version 1
				HTTP::cookie secure $ckname enable
				HTTP::cookie httponly $ckname enable
				#HTTP::header remove Server
			}
        }
    }
}
}
ltm rule /Common/Email_Archive_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {

		"archive.dubai.gov.ae"  
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { (([HTTP::uri] contains "/MonitoringWebApp")  and (([IP::client_addr] equals "213.42.50.181" or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172"))))} {

				HTTP::uri "/MonitoringWebApp"
			}
			else {
					HTTP::redirect "https://archive.dubai.gov.ae/EnterpriseVault/Search"
				}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Email_Archive_Base {
    when RULE_INIT
{
	set static::Email_Arch_flag_maintenance 0
	set static::Email_Arch_GIN_Src "ACL_MS_GRP_PROD_GIN_Supernet"
}

when HTTP_REQUEST
{
	set Email_Arch_GLOBAL_BREAK_ALL 0
	set Email_Arch_GLOBAL_poolName ""
	set Email_Arch_GLOBAL_URI "[string tolower [HTTP::uri]]"
	set Email_Arch_goToMaintenance 0
	#set Sts_Serv_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] { 
        "archivereports.dubai.gov.ae"
	    {
			#set Email_Arch_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [class match [IP::client_addr] equals $static::SSO_PROD_GRP_GIN_Src] } {
				set Email_Arch_GLOBAL_poolName "Email_ArchRep_Pool"
				pool $Email_Arch_GLOBAL_poolName	
					#persist cookie insert Email_ArchRep 0
			}
			else {
				set Email_Arch_GLOBAL_BREAK_ALL 1
				drop
			}
        }

		"archive.dubai.gov.ae" 
		{
			if { [HTTP::uri] eq "/" } {		    	
				HTTP::redirect "https://archive.dubai.gov.ae/EnterpriseVault/Search"
			} elseif { (($Email_Arch_GLOBAL_URI contains "/monitoringwebapp") and ([IP::client_addr] equals "213.42.50.181"or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172"))) } {
				set Email_Arch_GLOBAL_poolName "Email_Archive_Pool"
				pool $Email_Arch_GLOBAL_poolName
			} elseif { $Email_Arch_GLOBAL_URI starts_with "/enterprisevault" } {
				set Email_Arch_GLOBAL_poolName "Email_Archive_Pool"
				pool $Email_Arch_GLOBAL_poolName
			} else {
				drop
			}
			#persist cookie insert Email_Arch 0
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set Email_Arch_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	#STREAM::disable
}

when HTTP_RESPONSE
{
	#STREAM::disable
}
}
ltm rule /Common/Email_Archive_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $Email_Arch_GLOBAL_poolName != "Email_Archive_Pool" } {
	    SSL::disable
	} 
}
}
ltm rule /Common/Exch2016_IMAPS_Base {
    when CLIENT_ACCEPTED {
 if {[TCP::local_port] == 993 } {
		pool "EXCH2016_IMAPS"
		#log local0. "SrcIP: [IP::client_addr], new IMAP pool selected"
	} else {
		drop
	}
}
}
ltm rule /Common/Exch2016_POP3S_Base {
    when CLIENT_ACCEPTED {
 if {[TCP::local_port] == 995 } {
		pool "EXCH2016_POP3S"
		#log local0. "SrcIP: [IP::client_addr], new POP3s pool selected"
	} else {
		drop
	}
}
}
ltm rule /Common/Exch2016_Services {
    when HTTP_REQUEST
{
	set Exch_Serv_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] {
		"cpanel.dubai.gov.ae"
	    {
			if { $Exch_Serv_URI equals "/" or $Exch_Serv_URI starts_with "/styles" or $Exch_Serv_URI starts_with "/images" or $Exch_Serv_URI starts_with "/certenroll" or $Exch_Serv_URI starts_with "/certsrv/certnew.cer" } {
				pool "Exch2016_cpanel_pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} else {
				#HTTP::respond 200 content "URL Blocked"
				reject
			}
        }
		"ca2.dubai.gov.ae"
		{
			if { $Exch_Serv_URI equals "/" or $Exch_Serv_URI starts_with "/styles" or $Exch_Serv_URI starts_with "/images" or $Exch_Serv_URI starts_with "/certenroll" or $Exch_Serv_URI starts_with "/certsrv/certnew.cer"} {
				pool "Exch2016_ca2_pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} else {
				reject
			}
		}
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	reject
        }
    }
}
}
ltm rule /Common/Exch2016_Services_SSL {
    when RULE_INIT
{
	set static::Exch2016_GIN_Access "Exch2016_GIN"
} 
when HTTP_REQUEST
{
	set Exch_Serv_SSL_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] {
		"cpanel.dubai.gov.ae"
	    {
			if { $Exch_Serv_SSL_URI equals "/" or $Exch_Serv_SSL_URI starts_with "/styles" or $Exch_Serv_SSL_URI starts_with "/images" or $Exch_Serv_SSL_URI starts_with "/ocsp" or $Exch_Serv_SSL_URI equals "/certsrv/certnew.p7b" or $Exch_Serv_SSL_URI equals "/certsrv/certnew.cer" or $Exch_Serv_SSL_URI equals "/certsrv/certcrl.crl" or $Exch_Serv_SSL_URI equals "/certsrv/certcarc.asp"} {
				pool "Exch2016_cpanel_https_pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} 
			elseif { $Exch_Serv_SSL_URI starts_with "/rpc" or $Exch_Serv_SSL_URI starts_with "/remotedesktopgateway" or $Exch_Serv_SSL_URI starts_with "/rpcwithcert" or $Exch_Serv_SSL_URI starts_with "/rdweb" } {
				pool "Exch2016_cpanel_admin_pool"
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
                                #log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} 
			elseif { $Exch_Serv_SSL_URI starts_with "/tokens" and [class match [IP::client_addr] equals $static::Exch2016_GIN_Access] } {
				pool "Exch2016_cpanel_https_pool"
			} else {
				reject
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
			}
        }
	"cpanel2.dubai.gov.ae"
                {
			if { $Exch_Serv_SSL_URI starts_with "/rpc" or $Exch_Serv_SSL_URI starts_with "/remotedesktopgateway" or $Exch_Serv_SSL_URI starts_with "/rpcwithcert" or $Exch_Serv_SSL_URI starts_with "/rdweb" } {
				pool "Exch2016_ca2_admin_pool"
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
                                #log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} 
			elseif { $Exch_Serv_SSL_URI starts_with "/tokens" and [class match [IP::client_addr] equals $static::Exch2016_GIN_Access] } {
				pool "Exch2016_ca2_https_pool"
			} else {
				reject
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
			}
        }


		"ca2.dubai.gov.ae"
		    {
			if { $Exch_Serv_SSL_URI equals "/" or $Exch_Serv_SSL_URI starts_with "/styles" or $Exch_Serv_SSL_URI starts_with "/images" or $Exch_Serv_SSL_URI starts_with "/ocsp" or $Exch_Serv_SSL_URI equals "/certsrv/certnew.p7b" or $Exch_Serv_SSL_URI equals "/certsrv/certnew.cer" or $Exch_Serv_SSL_URI equals "/certsrv/certcrl.crl" or $Exch_Serv_SSL_URI equals "/certsrv/certcarc.asp"} {
				pool "Exch2016_ca2_https_pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} 
			elseif { $Exch_Serv_SSL_URI starts_with "/rpc" or $Exch_Serv_SSL_URI starts_with "/remotedesktopgateway" or $Exch_Serv_SSL_URI starts_with "/rpcwithcert" or $Exch_Serv_SSL_URI starts_with "/rdweb" } {
				pool "Exch2016_ca2_admin_pool"
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
                                #log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} 
			elseif { $Exch_Serv_SSL_URI starts_with "/tokens" and [class match [IP::client_addr] equals $static::Exch2016_GIN_Access] } {
				pool "Exch2016_ca2_https_pool"
			} else {
				reject
				#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
			}
        }

		"oos1.dubai.gov.ae"
		{
			if { $Exch_Serv_SSL_URI starts_with "/" } {
				pool "Exch2016_oos_pool"
			} else {
				reject
			}
		}
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	reject
        }
    }
}
}
ltm rule /Common/Exch_IMAP_Base {
    when CLIENT_ACCEPTED {
 if {[TCP::local_port] == 143 } {
		pool "EXCH2016_IMAP"
		#log local0. "SrcIP: [IP::client_addr], new IMAP pool selected"
	}
}
}
ltm rule /Common/Exch_Outlook_Base {
    when HTTP_REQUEST
{
	set Exch_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] {
		"mail.dubai.gov.ae"
	    {
			if { $Exch_URI starts_with "/rpc" } {					
					pool "EXCH2016_RPC"
			} elseif { $Exch_URI starts_with "/oab" } {
					pool "EXCH2016_OAB"
			} elseif { $Exch_URI starts_with "/ews" } {
					pool "EXCH2016_EWS"
			} elseif { $Exch_URI starts_with "/exchange" } { 
					pool "EXCH2016_OWA"
			} elseif { $Exch_URI starts_with "/autodiscover" } {
					pool "EXCH2016_AutoDisc"
			} elseif { $Exch_URI starts_with "/microsoft-server-activesync" } { 
					pool "EXCH2016_ActiveSync"
			} elseif { $Exch_URI starts_with "/mapi" } {
					pool "EXCH2016_MAPI"
			} else {
					#log local0. "Client-IP: [IP::client_addr] URL: [HTTP::uri]"
				reject
			}
		}
    }
}
}
ltm rule /Common/Exch_POP3_Base {
    when CLIENT_ACCEPTED {
 if {[TCP::local_port] == 110 } {
		pool "EXCH2016_POP3"
		#log local0. "SrcIP: [IP::client_addr], new POP3 pool selected"
	}
}
}
ltm rule /Common/Exch_autodisc_Base {
    when HTTP_REQUEST
{
	set ExchAuto_URI [string tolower [HTTP::uri]]
	set ExchAuto_HOST [string tolower [HTTP::host]]

	if { $ExchAuto_HOST starts_with "autodiscover" and $ExchAuto_URI starts_with "/autodiscover" } {
			HTTP::redirect "https://mail.dubai.gov.ae/autodiscover/autodiscover.xml"
		}
	else {
		reject
	}
}
}
ltm rule /Common/F5_Test_443_Base {
    when RULE_INIT
{
	set static::F5_Test_443_poolIdentifeir "WebPool"
	set static::F5_Test_443_CRPA_Src "ACLgrpcrpa"
	set static::F5_Test_443_DEMO_Src "ACLgrpdemo"
	set static::F5_Test_443_eJob_for_Dept "PRODeJobRedirect"
	#set static::F5_Test_443_ME "GRP_NonPROD_Maintenance_Exempt"

}

when HTTP_REQUEST
{
	set F5_Test_443_GLOBAL_GRP_BREAK_ALL 0
	set F5_Test_443_GLOBAL_GRP_Forms_BREAK 0
	set F5_Test_443_GLOBAL_hostName ""
	set F5_Test_443_GLOBAL_hostName_index ""
	set F5_Test_443_GLOBAL_poolName ""
	set F5_Test_443_GLOBAL_URI ""
	set F5_Test_443_Rewrite_Responce_Payload 0
	set F5_Test_443_prod_Rewrite_Resp_Payload 0
	set F5_Test_443_GLOBAL_Rewrite_Select ""

	switch [string tolower [HTTP::host]] { 
    "teams.pilot.deg.ae" - "tmstfimsp.pilot.deg.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
    }

	"grpdemo.dubai.gov.ae" - "grpdev.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
    }

	"isupplier.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
    }

	"ejob.dubai.gov.ae" - "www.ejob.dubai.gov.ae"
	{

		set F5_Test_443_URI_GLOBAL_UC [string toupper [HTTP::uri]]

		if {[class match $F5_Test_443_URI_GLOBAL_UC starts_with $static::F5_Test_443_eJob_for_Dept]} {
	    	set eJobx_CustomPage_DeptList [class names $static::F5_Test_443_eJob_for_Dept]
	        #log local0. "$eJobx_CustomPage_DeptList"	
		    foreach eJobx_CustomPage_Dept_Select $eJobx_CustomPage_DeptList
		    {
		    #log local0. "$eJobx_CustomPage_Dept_Select"
			set eJobx_CustomPage_AR_Dept_Select "${eJobx_CustomPage_Dept_Select}_AR"
			#log local0. "$eJobx_CustomPage_AR_Dept_Select"
			if {$F5_Test_443_URI_GLOBAL_UC equals $eJobx_CustomPage_Dept_Select} {
					HTTP::uri "/OA_HTML/${eJobx_CustomPage_Dept_Select}IrcVisitor.jsp"
					break
				} elseif {$F5_Test_443_URI_GLOBAL_UC equals $eJobx_CustomPage_AR_Dept_Select} {
					HTTP::uri "/OA_HTML/${eJobx_CustomPage_Dept_Select}IrcVisitor.jsp?L=AR"
					break
				} 
		    }
		} 
	}
	default
	{
		#log local0. "Access blocked for Host: [HTTP::host]"
		set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
		drop
    }
}

	if { [HTTP::host] starts_with "www\." and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
   		set F5_Test_443_host [HTTP::host]
		regsub -all -nocase "www\." $F5_Test_443_host "" F5_Test_443_host
		HTTP::respond 302 Location "https://$F5_Test_443_host[HTTP::uri]"
		set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
	}



	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/F5_Test_443_Pool_SSL_Disable {
    when SERVER_CONNECTED {
	if  { $F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" or $F5_Test_443_GLOBAL_poolName == "MS_GRP_PRD_DMZ_Pool" } {
	    SSL::disable
	    } 
}
}
ltm rule /Common/F5_Test_443_Pool_Select {
    when RULE_INIT
{
set F5_Test_443_Sorry "<html><head></head><body><p>Access Denied1...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
set static::eJob_Custom_Page_mapping
	{
		"^/rta\$====RTA"
		"^/deg\$====DEG"
		"^/dha\$====DHA"
		"^/cda\$====CDA"
		"^/dgmo\$====DGMO"
	}
}

when HTTP_REQUEST
{
if { $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0 } {

	set F5_Test_443_GLOBAL_hostName [HTTP::host]
	set F5_Test_443_GLOBAL_URI [HTTP::uri]

	if {$F5_Test_443_GLOBAL_hostName contains ":"}
	{
		set F5_Test_443_GLOBAL_hostName [getfield $F5_Test_443_GLOBAL_hostName ":" 1]
	}

	set F5_Test_443_GLOBAL_hostName_index [substr $F5_Test_443_GLOBAL_hostName 0 "."]


	set F5_Test_443_GLOBAL_poolName "$F5_Test_443_GLOBAL_hostName_index$static::F5_Test_443_poolIdentifeir"


#..........eJob Custom Page Selection.........................................................
    if { [HTTP::host] equals "xejob.dubai.gov.ae" } {
		switch -glob $F5_Test_443_URI_GLOBAL_lc {
		"/rta*" - "/deg*" - "/dha*" - "/cda*" - "/dgmo*"
		{
			foreach eJob_mappingRecord $static::eJob_Custom_Page_mapping
			{
				set eJob_mapping_uri_in_Eng [getfield $eJob_mappingRecord "====" 1]
				log local0. "InEng: $eJob_mapping_uri_in_Eng"
				set eJob_mapping_uri_in_AR [string map [list $ _ar$] $eJob_mapping_uri_in_Eng]
				log local0. "InAR: $eJob_mapping_uri_in_AR" 
				set eJob_mapping_uri_out [getfield $eJob_mappingRecord "====" 2]
				log local0. "Out: $eJob_mapping_uri_out"

				if {[regexp $eJob_mapping_uri_in_AR $F5_Test_443_URI_GLOBAL_lc] == 1}
				{
					#set ArabicOut "/OA_HTML/${eJob_mapping_uri_out}IrcVisitor.jsp?L=AR"
					#log local0. "ArabicOut: $ArabicOut"
					HTTP::uri "/OA_HTML/${eJob_mapping_uri_out}IrcVisitor.jsp?L=AR"
					break
				} elseif {[regexp $eJob_mapping_uri_in_Eng $F5_Test_443_URI_GLOBAL_lc] == 1}
				{
					HTTP::uri "/OA_HTML/${eJob_mapping_uri_out}IrcVisitor.jsp"
					break
				}
			}
		}
	    }
	}

#.................................................................................


	#--------------------------------

	switch $F5_Test_443_GLOBAL_poolName
	{	
		"teamsWebPool"
		{
			set F5_Test_443_GLOBAL_poolName "ssotest_228_443_Pool"
			set F5_Test_443_GLOBAL_Rewrite_Select "teams"
			pool $F5_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_teams 0

			switch -glob  $F5_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }

			   default
			   {  
		 	   }   
			}
	    }

		"grpdemoWebPool"
		{
			set F5_Test_443_GLOBAL_poolName "ssotest_229_80_Pool"
			set F5_Test_443_GLOBAL_Rewrite_Select "grpdemo"
			pool $F5_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_grpdemo_vj 0

			switch -glob  $F5_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
		       }   
			   default
			   {  
		 	   }   
			}
	    }

		"grpdevWebPool"
		{
			set F5_Test_443_GLOBAL_poolName "ssotest_229_80_Pool"
			set F5_Test_443_GLOBAL_Rewrite_Select "grpdev"
			pool $F5_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_grpdev_vj 0

			switch -glob  $F5_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
		       }
			   "/discoverer" - "//discoverer"
		       {  
	            set F5_Test_443_GLOBAL_poolName "ssotest_224_8090_Pool"
		    	set F5_Test_443_GLOBAL_Rewrite_Select "grpdev_disc"
		    	pool $F5_Test_443_GLOBAL_poolName
	         	persist cookie insert SSO_POC_grpdev_discov_vj 0
		       }
			   default
			   {  
		 	   }   
			}
	    }


		"tmstfimspWebPool"
		{
			set F5_Test_443_GLOBAL_poolName "ssotest_228_443_Pool"
			set F5_Test_443_GLOBAL_Rewrite_Select "teamstfim"
			pool $F5_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_teams_tfim 0

			switch -glob  $F5_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set F5_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}
	    }

        "isupplierWebPool"
		{
			set F5_Test_443_GLOBAL_poolName "MS_GRP_PRD_DMZ_Pool"
			pool $F5_Test_443_GLOBAL_poolName
			persist cookie insert iSupDmz_Test 0

		}
		default 
		{
		}	
	}
}		
}

when HTTP_RESPONSE {
    set F5_Test_443_myValues [HTTP::cookie names]
    foreach F5_Test_443_mycookies $F5_Test_443_myValues {
       #HTTP::cookie secure $F5_Test_443_mycookies enable
    }
 }
}
ltm rule /Common/F5_Test_443_Rewrite1 {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::F5_Test_443_Rewrite1_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::F5_Test_443_Rewrite1_request_host
	{
	} 
	set static::F5_Test_443_Rewrite1_request_referer
	{
	}
	set static::F5_Test_443_Rewrite1_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::F5_Test_443_Rewrite1_response_setCookie
	{
	}
	set static::F5_Test_443_Rewrite1_response_location
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::F5_Test_443_Rewrite1_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::F5_Test_443_Rewrite1_response_body
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdemo" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite1_request_uri] > 0}
	{
	set F5_Test_443_Rewrite1_request_val [HTTP::uri]
	foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_request_uri
	{
		set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
		set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]
		if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
		{
			set F5_Test_443_Rewrite1_request_replace ""
		}

		regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
	}
	if { [catch {HTTP::uri $F5_Test_443_Rewrite1_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite1_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set F5_Test_443_Rewrite1_request_val [HTTP::host]
		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_request_host
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}
			regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
		}
		if { [catch {HTTP::header replace Host $F5_Test_443_Rewrite1_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite1_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set F5_Test_443_Rewrite1_request_val [HTTP::header value Referer]
		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_request_referer
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
		}

		if { [catch {HTTP::header replace Referer $F5_Test_443_Rewrite1_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite1_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set F5_Test_443_Rewrite1_request_val [HTTP::header value Cookie]
		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_request_cookie
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
		}
		if { [catch {HTTP::header replace Cookie $F5_Test_443_Rewrite1_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdemo" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite1_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set F5_Test_443_Rewrite1_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_val_list
		{
			foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_response_setCookie
			{
				set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
				set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]

				if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
				{
					set F5_Test_443_Rewrite1_request_replace ""
				}
				regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $F5_Test_443_Rewrite1_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite1_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set F5_Test_443_Rewrite1_request_val [HTTP::header value Location]

		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_response_location
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
		}
		if { [catch {HTTP::header replace Location $F5_Test_443_Rewrite1_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite1_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set F5_Test_443_Rewrite1_request_val [HTTP::header value Content-Location]

		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_response_contentLocation
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite1_request_find $F5_Test_443_Rewrite1_request_val $F5_Test_443_Rewrite1_request_replace F5_Test_443_Rewrite1_request_val
		}
		if { [catch {HTTP::header replace Content-Location $F5_Test_443_Rewrite1_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::F5_Test_443_Rewrite1_response_body] > 0}
	{
		set F5_Test_443_Rewrite1_expression ""
		foreach F5_Test_443_Rewrite1_request_rewriteRecord $static::F5_Test_443_Rewrite1_response_body
		{
			set F5_Test_443_Rewrite1_request_find [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite1_request_replace [getfield $F5_Test_443_Rewrite1_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite1_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite1_request_replace ""
			}

			set F5_Test_443_Rewrite1_expression "$F5_Test_443_Rewrite1_expression@$F5_Test_443_Rewrite1_request_find@$F5_Test_443_Rewrite1_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $F5_Test_443_Rewrite1_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdemo" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set F5_Test_443_Rewrite1_theMatch [STREAM::match]

		#log local0. "match found: $F5_Test_443_Rewrite1_theMatch"
		#log local0. "on URI: $F5_Test_443_Rewrite1_GLOBAL_URI"

    }
}
}
ltm rule /Common/F5_Test_443_Rewrite2 {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::F5_Test_443_Rewrite2_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::F5_Test_443_Rewrite2_request_host
	{
	} 
	set static::F5_Test_443_Rewrite2_request_referer
	{
	}
	set static::F5_Test_443_Rewrite2_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::F5_Test_443_Rewrite2_response_setCookie
	{
	}
	set static::F5_Test_443_Rewrite2_response_location
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
	set static::F5_Test_443_Rewrite2_response_contentLocation
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
	set static::F5_Test_443_Rewrite2_response_body
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdev" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite2_request_uri] > 0}
	{
	set F5_Test_443_Rewrite2_request_val [HTTP::uri]
	foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_request_uri
	{
		set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
		set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]
		if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
		{
			set F5_Test_443_Rewrite2_request_replace ""
		}

		regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
	}
	if { [catch {HTTP::uri $F5_Test_443_Rewrite2_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite2_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set F5_Test_443_Rewrite2_request_val [HTTP::host]
		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_request_host
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}
			regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
		}
		if { [catch {HTTP::header replace Host $F5_Test_443_Rewrite2_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite2_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set F5_Test_443_Rewrite2_request_val [HTTP::header value Referer]
		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_request_referer
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
		}

		if { [catch {HTTP::header replace Referer $F5_Test_443_Rewrite2_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite2_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set F5_Test_443_Rewrite2_request_val [HTTP::header value Cookie]
		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_request_cookie
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
		}
		if { [catch {HTTP::header replace Cookie $F5_Test_443_Rewrite2_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdev" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite2_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set F5_Test_443_Rewrite2_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_val_list
		{
			foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_response_setCookie
			{
				set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
				set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]

				if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
				{
					set F5_Test_443_Rewrite2_request_replace ""
				}
				regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $F5_Test_443_Rewrite2_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite2_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set F5_Test_443_Rewrite2_request_val [HTTP::header value Location]

		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_response_location
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
		}
		if { [catch {HTTP::header replace Location $F5_Test_443_Rewrite2_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite2_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set F5_Test_443_Rewrite2_request_val [HTTP::header value Content-Location]

		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_response_contentLocation
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite2_request_find $F5_Test_443_Rewrite2_request_val $F5_Test_443_Rewrite2_request_replace F5_Test_443_Rewrite2_request_val
		}
		if { [catch {HTTP::header replace Content-Location $F5_Test_443_Rewrite2_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::F5_Test_443_Rewrite2_response_body] > 0}
	{
		set F5_Test_443_Rewrite2_expression ""
		foreach F5_Test_443_Rewrite2_request_rewriteRecord $static::F5_Test_443_Rewrite2_response_body
		{
			set F5_Test_443_Rewrite2_request_find [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite2_request_replace [getfield $F5_Test_443_Rewrite2_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite2_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite2_request_replace ""
			}

			set F5_Test_443_Rewrite2_expression "$F5_Test_443_Rewrite2_expression@$F5_Test_443_Rewrite2_request_find@$F5_Test_443_Rewrite2_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $F5_Test_443_Rewrite2_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_229_80_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "grpdev" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set F5_Test_443_Rewrite2_theMatch [STREAM::match]

		#log local0. "match found: $F5_Test_443_Rewrite2_theMatch"
		#log local0. "on URI: $F5_Test_443_Rewrite2_GLOBAL_URI"

    }
}
}
ltm rule /Common/F5_Test_443_Rewrite3 {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::F5_Test_443_Rewrite3_request_uri
	{
		#"^/\$====/OA_HTML/AppsLogin"
	}
	set static::F5_Test_443_Rewrite3_request_host
	{
	} 
	set static::F5_Test_443_Rewrite3_request_referer
	{
	}
	set static::F5_Test_443_Rewrite3_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::F5_Test_443_Rewrite3_response_setCookie
	{
	}
	set static::F5_Test_443_Rewrite3_response_location
	{
	}
	set static::F5_Test_443_Rewrite3_response_contentLocation
	{
	}
	set static::F5_Test_443_Rewrite3_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$F5_Test_443_GLOBAL_poolName == "MS_GRP_PRD_DMZ_Pool" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite3_request_uri] > 0}
	{
	set F5_Test_443_Rewrite3_request_val [HTTP::uri]
	foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_request_uri
	{
		set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
		set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]
		if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
		{
			set F5_Test_443_Rewrite3_request_replace ""
		}

		regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
	}
	if { [catch {HTTP::uri $F5_Test_443_Rewrite3_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite3_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set F5_Test_443_Rewrite3_request_val [HTTP::host]
		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_request_host
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}
			regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
		}
		if { [catch {HTTP::header replace Host $F5_Test_443_Rewrite3_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite3_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set F5_Test_443_Rewrite3_request_val [HTTP::header value Referer]
		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_request_referer
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
		}

		if { [catch {HTTP::header replace Referer $F5_Test_443_Rewrite3_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::F5_Test_443_Rewrite3_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set F5_Test_443_Rewrite3_request_val [HTTP::header value Cookie]
		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_request_cookie
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]

			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
		}
		if { [catch {HTTP::header replace Cookie $F5_Test_443_Rewrite3_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$F5_Test_443_GLOBAL_poolName == "MS_GRP_PRD_DMZ_Pool" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite3_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set F5_Test_443_Rewrite3_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_val_list
		{
			foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_response_setCookie
			{
				set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
				set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]

				if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
				{
					set F5_Test_443_Rewrite3_request_replace ""
				}
				regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $F5_Test_443_Rewrite3_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite3_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set F5_Test_443_Rewrite3_request_val [HTTP::header value Location]

		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_response_location
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
		}
		if { [catch {HTTP::header replace Location $F5_Test_443_Rewrite3_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::F5_Test_443_Rewrite3_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set F5_Test_443_Rewrite3_request_val [HTTP::header value Content-Location]

		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_response_contentLocation
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}

			regsub -all $F5_Test_443_Rewrite3_request_find $F5_Test_443_Rewrite3_request_val $F5_Test_443_Rewrite3_request_replace F5_Test_443_Rewrite3_request_val
		}
		if { [catch {HTTP::header replace Content-Location $F5_Test_443_Rewrite3_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::F5_Test_443_Rewrite3_response_body] > 0}
	{
		set F5_Test_443_Rewrite3_expression ""
		foreach F5_Test_443_Rewrite3_request_rewriteRecord $static::F5_Test_443_Rewrite3_response_body
		{
			set F5_Test_443_Rewrite3_request_find [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 1]
			set F5_Test_443_Rewrite3_request_replace [getfield $F5_Test_443_Rewrite3_request_rewriteRecord "====" 2]
			if {$F5_Test_443_Rewrite3_request_replace == "nothing"}
			{
				set F5_Test_443_Rewrite3_request_replace ""
			}

			set F5_Test_443_Rewrite3_expression "$F5_Test_443_Rewrite3_expression@$F5_Test_443_Rewrite3_request_find@$F5_Test_443_Rewrite3_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $F5_Test_443_Rewrite3_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$F5_Test_443_GLOBAL_poolName == "MS_GRP_PRD_DMZ_Pool" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set F5_Test_443_Rewrite3_theMatch [STREAM::match]

		#log local0. "match found: $F5_Test_443_Rewrite3_theMatch"
		#log local0. "on URI: $F5_Test_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/F5_Test_443_Rewrite_ssoTeams {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::F5_Test_443_ssogrpdev_request_uri
	{
	}
	set static::F5_Test_443_ssogrpdev_request_host
	{
	} 
	set static::F5_Test_443_ssogrpdev_request_referer
	{
	}
	set static::F5_Test_443_ssogrpdev_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::F5_Test_443_ssogrpdev_response_setCookie
	{
	}
	set static::F5_Test_443_ssogrpdev_response_location
	{
	}
	set static::F5_Test_443_ssogrpdev_response_contentLocation
	{
	}
	set static::F5_Test_443_ssogrpdev_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teams" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::F5_Test_443_ssogrpdev_request_uri] > 0}
	{
	set F5_Test_443_ssogrpdev_request_val [HTTP::uri]
	foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_request_uri
	{
		set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
		set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
		if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
		{
			set F5_Test_443_ssogrpdev_request_replace ""
		}

		regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
	}
	if { [catch {HTTP::uri $F5_Test_443_ssogrpdev_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::F5_Test_443_ssogrpdev_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set F5_Test_443_ssogrpdev_request_val [HTTP::host]
		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_request_host
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}
			regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Host $F5_Test_443_ssogrpdev_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::F5_Test_443_ssogrpdev_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set F5_Test_443_ssogrpdev_request_val [HTTP::header value Referer]
		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_request_referer
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
		}

		if { [catch {HTTP::header replace Referer $F5_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::F5_Test_443_ssogrpdev_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set F5_Test_443_ssogrpdev_request_val [HTTP::header value Cookie]
		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_request_cookie
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Cookie $F5_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teams" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::F5_Test_443_ssogrpdev_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set F5_Test_443_ssogrpdev_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_val_list
		{
			foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_response_setCookie
			{
				set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
				set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

				if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
				{
					set F5_Test_443_ssogrpdev_request_replace ""
				}
				regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $F5_Test_443_ssogrpdev_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::F5_Test_443_ssogrpdev_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set F5_Test_443_ssogrpdev_request_val [HTTP::header value Location]

		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_response_location
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Location $F5_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::F5_Test_443_ssogrpdev_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set F5_Test_443_ssogrpdev_request_val [HTTP::header value Content-Location]

		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_response_contentLocation
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $F5_Test_443_ssogrpdev_request_find $F5_Test_443_ssogrpdev_request_val $F5_Test_443_ssogrpdev_request_replace F5_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Content-Location $F5_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::F5_Test_443_ssogrpdev_response_body] > 0}
	{
		set F5_Test_443_ssogrpdev_expression ""
		foreach F5_Test_443_ssogrpdev_request_rewriteRecord $static::F5_Test_443_ssogrpdev_response_body
		{
			set F5_Test_443_ssogrpdev_request_find [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set F5_Test_443_ssogrpdev_request_replace [getfield $F5_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set F5_Test_443_ssogrpdev_request_replace ""
			}

			set F5_Test_443_ssogrpdev_expression "$F5_Test_443_ssogrpdev_expression@$F5_Test_443_ssogrpdev_request_find@$F5_Test_443_ssogrpdev_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $F5_Test_443_ssogrpdev_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teams" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set F5_Test_443_ssogrpdev_theMatch [STREAM::match]

		#log local0. "match found: $F5_Test_443_ssogrpdev_theMatch"
		#log local0. "on URI: $F5_Test_443_ssogrpdev_GLOBAL_URI"

    }
}
}
ltm rule /Common/F5_Test_443_Rewrite_ssoteamstfim {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::F5_Test_443_ssoteamstfim_request_uri
	{
	}
	set static::F5_Test_443_ssoteamstfim_request_host
	{
	} 
	set static::F5_Test_443_ssoteamstfim_request_referer
	{
	}
	set static::F5_Test_443_ssoteamstfim_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::F5_Test_443_ssoteamstfim_response_setCookie
	{
	}
	set static::F5_Test_443_ssoteamstfim_response_location
	{
	}
	set static::F5_Test_443_ssoteamstfim_response_contentLocation
	{
	}
	set static::F5_Test_443_ssoteamstfim_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teamstfim" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::F5_Test_443_ssoteamstfim_request_uri] > 0}
	{
	set F5_Test_443_ssoteamstfim_request_val [HTTP::uri]
	foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_request_uri
	{
		set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
		set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]
		if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
		{
			set F5_Test_443_ssoteamstfim_request_replace ""
		}

		regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
	}
	if { [catch {HTTP::uri $F5_Test_443_ssoteamstfim_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::F5_Test_443_ssoteamstfim_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set F5_Test_443_ssoteamstfim_request_val [HTTP::host]
		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_request_host
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}
			regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
		}
		if { [catch {HTTP::header replace Host $F5_Test_443_ssoteamstfim_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::F5_Test_443_ssoteamstfim_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set F5_Test_443_ssoteamstfim_request_val [HTTP::header value Referer]
		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_request_referer
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}

			regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
		}

		if { [catch {HTTP::header replace Referer $F5_Test_443_ssoteamstfim_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::F5_Test_443_ssoteamstfim_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set F5_Test_443_ssoteamstfim_request_val [HTTP::header value Cookie]
		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_request_cookie
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]

			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}

			regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
		}
		if { [catch {HTTP::header replace Cookie $F5_Test_443_ssoteamstfim_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teamstfim" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::F5_Test_443_ssoteamstfim_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set F5_Test_443_ssoteamstfim_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_val_list
		{
			foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_response_setCookie
			{
				set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
				set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]

				if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
				{
					set F5_Test_443_ssoteamstfim_request_replace ""
				}
				regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $F5_Test_443_ssoteamstfim_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::F5_Test_443_ssoteamstfim_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set F5_Test_443_ssoteamstfim_request_val [HTTP::header value Location]

		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_response_location
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}

			regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
		}
		if { [catch {HTTP::header replace Location $F5_Test_443_ssoteamstfim_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::F5_Test_443_ssoteamstfim_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set F5_Test_443_ssoteamstfim_request_val [HTTP::header value Content-Location]

		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_response_contentLocation
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}

			regsub -all $F5_Test_443_ssoteamstfim_request_find $F5_Test_443_ssoteamstfim_request_val $F5_Test_443_ssoteamstfim_request_replace F5_Test_443_ssoteamstfim_request_val
		}
		if { [catch {HTTP::header replace Content-Location $F5_Test_443_ssoteamstfim_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::F5_Test_443_ssoteamstfim_response_body] > 0}
	{
		set F5_Test_443_ssoteamstfim_expression ""
		foreach F5_Test_443_ssoteamstfim_request_rewriteRecord $static::F5_Test_443_ssoteamstfim_response_body
		{
			set F5_Test_443_ssoteamstfim_request_find [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 1]
			set F5_Test_443_ssoteamstfim_request_replace [getfield $F5_Test_443_ssoteamstfim_request_rewriteRecord "====" 2]
			if {$F5_Test_443_ssoteamstfim_request_replace == "nothing"}
			{
				set F5_Test_443_ssoteamstfim_request_replace ""
			}

			set F5_Test_443_ssoteamstfim_expression "$F5_Test_443_ssoteamstfim_expression@$F5_Test_443_ssoteamstfim_request_find@$F5_Test_443_ssoteamstfim_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $F5_Test_443_ssoteamstfim_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$F5_Test_443_GLOBAL_poolName == "ssotest_228_443_Pool" and $F5_Test_443_GLOBAL_Rewrite_Select == "teamstfim" and $F5_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set F5_Test_443_ssoteamstfim_theMatch [STREAM::match]

		#log local0. "match found: $F5_Test_443_ssoteamstfim_theMatch"
		#log local0. "on URI: $F5_Test_443_ssoteamstfim_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_NonPROD_80_Global_Variables {
    when RULE_INIT
{
	set static::GRP_NonPROD_80_poolIdentifeir "WebPool"
	set static::GRP_REL_SUPT_Src "ACLgrpcrpa"
	set static::GRP_REL_DEMO_Src "ACLgrpdemo"
	set static::GRP_REL_DEMODmz_Src "ACL_grpdemoDmz"
	set static::GRP_REL_STAR_Src "ACLgrpstar"
	set static::GRP_REL_PROJ_Src "ACLgrpproj"
	set static::GRP_DEV_Src "ACLgrpdev"
	set static::GRP_DEV_SITE_Src "ACLgrpsite"
	set static::GRP_NonPROD_80_ME "GRP_NonPROD_Maintenance_Exempt"
}

when HTTP_REQUEST
{
	set GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL 0
	set GRP_NonPROD_80_GLOBAL_hostName ""
	set GRP_NonPROD_80_GLOBAL_hostName_index ""
	set GRP_NonPROD_80_GLOBAL_poolName ""

	switch [string tolower [HTTP::host]] { 
    "grpsupt.dubai.gov.ae" - "www.grpsupt.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpdemo.dubai.gov.ae" - "www.grpdemo.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpuat.dubai.gov.ae" - "www.grpuat.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		#set GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL 1
		#HTTP::redirect "https://grpuat.dubai.gov.ae[HTTP::uri]"
    }
	"grpproj.dubai.gov.ae" - "www.grpproj.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpdev.dubai.gov.ae" - "www.grpdev.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	default
	{
		#log local0. "Access blocked for Host: [HTTP::host]"
		set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		drop
    }
    }
}
}
ltm rule /Common/GRP_NonPROD_80_Pool_Select {
    when RULE_INIT
{
set GRP_NonPROD_80_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST
{
if { $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0 } {

	set GRP_NonPROD_80_GLOBAL_hostName [HTTP::host]

	if {$GRP_NonPROD_80_GLOBAL_hostName contains ":"}
	{
		set GRP_NonPROD_80_GLOBAL_hostName [getfield $GRP_NonPROD_80_GLOBAL_hostName ":" 1]
	}

	set GRP_NonPROD_80_GLOBAL_hostName_index [substr $GRP_NonPROD_80_GLOBAL_hostName 0 "."]

	set GRP_NonPROD_80_GLOBAL_poolName "$GRP_NonPROD_80_GLOBAL_hostName_index$static::GRP_NonPROD_80_poolIdentifeir"

	#--------------------------------
	# ACL FUNCTIONS
	#Src IP based Restriction handling

	set SrcIP_NonPROD_80_Restriction 0

	switch $GRP_NonPROD_80_GLOBAL_poolName
	{
		"grpsuptWebPool"
		{
			if {not ([matchclass $static::GRP_REL_SUPT_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP SUPPORT Instance"
			set SrcIP_NonPROD_80_Restriction 1
		    }
		}
		"grpdemoWebPool"
		{
			if {not ([matchclass $static::GRP_REL_DEMO_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP DEMO Instance"
			set SrcIP_NonPROD_80_Restriction 1
		    } 
			if {( [class match [IP::client_addr] equals $static::GRP_REL_DEMODmz_Src] ) } {
				set GRP_NonPROD_80_GLOBAL_poolName "grpdemodmzWebPool"
				set SrcIP_NonPROD_80_Restriction 0
				#log local0. "IP: [IP::client_addr] is allowed to access GRP DEMO DMZ Instance"
			}
			if { [HTTP::uri] starts_with "/discoverer" } {
				set GRP_NonPROD_80_GLOBAL_poolName "grpdemo_discov_8090"
			}
		}
		"grpstarWebPool"
		{
			if {not ([matchclass $static::GRP_REL_STAR_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP STAR Instance"
			set SrcIP_NonPROD_80_Restriction 1
		    }
		}
		"grpprojWebPool"
		{
			if {not ([matchclass $static::GRP_REL_PROJ_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP PROJ Instance"
			set SrcIP_NonPROD_80_Restriction 1
		    }
		}
		"grpdevWebPool"
		{
			if {not ([matchclass $static::GRP_DEV_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP DEV Instance"
			set SrcIP_NonPROD_80_Restriction 1
		    }
		}
		"grpuatWebPool"
		{
		}
	}

	#--------------------------------


	if {$SrcIP_NonPROD_80_Restriction == 1}
	{
		#log local0. "IP: [IP::client_addr] is Blocked"
		set GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL 1
		HTTP::respond 200 content $::GRP_NonPROD_80_Sorry
		drop
	}
	else
	{
		pool $GRP_NonPROD_80_GLOBAL_poolName
		if {$GRP_NonPROD_80_GLOBAL_poolName == "grpdemodmzWebPool"} {
		persist cookie insert NPDMZ$GRP_NonPROD_80_GLOBAL_hostName_index 0	
		} else {
		persist cookie insert NP$GRP_NonPROD_80_GLOBAL_hostName_index 0
	    #log local0. "POOL: $GRP_NonPROD_80_GLOBAL_poolName"
	    }
	}
}	

}
}
ltm rule /Common/GRP_NonPROD_80_Pools_Maintenance {
    when RULE_INIT
{
	set static::flag_maintenance_80_grpsupt 0
	set static::flag_maintenance_80_grpdemo 0
	set static::flag_maintenance_80_grpstar 0
	set static::flag_maintenance_80_grpproj 0
	set static::flag_maintenance_80_grpdev 0
}

when HTTP_REQUEST
{
	set flag_80_goToMaintenance 0

	switch $GRP_NonPROD_80_GLOBAL_poolName
	{
		"grpsuptWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_80_ME equals [IP::client_addr]]) and $static::flag_maintenance_80_grpsupt == 1}
			{
				set flag_80_goToMaintenance 1
			}
		}
		"grpdemoWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_80_ME equals [IP::client_addr]]) and $static::flag_maintenance_80_grpdemo == 1}
			{
				set flag_80_goToMaintenance 1
			}
		}
		"grpstarWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_80_ME equals [IP::client_addr]]) and $static::flag_maintenance_80_grpstar == 1}
			{
				set flag_80_goToMaintenance 1
			}
		}
		"grpprojWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_80_ME equals [IP::client_addr]]) and $static::flag_maintenance_80_grpproj == 1}
			{
				set flag_80_goToMaintenance 1
			}
		}
		"grpdevWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_80_ME equals [IP::client_addr]]) and $static::flag_maintenance_80_grpdev == 1}
			{
				set flag_80_goToMaintenance 1
			}
		}
	}

	if {$flag_80_goToMaintenance == 1}
	{
		set GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL 1
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace Host "www.dsg.gov.ae"
		HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_$GRP_NonPROD_80_GLOBAL_hostName_index 0
	}
}
}
ltm rule /Common/GRP_NonPROD_80_Rewrite_exception {
    when HTTP_REQUEST {

if {$GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0} {

	switch $GRP_NonPROD_80_GLOBAL_poolName {

    "grpstarWebPool" - "grpdemoWebPool" - "grpsuptWebPool" - "grpprojWebPool" - "grpdemodmzWebPool" - "grpuatWebPool"
	{	
        if  { ([HTTP::uri] equals "/") } {
	    	HTTP::uri "/OA_HTML/AppsLogin"    
            } 
	}

    }
}	
}
}
ltm rule /Common/GRP_NonPROD_80_Rewrite_grpdemo {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpdemo_80_request_uri
	{
	}
	set static::grpdemo_80_request_host
	{
	}
	set static::grpdemo_80_request_referer
	{
	}
	set static::grpdemo_80_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpdemo_80_response_setCookie
	{
	}
	set static::grpdemo_80_response_location
	{
		#"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		#"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		#"http://relweb1.dubai.gov.ae:8888====http://grpdemo.dubai.gov.ae:8888"	
	}
	set static::grpdemo_80_response_contentLocation
	{
	}
	set static::grpdemo_80_response_body
	{
		#"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		#"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		#"\"rapp\"====\"grpdemoapp\""
		#"\"relapp1.dubai.gov.ae\"====\"grpdemoapp.dubai.gov.ae\""
		#"http://relweb1.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
		#"\"relapp1\"====\"grpdemoapp\""
		#"\"9001\"====\"65001\""	
	}
}

when HTTP_REQUEST
{

	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpdemo1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	log local0. "entered req"
	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpdemo_80_request_uri] > 0}
	{
	set grpdemo_80_request_val [HTTP::uri]
	foreach grpdemo_80_request_rewriteRecord $static::grpdemo_80_request_uri
	{
		set grpdemo_80_request_find [getfield $grpdemo_80_request_rewriteRecord "====" 1]
		set grpdemo_80_request_replace [getfield $grpdemo_80_request_rewriteRecord "====" 2]
		if {$grpdemo_80_request_replace == "nothing"}
		{
			set grpdemo_80_request_replace ""
		}

		regsub -all $grpdemo_80_request_find $grpdemo_80_request_val $grpdemo_80_request_replace grpdemo_80_request_val
	}
	HTTP::uri $grpdemo_80_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpdemo_80_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpdemo_80_request_val [HTTP::host]
		foreach grpdemo_80_request_rewriteRecord $static::grpdemo_80_request_host
		{
			set grpdemo_80_request_find [getfield $grpdemo_80_request_rewriteRecord "====" 1]
			set grpdemo_80_request_replace [getfield $grpdemo_80_request_rewriteRecord "====" 2]

			if {$grpdemo_80_request_replace == "nothing"}
			{
				set grpdemo_80_request_replace ""
			}
			regsub -all $grpdemo_80_request_find $grpdemo_80_request_val $grpdemo_80_request_replace grpdemo_80_request_val
		}

		HTTP::header replace Host $grpdemo_80_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpdemo_80_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpdemo_80_request_val [HTTP::header value Referer]
		foreach grpdemo_80_request_rewriteRecord $static::grpdemo_80_request_referer
		{
			set grpdemo_80_request_find [getfield $grpdemo_80_request_rewriteRecord "====" 1]
			set grpdemo_80_request_replace [getfield $grpdemo_80_request_rewriteRecord "====" 2]

			if {$grpdemo_80_request_replace == "nothing"}
			{
				set grpdemo_80_request_replace ""
			}

			regsub -all $grpdemo_80_request_find $grpdemo_80_request_val $grpdemo_80_request_replace grpdemo_80_request_val
		}
		HTTP::header replace Referer $grpdemo_80_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpdemo_80_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpdemo_80_request_val [HTTP::header value Cookie]
		foreach grpdemo_80_request_rewriteRecord $static::grpdemo_80_request_cookie
		{
			set grpdemo_80_request_find [getfield $grpdemo_80_request_rewriteRecord "====" 1]
			set grpdemo_80_request_replace [getfield $grpdemo_80_request_rewriteRecord "====" 2]

			if {$grpdemo_80_request_replace == "nothing"}
			{
				set grpdemo_80_request_replace ""
			}

			regsub -all $grpdemo_80_request_find $grpdemo_80_request_val $grpdemo_80_request_replace grpdemo_80_request_val
		}
		HTTP::header replace Cookie $grpdemo_80_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpdemo1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpdemo_80_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpdemo_80_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpdemo_80_response_val $grpdemo_80_response_val_list
		{
			foreach grpdemo_80_response_rewriteRecord $static::grpdemo_80_response_setCookie
			{
				set grpdemo_80_response_find [getfield $grpdemo_80_response_rewriteRecord "====" 1]
				set grpdemo_80_response_replace [getfield $grpdemo_80_response_rewriteRecord "====" 2]

				if {$grpdemo_80_response_replace == "nothing"}
				{
					set grpdemo_80_response_replace ""
				}
				regsub -all $grpdemo_80_response_find $grpdemo_80_response_val $grpdemo_80_response_replace grpdemo_80_response_val
			}
			HTTP::header insert Set-Cookie $grpdemo_80_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpdemo_80_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpdemo_80_response_val [HTTP::header value Location]

		foreach grpdemo_80_response_rewriteRecord $static::grpdemo_80_response_location
		{
			set grpdemo_80_response_find [getfield $grpdemo_80_response_rewriteRecord "====" 1]
			set grpdemo_80_response_replace [getfield $grpdemo_80_response_rewriteRecord "====" 2]
			if {$grpdemo_80_response_replace == "nothing"}
			{
				set grpdemo_80_response_replace ""
			}

			regsub -all $grpdemo_80_response_find $grpdemo_80_response_val $grpdemo_80_response_replace grpdemo_80_response_val
		}
		HTTP::header replace Location $grpdemo_80_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpdemo_80_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpdemo_80_response_val [HTTP::header value Content-Location]

		foreach grpdemo_80_response_rewriteRecord $static::grpdemo_80_response_contentLocation
		{
			set grpdemo_80_response_find [getfield $grpdemo_80_response_rewriteRecord "====" 1]
			set grpdemo_80_response_replace [getfield $grpdemo_80_response_rewriteRecord "====" 2]
			if {$grpdemo_80_response_replace == "nothing"}
			{
				set grpdemo_80_response_replace ""
			}

			regsub -all $grpdemo_80_response_find $grpdemo_80_response_val $grpdemo_80_response_replace grpdemo_80_response_val
		}
		HTTP::header replace Content-Location $grpdemo_80_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpdemo_80_response_body] > 0}
	{
	set expression ""
	foreach grpdemo_80_response_rewriteRecord $static::grpdemo_80_response_body
	{
		set grpdemo_80_response_find [getfield $grpdemo_80_response_rewriteRecord "====" 1]
		set grpdemo_80_response_replace [getfield $grpdemo_80_response_rewriteRecord "====" 2]
		if {$grpdemo_80_response_replace == "nothing"}
		{
			set grpdemo_80_response_replace ""
		}

		set expression "$expression@$grpdemo_80_response_find@$grpdemo_80_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
	#	log local0. "rewrite exec"
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/GRP_NonPROD_80_Rewrite_grpdev {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpdev_80_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::grpdev_80_request_host
	{
	} 
	set static::grpdev_80_request_referer
	{
	}
	set static::grpdev_80_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpdev_80_response_setCookie
	{
	}
	set static::grpdev_80_response_location
	{
	}
	set static::grpdev_80_response_contentLocation
	{
	}
	set static::grpdev_80_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpdev" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0} {
	STREAM::disable
	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::grpdev_80_request_uri] > 0}
	{
	set grpdev_80_request_val [HTTP::uri]
	foreach grpdev_80_request_rewriteRecord $static::grpdev_80_request_uri
	{
		set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
		set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]
		if {$grpdev_80_request_replace == "nothing"}
		{
			set grpdev_80_request_replace ""
		}

		regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
	}
	if { [catch {HTTP::uri $grpdev_80_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpdev_80_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpdev_80_request_val [HTTP::host]
		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_request_host
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]

			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}
			regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
		}
		if { [catch {HTTP::header replace Host $grpdev_80_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpdev_80_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpdev_80_request_val [HTTP::header value Referer]
		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_request_referer
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]

			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}

			regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
		}

		if { [catch {HTTP::header replace Referer $grpdev_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpdev_80_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpdev_80_request_val [HTTP::header value Cookie]
		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_request_cookie
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]

			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}

			regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
		}
		if { [catch {HTTP::header replace Cookie $grpdev_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpdev1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpdev_80_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpdev_80_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpdev_80_request_val $grpdev_80_request_val_list
		{
			foreach grpdev_80_request_rewriteRecord $static::grpdev_80_response_setCookie
			{
				set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
				set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]

				if {$grpdev_80_request_replace == "nothing"}
				{
					set grpdev_80_request_replace ""
				}
				regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $grpdev_80_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpdev_80_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpdev_80_request_val [HTTP::header value Location]

		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_response_location
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]
			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}

			regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
		}
		if { [catch {HTTP::header replace Location $grpdev_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpdev_80_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpdev_80_request_val [HTTP::header value Content-Location]

		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_response_contentLocation
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]
			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}

			regsub -all $grpdev_80_request_find $grpdev_80_request_val $grpdev_80_request_replace grpdev_80_request_val
		}
		if { [catch {HTTP::header replace Content-Location $grpdev_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpdev_80_response_body] > 0}
	{
		set grpdev_80_expression ""
		foreach grpdev_80_request_rewriteRecord $static::grpdev_80_response_body
		{
			set grpdev_80_request_find [getfield $grpdev_80_request_rewriteRecord "====" 1]
			set grpdev_80_request_replace [getfield $grpdev_80_request_rewriteRecord "====" 2]
			if {$grpdev_80_request_replace == "nothing"}
			{
				set grpdev_80_request_replace ""
			}

			set grpdev_80_expression "$grpdev_80_expression@$grpdev_80_request_find@$grpdev_80_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $grpdev_80_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }
}
}
ltm rule /Common/GRP_NonPROD_80_Rewrite_grpsupt {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpsupt_80_request_uri
	{
	    "^/\$====/OA_HTML/AppsLogin" 	
	}
	set static::grpsupt_80_request_host
	{
	}
	set static::grpsupt_80_request_referer
	{
	}
	set static::grpsupt_80_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpsupt_80_response_setCookie
	{
	}
	set static::grpsupt_80_response_location
	{
		"http://relapp1.dubai.gov.ae====http://grpsupt.dubai.gov.ae"
	}
	set static::grpsupt_80_response_contentLocation
	{
	}
	set static::grpsupt_80_response_body
	{
		#"http://relapp1.dubai.gov.ae====http://grpsupt.dubai.gov.ae"	
	}
}

when HTTP_REQUEST
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpsupt1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpsupt_80_request_uri] > 0}
	{
	set grpsupt_80_request_val [HTTP::uri]
	foreach grpsupt_80_request_rewriteRecord $static::grpsupt_80_request_uri
	{
		set grpsupt_80_request_find [getfield $grpsupt_80_request_rewriteRecord "====" 1]
		set grpsupt_80_request_replace [getfield $grpsupt_80_request_rewriteRecord "====" 2]
		if {$grpsupt_80_request_replace == "nothing"}
		{
			set grpsupt_80_request_replace ""
		}

		regsub -all $grpsupt_80_request_find $grpsupt_80_request_val $grpsupt_80_request_replace grpsupt_80_request_val
	}
	HTTP::uri $grpsupt_80_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpsupt_80_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpsupt_80_request_val [HTTP::host]
		foreach grpsupt_80_request_rewriteRecord $static::grpsupt_80_request_host
		{
			set grpsupt_80_request_find [getfield $grpsupt_80_request_rewriteRecord "====" 1]
			set grpsupt_80_request_replace [getfield $grpsupt_80_request_rewriteRecord "====" 2]

			if {$grpsupt_80_request_replace == "nothing"}
			{
				set grpsupt_80_request_replace ""
			}
			regsub -all $grpsupt_80_request_find $grpsupt_80_request_val $grpsupt_80_request_replace grpsupt_80_request_val
		}

		HTTP::header replace Host $grpsupt_80_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpsupt_80_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpsupt_80_request_val [HTTP::header value Referer]
		foreach grpsupt_80_request_rewriteRecord $static::grpsupt_80_request_referer
		{
			set grpsupt_80_request_find [getfield $grpsupt_80_request_rewriteRecord "====" 1]
			set grpsupt_80_request_replace [getfield $grpsupt_80_request_rewriteRecord "====" 2]

			if {$grpsupt_80_request_replace == "nothing"}
			{
				set grpsupt_80_request_replace ""
			}

			regsub -all $grpsupt_80_request_find $grpsupt_80_request_val $grpsupt_80_request_replace grpsupt_80_request_val
		}
		HTTP::header replace Referer $grpsupt_80_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpsupt_80_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpsupt_80_request_val [HTTP::header value Cookie]
		foreach grpsupt_80_request_rewriteRecord $static::grpsupt_80_request_cookie
		{
			set grpsupt_80_request_find [getfield $grpsupt_80_request_rewriteRecord "====" 1]
			set grpsupt_80_request_replace [getfield $grpsupt_80_request_rewriteRecord "====" 2]

			if {$grpsupt_80_request_replace == "nothing"}
			{
				set grpsupt_80_request_replace ""
			}

			regsub -all $grpsupt_80_request_find $grpsupt_80_request_val $grpsupt_80_request_replace grpsupt_80_request_val
		}
		HTTP::header replace Cookie $grpsupt_80_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpsupt1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{

	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpsupt_80_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpsupt_80_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpsupt_80_response_val $grpsupt_80_response_val_list
		{
			foreach grpsupt_80_response_rewriteRecord $static::grpsupt_80_response_setCookie
			{
				set grpsupt_80_response_find [getfield $grpsupt_80_response_rewriteRecord "====" 1]
				set grpsupt_80_response_replace [getfield $grpsupt_80_response_rewriteRecord "====" 2]

				if {$grpsupt_80_response_replace == "nothing"}
				{
					set grpsupt_80_response_replace ""
				}
				regsub -all $grpsupt_80_response_find $grpsupt_80_response_val $grpsupt_80_response_replace grpsupt_80_response_val
			}
			HTTP::header insert Set-Cookie $grpsupt_80_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpsupt_80_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpsupt_80_response_val [HTTP::header value Location]

		foreach grpsupt_80_response_rewriteRecord $static::grpsupt_80_response_location
		{
			set grpsupt_80_response_find [getfield $grpsupt_80_response_rewriteRecord "====" 1]
			set grpsupt_80_response_replace [getfield $grpsupt_80_response_rewriteRecord "====" 2]
			if {$grpsupt_80_response_replace == "nothing"}
			{
				set grpsupt_80_response_replace ""
			}

			regsub -all $grpsupt_80_response_find $grpsupt_80_response_val $grpsupt_80_response_replace grpsupt_80_response_val
		}
		HTTP::header replace Location $grpsupt_80_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpsupt_80_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpsupt_80_response_val [HTTP::header value Content-Location]

		foreach grpsupt_80_response_rewriteRecord $static::grpsupt_80_response_contentLocation
		{
			set grpsupt_80_response_find [getfield $grpsupt_80_response_rewriteRecord "====" 1]
			set grpsupt_80_response_replace [getfield $grpsupt_80_response_rewriteRecord "====" 2]
			if {$grpsupt_80_response_replace == "nothing"}
			{
				set grpsupt_80_response_replace ""
			}

			regsub -all $grpsupt_80_response_find $grpsupt_80_response_val $grpsupt_80_response_replace grpsupt_80_response_val
		}
		HTTP::header replace Content-Location $grpsupt_80_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpsupt1" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{
	if {[llength $static::grpsupt_80_response_body] > 0}
	{
	set expression ""
	foreach grpsupt_80_response_rewriteRecord $static::grpsupt_80_response_body
	{
		set grpsupt_80_response_find [getfield $grpsupt_80_response_rewriteRecord "====" 1]
		set grpsupt_80_response_replace [getfield $grpsupt_80_response_rewriteRecord "====" 2]
		if {$grpsupt_80_response_replace == "nothing"}
		{
			set grpsupt_80_response_replace ""
		}

		set expression "$expression@$grpsupt_80_response_find@$grpsupt_80_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
    }
}
}
ltm rule /Common/GRP_NonPROD_80_Rewrite_grpuat {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpuat_80_request_uri
	{
	    "^/\$====/OA_HTML/AppsLogin" 	
	}
	set static::grpuat_80_request_host
	{
	}
	set static::grpuat_80_request_referer
	{
	}
	set static::grpuat_80_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpuat_80_response_setCookie
	{
	}
	set static::grpuat_80_response_location
	{
		#"http://relapp1.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		#"http://grpuat.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		"http://dgruapp1.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae:80====http://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
	}
	set static::grpuat_80_response_contentLocation
	{
		#"http://grpuat.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		"http://dgruapp1.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae:80====http://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
	}
	set static::grpuat_80_response_body
	{
		#"http://relapp1.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		#"http://grpuat.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		"http://dgruapp1.dubai.gov.ae====http://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae:80====http://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpuat" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpuat_80_request_uri] > 0}
	{
	set grpuat_80_request_val [HTTP::uri]
	foreach grpuat_80_request_rewriteRecord $static::grpuat_80_request_uri
	{
		set grpuat_80_request_find [getfield $grpuat_80_request_rewriteRecord "====" 1]
		set grpuat_80_request_replace [getfield $grpuat_80_request_rewriteRecord "====" 2]
		if {$grpuat_80_request_replace == "nothing"}
		{
			set grpuat_80_request_replace ""
		}

		regsub -all $grpuat_80_request_find $grpuat_80_request_val $grpuat_80_request_replace grpuat_80_request_val
	}
	HTTP::uri $grpuat_80_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpuat_80_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpuat_80_request_val [HTTP::host]
		foreach grpuat_80_request_rewriteRecord $static::grpuat_80_request_host
		{
			set grpuat_80_request_find [getfield $grpuat_80_request_rewriteRecord "====" 1]
			set grpuat_80_request_replace [getfield $grpuat_80_request_rewriteRecord "====" 2]

			if {$grpuat_80_request_replace == "nothing"}
			{
				set grpuat_80_request_replace ""
			}
			regsub -all $grpuat_80_request_find $grpuat_80_request_val $grpuat_80_request_replace grpuat_80_request_val
		}

		HTTP::header replace Host $grpuat_80_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpuat_80_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpuat_80_request_val [HTTP::header value Referer]
		foreach grpuat_80_request_rewriteRecord $static::grpuat_80_request_referer
		{
			set grpuat_80_request_find [getfield $grpuat_80_request_rewriteRecord "====" 1]
			set grpuat_80_request_replace [getfield $grpuat_80_request_rewriteRecord "====" 2]

			if {$grpuat_80_request_replace == "nothing"}
			{
				set grpuat_80_request_replace ""
			}

			regsub -all $grpuat_80_request_find $grpuat_80_request_val $grpuat_80_request_replace grpuat_80_request_val
		}
		HTTP::header replace Referer $grpuat_80_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpuat_80_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpuat_80_request_val [HTTP::header value Cookie]
		foreach grpuat_80_request_rewriteRecord $static::grpuat_80_request_cookie
		{
			set grpuat_80_request_find [getfield $grpuat_80_request_rewriteRecord "====" 1]
			set grpuat_80_request_replace [getfield $grpuat_80_request_rewriteRecord "====" 2]

			if {$grpuat_80_request_replace == "nothing"}
			{
				set grpuat_80_request_replace ""
			}

			regsub -all $grpuat_80_request_find $grpuat_80_request_val $grpuat_80_request_replace grpuat_80_request_val
		}
		HTTP::header replace Cookie $grpuat_80_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpuat" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{

	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpuat_80_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpuat_80_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpuat_80_response_val $grpuat_80_response_val_list
		{
			foreach grpuat_80_response_rewriteRecord $static::grpuat_80_response_setCookie
			{
				set grpuat_80_response_find [getfield $grpuat_80_response_rewriteRecord "====" 1]
				set grpuat_80_response_replace [getfield $grpuat_80_response_rewriteRecord "====" 2]

				if {$grpuat_80_response_replace == "nothing"}
				{
					set grpuat_80_response_replace ""
				}
				regsub -all $grpuat_80_response_find $grpuat_80_response_val $grpuat_80_response_replace grpuat_80_response_val
			}
			HTTP::header insert Set-Cookie $grpuat_80_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpuat_80_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpuat_80_response_val [HTTP::header value Location]

		foreach grpuat_80_response_rewriteRecord $static::grpuat_80_response_location
		{
			set grpuat_80_response_find [getfield $grpuat_80_response_rewriteRecord "====" 1]
			set grpuat_80_response_replace [getfield $grpuat_80_response_rewriteRecord "====" 2]
			if {$grpuat_80_response_replace == "nothing"}
			{
				set grpuat_80_response_replace ""
			}

			regsub -all $grpuat_80_response_find $grpuat_80_response_val $grpuat_80_response_replace grpuat_80_response_val
		}
		HTTP::header replace Location $grpuat_80_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpuat_80_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpuat_80_response_val [HTTP::header value Content-Location]

		foreach grpuat_80_response_rewriteRecord $static::grpuat_80_response_contentLocation
		{
			set grpuat_80_response_find [getfield $grpuat_80_response_rewriteRecord "====" 1]
			set grpuat_80_response_replace [getfield $grpuat_80_response_rewriteRecord "====" 2]
			if {$grpuat_80_response_replace == "nothing"}
			{
				set grpuat_80_response_replace ""
			}

			regsub -all $grpuat_80_response_find $grpuat_80_response_val $grpuat_80_response_replace grpuat_80_response_val
		}
		HTTP::header replace Content-Location $grpuat_80_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {$GRP_NonPROD_80_GLOBAL_hostName_index == "grpuat" and $GRP_NonPROD_80_GLOBAL_GRP_BREAK_ALL == 0}
	{
	if {[llength $static::grpuat_80_response_body] > 0}
	{
	set expression ""
	foreach grpuat_80_response_rewriteRecord $static::grpuat_80_response_body
	{
		set grpuat_80_response_find [getfield $grpuat_80_response_rewriteRecord "====" 1]
		set grpuat_80_response_replace [getfield $grpuat_80_response_rewriteRecord "====" 2]
		if {$grpuat_80_response_replace == "nothing"}
		{
			set grpuat_80_response_replace ""
		}

		set expression "$expression@$grpuat_80_response_find@$grpuat_80_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
    }
}
}
ltm rule /Common/GRP_NonPROD_443_Global_Variables {
    when RULE_INIT
{
	set static::GRP_NonPROD_443_poolIdentifeir "WebPool"
	set static::GRP_REL_SUPT_Src "ACLgrpcrpa"
	set static::GRP_REL_DEMO_Src "ACLgrpdemo"
	set static::GRP_REL_UAT_Src "ACLgrpuat"
	set static::GRP_REL_PROJ_Src "ACLgrpproj"
	set static::GRP_DEV_DSGN_Src "ACLgrpdsgn"
	set static::GRP_NonPROD_443_ME "GRP_NonPROD_Maintenance_Exempt"
}

when HTTP_REQUEST
{
	set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 0
	set GRP_NonPROD_443_GLOBAL_hostName ""
	set GRP_NonPROD_443_GLOBAL_hostName_index ""
	set GRP_NonPROD_443_GLOBAL_poolName ""
	set GRP_NonPROD_443_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] {
	"grpuat.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"www.grpuat.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		HTTP::redirect "https://grpuat.dubai.gov.ae"
    }
    "grpsupt.dubai.gov.ae" - "www.grpsupt.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpdemo.dubai.gov.ae" - "www.grpdemo.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]"
		#if { [HTTP::uri] starts_with "/OA_HTML/RF.jsp?function_id=28599" } {
		#	set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		#	HTTP::redirect "https://idm.dubai.gov.ae/itim/self/PasswordChange.do"
		#}
    }
	"grpstar.dubai.gov.ae" - "www.grpstar.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpproj.dubai.gov.ae" - "www.grpproj.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"grpdev.dubai.gov.ae" - "www.grpdev.dubai.gov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	default
	{
		#log local0. "Access blocked for Host: [HTTP::host]"
		set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		drop
    }
    }
}
}
ltm rule /Common/GRP_NonPROD_443_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." }
	{
   		set grp_nonprod_443_host [HTTP::host]
		regsub -all -nocase "www\." $grp_nonprod_443_host "" grp_nonprod_443_host
		HTTP::respond 302 Location "https://$grp_nonprod_443_host[HTTP::uri]"
		set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
	}

}
}
ltm rule /Common/GRP_NonPROD_443_Pool_Select {
    when RULE_INIT
{
set GRP_NonPROD_443_Sorry "<html><head></head><body><p>Access Denied...!!! For assistance contact DSG Support Team."
}

when HTTP_REQUEST
{
if { $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0 } {

	set GRP_NonPROD_443_GLOBAL_hostName [HTTP::host]
	set GRP_NonPROD_443_GLOBAL_URI [HTTP::uri]

	if {$GRP_NonPROD_443_GLOBAL_hostName contains ":"}
	{
		set GRP_NonPROD_443_GLOBAL_hostName [getfield $GRP_NonPROD_443_GLOBAL_hostName ":" 1]
	}

	set GRP_NonPROD_443_GLOBAL_hostName_index [substr $GRP_NonPROD_443_GLOBAL_hostName 0 "."]

	set GRP_NonPROD_443_GLOBAL_poolName "$GRP_NonPROD_443_GLOBAL_hostName_index$static::GRP_NonPROD_443_poolIdentifeir"

	#--------------------------------
	# ACL FUNCTIONS
	#Src IP based Restriction handling

	set SrcIP_NonPROD_443_Restriction 0

	switch $GRP_NonPROD_443_GLOBAL_poolName
	{
		"grpsuptWebPool"
		{
			if {not ([matchclass $static::GRP_REL_SUPT_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP SUPT Instance"
			set SrcIP_NonPROD_443_Restriction 1
		    }
		}
		"grpdemoWebPool"
		{
			if {not ([matchclass $static::GRP_REL_DEMO_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP DEMO Instance"
			set SrcIP_NonPROD_443_Restriction 1
		    }
		}
		"grpuatWebPool"
		{
			if {not ([matchclass $static::GRP_REL_UAT_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP STAR Instance"
			set SrcIP_NonPROD_443_Restriction 1
		    }
		}
		"grpprojWebPool"
		{
			if {not ([matchclass $static::GRP_REL_PROJ_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP UAT Instance"
			set SrcIP_NonPROD_443_Restriction 1
		    }
		}
		"grpdsgnWebPool"
		{
			if {not ([matchclass $static::GRP_DEV_DSGN_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP DSGN Instance"
			set SrcIP_NonPROD_443_Restriction 1
		    }
		}
	}

	#--------------------------------

	switch -glob  $GRP_NonPROD_443_GLOBAL_URI
	{
		"/forms/frmservlet?appletmode*"
		{
		}			
		"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
		{			
			set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		}
		default
		{
		}
	}

	if {$SrcIP_NonPROD_443_Restriction == 1}
	{
		#log local0. "IP: [IP::client_addr] is Blocked"
		set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		HTTP::respond 200 content $::GRP_NonPROD_443_Sorry
		drop
	}
	else
	{
		pool $GRP_NonPROD_443_GLOBAL_poolName
		persist cookie insert NP$GRP_NonPROD_443_GLOBAL_hostName_index 0
	    #log local0. "POOL: $GRP_NonPROD_443_GLOBAL_poolName"
	}

}	
}
}
ltm rule /Common/GRP_NonPROD_443_Pools_Maintenance {
    when RULE_INIT
{
	set static::flag_maintenance_443_grpsupt 0
	set static::flag_maintenance_443_grpdemo 0
	set static::flag_maintenance_443_grpuat 0
	set static::flag_maintenance_443_grpproj 0
	set static::flag_maintenance_443_grpdsgn 0
}

when HTTP_REQUEST
{
	set flag_443_goToMaintenance 0

	switch $GRP_NonPROD_443_GLOBAL_poolName
	{
		"grpsuptWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_443_ME equals [IP::client_addr]]) and $static::flag_maintenance_443_grpsupt == 1}
			{
				set flag_443_goToMaintenance 1
			}
		}
		"grpdemoWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_443_ME equals [IP::client_addr]]) and $static::flag_maintenance_443_grpdemo == 1}
			{
				set flag_443_goToMaintenance 1
			}
		}
		"grpuatWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_443_ME equals [IP::client_addr]]) and $static::flag_maintenance_443_grpuat == 1}
			{
				set flag_443_goToMaintenance 1
			}
		}
		"grpprojWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_443_ME equals [IP::client_addr]]) and $static::flag_maintenance_443_grpproj == 1}
			{
				set flag_443_goToMaintenance 1
			}
		}
		"grpdsgnWebPool"
		{
			if {not ([matchclass $static::GRP_NonPROD_443_ME equals [IP::client_addr]]) and $static::flag_maintenance_443_grpdsgn == 1}
			{
				set flag_443_goToMaintenance 1
			}
		}
	}

	if {$flag_443_goToMaintenance == 1}
	{
		set GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL 1
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace Host "www.dsg.gov.ae"
		HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_$GRP_NonPROD_443_GLOBAL_hostName_index 0
	}
}
}
ltm rule /Common/GRP_NonPROD_443_Rewrite_grpdemo {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpdemo_443_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"https%3A%2F%2Fgrpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
	}
	set static::grpdemo_443_request_host
	{
	}
	set static::grpdemo_443_request_referer
	{
	}
	set static::grpdemo_443_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpdemo_443_response_setCookie
	{
	}
	set static::grpdemo_443_response_location
	{
		"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::grpdemo_443_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::grpdemo_443_response_body
	{
		"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{

	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpdemo" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	log local0. "entered req"
	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpdemo_443_request_uri] > 0}
	{
	set grpdemo_443_request_val [HTTP::uri]
	foreach grpdemo_443_request_rewriteRecord $static::grpdemo_443_request_uri
	{
		set grpdemo_443_request_find [getfield $grpdemo_443_request_rewriteRecord "====" 1]
		set grpdemo_443_request_replace [getfield $grpdemo_443_request_rewriteRecord "====" 2]
		if {$grpdemo_443_request_replace == "nothing"}
		{
			set grpdemo_443_request_replace ""
		}

		regsub -all $grpdemo_443_request_find $grpdemo_443_request_val $grpdemo_443_request_replace grpdemo_443_request_val
	}
	HTTP::uri $grpdemo_443_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpdemo_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpdemo_443_request_val [HTTP::host]
		foreach grpdemo_443_request_rewriteRecord $static::grpdemo_443_request_host
		{
			set grpdemo_443_request_find [getfield $grpdemo_443_request_rewriteRecord "====" 1]
			set grpdemo_443_request_replace [getfield $grpdemo_443_request_rewriteRecord "====" 2]

			if {$grpdemo_443_request_replace == "nothing"}
			{
				set grpdemo_443_request_replace ""
			}
			regsub -all $grpdemo_443_request_find $grpdemo_443_request_val $grpdemo_443_request_replace grpdemo_443_request_val
		}

		HTTP::header replace Host $grpdemo_443_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpdemo_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpdemo_443_request_val [HTTP::header value Referer]
		foreach grpdemo_443_request_rewriteRecord $static::grpdemo_443_request_referer
		{
			set grpdemo_443_request_find [getfield $grpdemo_443_request_rewriteRecord "====" 1]
			set grpdemo_443_request_replace [getfield $grpdemo_443_request_rewriteRecord "====" 2]

			if {$grpdemo_443_request_replace == "nothing"}
			{
				set grpdemo_443_request_replace ""
			}

			regsub -all $grpdemo_443_request_find $grpdemo_443_request_val $grpdemo_443_request_replace grpdemo_443_request_val
		}
		HTTP::header replace Referer $grpdemo_443_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpdemo_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpdemo_443_request_val [HTTP::header value Cookie]
		foreach grpdemo_443_request_rewriteRecord $static::grpdemo_443_request_cookie
		{
			set grpdemo_443_request_find [getfield $grpdemo_443_request_rewriteRecord "====" 1]
			set grpdemo_443_request_replace [getfield $grpdemo_443_request_rewriteRecord "====" 2]

			if {$grpdemo_443_request_replace == "nothing"}
			{
				set grpdemo_443_request_replace ""
			}

			regsub -all $grpdemo_443_request_find $grpdemo_443_request_val $grpdemo_443_request_replace grpdemo_443_request_val
		}
		HTTP::header replace Cookie $grpdemo_443_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpdemo" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpdemo_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpdemo_443_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpdemo_443_response_val $grpdemo_443_response_val_list
		{
			foreach grpdemo_443_response_rewriteRecord $static::grpdemo_443_response_setCookie
			{
				set grpdemo_443_response_find [getfield $grpdemo_443_response_rewriteRecord "====" 1]
				set grpdemo_443_response_replace [getfield $grpdemo_443_response_rewriteRecord "====" 2]

				if {$grpdemo_443_response_replace == "nothing"}
				{
					set grpdemo_443_response_replace ""
				}
				regsub -all $grpdemo_443_response_find $grpdemo_443_response_val $grpdemo_443_response_replace grpdemo_443_response_val
			}
			HTTP::header insert Set-Cookie $grpdemo_443_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpdemo_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpdemo_443_response_val [HTTP::header value Location]

		foreach grpdemo_443_response_rewriteRecord $static::grpdemo_443_response_location
		{
			set grpdemo_443_response_find [getfield $grpdemo_443_response_rewriteRecord "====" 1]
			set grpdemo_443_response_replace [getfield $grpdemo_443_response_rewriteRecord "====" 2]
			if {$grpdemo_443_response_replace == "nothing"}
			{
				set grpdemo_443_response_replace ""
			}

			regsub -all $grpdemo_443_response_find $grpdemo_443_response_val $grpdemo_443_response_replace grpdemo_443_response_val
		}
		HTTP::header replace Location $grpdemo_443_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpdemo_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpdemo_443_response_val [HTTP::header value Content-Location]

		foreach grpdemo_443_response_rewriteRecord $static::grpdemo_443_response_contentLocation
		{
			set grpdemo_443_response_find [getfield $grpdemo_443_response_rewriteRecord "====" 1]
			set grpdemo_443_response_replace [getfield $grpdemo_443_response_rewriteRecord "====" 2]
			if {$grpdemo_443_response_replace == "nothing"}
			{
				set grpdemo_443_response_replace ""
			}

			regsub -all $grpdemo_443_response_find $grpdemo_443_response_val $grpdemo_443_response_replace grpdemo_443_response_val
		}
		HTTP::header replace Content-Location $grpdemo_443_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpdemo_443_response_body] > 0}
	{
	set expression ""
	foreach grpdemo_443_response_rewriteRecord $static::grpdemo_443_response_body
	{
		set grpdemo_443_response_find [getfield $grpdemo_443_response_rewriteRecord "====" 1]
		set grpdemo_443_response_replace [getfield $grpdemo_443_response_rewriteRecord "====" 2]
		if {$grpdemo_443_response_replace == "nothing"}
		{
			set grpdemo_443_response_replace ""
		}

		set expression "$expression@$grpdemo_443_response_find@$grpdemo_443_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
	#	log local0. "rewrite exec"
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/GRP_NonPROD_443_Rewrite_grpdev {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpdev_443_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::grpdev_443_request_host
	{
	} 
	set static::grpdev_443_request_referer
	{
	}
	set static::grpdev_443_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpdev_443_response_setCookie
	{
	}
	set static::grpdev_443_response_location
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
	set static::grpdev_443_response_contentLocation
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
	set static::grpdev_443_response_body
	{
		"http://grpdev.dubai.gov.ae====https://grpdev.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpdev" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0} {
	STREAM::disable
	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::grpdev_443_request_uri] > 0}
	{
	set grpdev_443_request_val [HTTP::uri]
	foreach grpdev_443_request_rewriteRecord $static::grpdev_443_request_uri
	{
		set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
		set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]
		if {$grpdev_443_request_replace == "nothing"}
		{
			set grpdev_443_request_replace ""
		}

		regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
	}
	if { [catch {HTTP::uri $grpdev_443_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpdev_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpdev_443_request_val [HTTP::host]
		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_request_host
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]

			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}
			regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
		}
		if { [catch {HTTP::header replace Host $grpdev_443_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpdev_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpdev_443_request_val [HTTP::header value Referer]
		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_request_referer
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]

			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}

			regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
		}

		if { [catch {HTTP::header replace Referer $grpdev_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpdev_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpdev_443_request_val [HTTP::header value Cookie]
		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_request_cookie
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]

			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}

			regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
		}
		if { [catch {HTTP::header replace Cookie $grpdev_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpdev" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpdev_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpdev_443_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpdev_443_request_val $grpdev_443_request_val_list
		{
			foreach grpdev_443_request_rewriteRecord $static::grpdev_443_response_setCookie
			{
				set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
				set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]

				if {$grpdev_443_request_replace == "nothing"}
				{
					set grpdev_443_request_replace ""
				}
				regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $grpdev_443_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpdev_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpdev_443_request_val [HTTP::header value Location]

		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_response_location
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]
			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}

			regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
		}
		if { [catch {HTTP::header replace Location $grpdev_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpdev_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpdev_443_request_val [HTTP::header value Content-Location]

		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_response_contentLocation
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]
			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}

			regsub -all $grpdev_443_request_find $grpdev_443_request_val $grpdev_443_request_replace grpdev_443_request_val
		}
		if { [catch {HTTP::header replace Content-Location $grpdev_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpdev_443_response_body] > 0}
	{
		set grpdev_443_expression ""
		foreach grpdev_443_request_rewriteRecord $static::grpdev_443_response_body
		{
			set grpdev_443_request_find [getfield $grpdev_443_request_rewriteRecord "====" 1]
			set grpdev_443_request_replace [getfield $grpdev_443_request_rewriteRecord "====" 2]
			if {$grpdev_443_request_replace == "nothing"}
			{
				set grpdev_443_request_replace ""
			}

			set grpdev_443_expression "$grpdev_443_expression@$grpdev_443_request_find@$grpdev_443_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $grpdev_443_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }
}
}
ltm rule /Common/GRP_NonPROD_443_Rewrite_grpproj {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpproj_443_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"https%3A%2F%2Fgrpproj.dubai.gov.ae====http://grpproj.dubai.gov.ae"
		"https://grpproj.dubai.gov.ae====http://grpproj.dubai.gov.ae"
	}
	set static::grpproj_443_request_host
	{
	}
	set static::grpproj_443_request_referer
	{
	}
	set static::grpproj_443_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpproj_443_response_setCookie
	{
	}
	set static::grpproj_443_response_location
	{
		#"http://grpproj.dubai.gov.ae:80====https://grpproj.dubai.gov.ae"
		"http://grpproj.dubai.gov.ae====https://grpproj.dubai.gov.ae"
	}
	set static::grpproj_443_response_contentLocation
	{
	}
	set static::grpproj_443_response_body
	{
		#"http://grpproj.dubai.gov.ae:80====https://grpproj.dubai.gov.ae"
		"http://grpproj.dubai.gov.ae====https://grpproj.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{

	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpproj" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	log local0. "entered req"
	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpproj_443_request_uri] > 0}
	{
	set grpproj_443_request_val [HTTP::uri]
	foreach grpproj_443_request_rewriteRecord $static::grpproj_443_request_uri
	{
		set grpproj_443_request_find [getfield $grpproj_443_request_rewriteRecord "====" 1]
		set grpproj_443_request_replace [getfield $grpproj_443_request_rewriteRecord "====" 2]
		if {$grpproj_443_request_replace == "nothing"}
		{
			set grpproj_443_request_replace ""
		}

		regsub -all $grpproj_443_request_find $grpproj_443_request_val $grpproj_443_request_replace grpproj_443_request_val
	}
	HTTP::uri $grpproj_443_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpproj_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpproj_443_request_val [HTTP::host]
		foreach grpproj_443_request_rewriteRecord $static::grpproj_443_request_host
		{
			set grpproj_443_request_find [getfield $grpproj_443_request_rewriteRecord "====" 1]
			set grpproj_443_request_replace [getfield $grpproj_443_request_rewriteRecord "====" 2]

			if {$grpproj_443_request_replace == "nothing"}
			{
				set grpproj_443_request_replace ""
			}
			regsub -all $grpproj_443_request_find $grpproj_443_request_val $grpproj_443_request_replace grpproj_443_request_val
		}

		HTTP::header replace Host $grpproj_443_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpproj_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpproj_443_request_val [HTTP::header value Referer]
		foreach grpproj_443_request_rewriteRecord $static::grpproj_443_request_referer
		{
			set grpproj_443_request_find [getfield $grpproj_443_request_rewriteRecord "====" 1]
			set grpproj_443_request_replace [getfield $grpproj_443_request_rewriteRecord "====" 2]

			if {$grpproj_443_request_replace == "nothing"}
			{
				set grpproj_443_request_replace ""
			}

			regsub -all $grpproj_443_request_find $grpproj_443_request_val $grpproj_443_request_replace grpproj_443_request_val
		}
		HTTP::header replace Referer $grpproj_443_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpproj_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpproj_443_request_val [HTTP::header value Cookie]
		foreach grpproj_443_request_rewriteRecord $static::grpproj_443_request_cookie
		{
			set grpproj_443_request_find [getfield $grpproj_443_request_rewriteRecord "====" 1]
			set grpproj_443_request_replace [getfield $grpproj_443_request_rewriteRecord "====" 2]

			if {$grpproj_443_request_replace == "nothing"}
			{
				set grpproj_443_request_replace ""
			}

			regsub -all $grpproj_443_request_find $grpproj_443_request_val $grpproj_443_request_replace grpproj_443_request_val
		}
		HTTP::header replace Cookie $grpproj_443_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpproj" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpproj_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpproj_443_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpproj_443_response_val $grpproj_443_response_val_list
		{
			foreach grpproj_443_response_rewriteRecord $static::grpproj_443_response_setCookie
			{
				set grpproj_443_response_find [getfield $grpproj_443_response_rewriteRecord "====" 1]
				set grpproj_443_response_replace [getfield $grpproj_443_response_rewriteRecord "====" 2]

				if {$grpproj_443_response_replace == "nothing"}
				{
					set grpproj_443_response_replace ""
				}
				regsub -all $grpproj_443_response_find $grpproj_443_response_val $grpproj_443_response_replace grpproj_443_response_val
			}
			HTTP::header insert Set-Cookie $grpproj_443_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpproj_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpproj_443_response_val [HTTP::header value Location]

		foreach grpproj_443_response_rewriteRecord $static::grpproj_443_response_location
		{
			set grpproj_443_response_find [getfield $grpproj_443_response_rewriteRecord "====" 1]
			set grpproj_443_response_replace [getfield $grpproj_443_response_rewriteRecord "====" 2]
			if {$grpproj_443_response_replace == "nothing"}
			{
				set grpproj_443_response_replace ""
			}

			regsub -all $grpproj_443_response_find $grpproj_443_response_val $grpproj_443_response_replace grpproj_443_response_val
		}
		HTTP::header replace Location $grpproj_443_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpproj_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpproj_443_response_val [HTTP::header value Content-Location]

		foreach grpproj_443_response_rewriteRecord $static::grpproj_443_response_contentLocation
		{
			set grpproj_443_response_find [getfield $grpproj_443_response_rewriteRecord "====" 1]
			set grpproj_443_response_replace [getfield $grpproj_443_response_rewriteRecord "====" 2]
			if {$grpproj_443_response_replace == "nothing"}
			{
				set grpproj_443_response_replace ""
			}

			regsub -all $grpproj_443_response_find $grpproj_443_response_val $grpproj_443_response_replace grpproj_443_response_val
		}
		HTTP::header replace Content-Location $grpproj_443_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpproj_443_response_body] > 0}
	{
	set expression ""
	foreach grpproj_443_response_rewriteRecord $static::grpproj_443_response_body
	{
		set grpproj_443_response_find [getfield $grpproj_443_response_rewriteRecord "====" 1]
		set grpproj_443_response_replace [getfield $grpproj_443_response_rewriteRecord "====" 2]
		if {$grpproj_443_response_replace == "nothing"}
		{
			set grpproj_443_response_replace ""
		}

		set expression "$expression@$grpproj_443_response_find@$grpproj_443_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
	#	log local0. "rewrite exec"
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/GRP_NonPROD_443_Rewrite_grpsupt {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpsupt_443_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"https%3A%2F%2Fgrpsupt.dubai.gov.ae====http://grpsupt.dubai.gov.ae"
		#"https://grpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
	}
	set static::grpsupt_443_request_host
	{
	}
	set static::grpsupt_443_request_referer
	{
	}
	set static::grpsupt_443_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpsupt_443_response_setCookie
	{
	}
	set static::grpsupt_443_response_location
	{
		"http://grpsupt.dubai.gov.ae====https://grpsupt.dubai.gov.ae"
		"https://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
		"http://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
	}
	set static::grpsupt_443_response_contentLocation
	{
		"http://grpsupt.dubai.gov.ae====https://grpsupt.dubai.gov.ae"
		"https://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
		"http://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
	}
	set static::grpsupt_443_response_body
	{
		"http://grpsupt.dubai.gov.ae====https://grpsupt.dubai.gov.ae"
		"https://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
		"http://grpsupt.dubai.gov.ae:80====https://grpsupt.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpsupt" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpsupt_443_request_uri] > 0}
	{
	set grpsupt_443_request_val [HTTP::uri]
	foreach grpsupt_443_request_rewriteRecord $static::grpsupt_443_request_uri
	{
		set grpsupt_443_request_find [getfield $grpsupt_443_request_rewriteRecord "====" 1]
		set grpsupt_443_request_replace [getfield $grpsupt_443_request_rewriteRecord "====" 2]
		if {$grpsupt_443_request_replace == "nothing"}
		{
			set grpsupt_443_request_replace ""
		}

		regsub -all $grpsupt_443_request_find $grpsupt_443_request_val $grpsupt_443_request_replace grpsupt_443_request_val
	}
	HTTP::uri $grpsupt_443_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpsupt_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpsupt_443_request_val [HTTP::host]
		foreach grpsupt_443_request_rewriteRecord $static::grpsupt_443_request_host
		{
			set grpsupt_443_request_find [getfield $grpsupt_443_request_rewriteRecord "====" 1]
			set grpsupt_443_request_replace [getfield $grpsupt_443_request_rewriteRecord "====" 2]

			if {$grpsupt_443_request_replace == "nothing"}
			{
				set grpsupt_443_request_replace ""
			}
			regsub -all $grpsupt_443_request_find $grpsupt_443_request_val $grpsupt_443_request_replace grpsupt_443_request_val
		}

		HTTP::header replace Host $grpsupt_443_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpsupt_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpsupt_443_request_val [HTTP::header value Referer]
		foreach grpsupt_443_request_rewriteRecord $static::grpsupt_443_request_referer
		{
			set grpsupt_443_request_find [getfield $grpsupt_443_request_rewriteRecord "====" 1]
			set grpsupt_443_request_replace [getfield $grpsupt_443_request_rewriteRecord "====" 2]

			if {$grpsupt_443_request_replace == "nothing"}
			{
				set grpsupt_443_request_replace ""
			}

			regsub -all $grpsupt_443_request_find $grpsupt_443_request_val $grpsupt_443_request_replace grpsupt_443_request_val
		}
		HTTP::header replace Referer $grpsupt_443_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpsupt_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpsupt_443_request_val [HTTP::header value Cookie]
		foreach grpsupt_443_request_rewriteRecord $static::grpsupt_443_request_cookie
		{
			set grpsupt_443_request_find [getfield $grpsupt_443_request_rewriteRecord "====" 1]
			set grpsupt_443_request_replace [getfield $grpsupt_443_request_rewriteRecord "====" 2]

			if {$grpsupt_443_request_replace == "nothing"}
			{
				set grpsupt_443_request_replace ""
			}

			regsub -all $grpsupt_443_request_find $grpsupt_443_request_val $grpsupt_443_request_replace grpsupt_443_request_val
		}
		HTTP::header replace Cookie $grpsupt_443_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpsupt" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{

	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpsupt_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpsupt_443_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpsupt_443_response_val $grpsupt_443_response_val_list
		{
			foreach grpsupt_443_response_rewriteRecord $static::grpsupt_443_response_setCookie
			{
				set grpsupt_443_response_find [getfield $grpsupt_443_response_rewriteRecord "====" 1]
				set grpsupt_443_response_replace [getfield $grpsupt_443_response_rewriteRecord "====" 2]

				if {$grpsupt_443_response_replace == "nothing"}
				{
					set grpsupt_443_response_replace ""
				}
				regsub -all $grpsupt_443_response_find $grpsupt_443_response_val $grpsupt_443_response_replace grpsupt_443_response_val
			}
			HTTP::header insert Set-Cookie $grpsupt_443_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpsupt_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpsupt_443_response_val [HTTP::header value Location]

		foreach grpsupt_443_response_rewriteRecord $static::grpsupt_443_response_location
		{
			set grpsupt_443_response_find [getfield $grpsupt_443_response_rewriteRecord "====" 1]
			set grpsupt_443_response_replace [getfield $grpsupt_443_response_rewriteRecord "====" 2]
			if {$grpsupt_443_response_replace == "nothing"}
			{
				set grpsupt_443_response_replace ""
			}

			regsub -all $grpsupt_443_response_find $grpsupt_443_response_val $grpsupt_443_response_replace grpsupt_443_response_val
		}
		HTTP::header replace Location $grpsupt_443_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpsupt_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpsupt_443_response_val [HTTP::header value Content-Location]

		foreach grpsupt_443_response_rewriteRecord $static::grpsupt_443_response_contentLocation
		{
			set grpsupt_443_response_find [getfield $grpsupt_443_response_rewriteRecord "====" 1]
			set grpsupt_443_response_replace [getfield $grpsupt_443_response_rewriteRecord "====" 2]
			if {$grpsupt_443_response_replace == "nothing"}
			{
				set grpsupt_443_response_replace ""
			}

			regsub -all $grpsupt_443_response_find $grpsupt_443_response_val $grpsupt_443_response_replace grpsupt_443_response_val
		}
		HTTP::header replace Content-Location $grpsupt_443_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpsupt_443_response_body] > 0}
	{
	set expression ""
	foreach grpsupt_443_response_rewriteRecord $static::grpsupt_443_response_body
	{
		set grpsupt_443_response_find [getfield $grpsupt_443_response_rewriteRecord "====" 1]
		set grpsupt_443_response_replace [getfield $grpsupt_443_response_rewriteRecord "====" 2]
		if {$grpsupt_443_response_replace == "nothing"}
		{
			set grpsupt_443_response_replace ""
		}

		set expression "$expression@$grpsupt_443_response_find@$grpsupt_443_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/GRP_NonPROD_443_Rewrite_grpuat {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::grpstar_443_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"https://grpuat.dubai.gov.ae====http://grpuat.dubai.gov.ae"
	}
	set static::grpstar_443_request_host
	{
	}
	set static::grpstar_443_request_referer
	{
	}
	set static::grpstar_443_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::grpstar_443_response_setCookie
	{
	}
	set static::grpstar_443_response_location
	{
		"http://grpuat.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubaigov.local====https://grpuat.dubai.gov.ae"
		"http://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"

	}
	set static::grpstar_443_response_contentLocation
	{
		"http://grpuat.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubaigov.local====https://grpuat.dubai.gov.ae"
		"http://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"

	}
	set static::grpstar_443_response_body
	{
		"http://grpuat.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		"https://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubai.gov.ae====https://grpuat.dubai.gov.ae"
		#"http://dgruapp1.dubaigov.local====https://grpuat.dubai.gov.ae"
		"http://grpuat.dubai.gov.ae:80====https://grpuat.dubai.gov.ae"

	}
}

when HTTP_REQUEST
{

	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpuat" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	log local0. "entered req"
	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::grpstar_443_request_uri] > 0}
	{
	set grpstar_443_request_val [HTTP::uri]
	foreach grpstar_443_request_rewriteRecord $static::grpstar_443_request_uri
	{
		set grpstar_443_request_find [getfield $grpstar_443_request_rewriteRecord "====" 1]
		set grpstar_443_request_replace [getfield $grpstar_443_request_rewriteRecord "====" 2]
		if {$grpstar_443_request_replace == "nothing"}
		{
			set grpstar_443_request_replace ""
		}

		regsub -all $grpstar_443_request_find $grpstar_443_request_val $grpstar_443_request_replace grpstar_443_request_val
	}
	HTTP::uri $grpstar_443_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::grpstar_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set grpstar_443_request_val [HTTP::host]
		foreach grpstar_443_request_rewriteRecord $static::grpstar_443_request_host
		{
			set grpstar_443_request_find [getfield $grpstar_443_request_rewriteRecord "====" 1]
			set grpstar_443_request_replace [getfield $grpstar_443_request_rewriteRecord "====" 2]

			if {$grpstar_443_request_replace == "nothing"}
			{
				set grpstar_443_request_replace ""
			}
			regsub -all $grpstar_443_request_find $grpstar_443_request_val $grpstar_443_request_replace grpstar_443_request_val
		}

		HTTP::header replace Host $grpstar_443_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::grpstar_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set grpstar_443_request_val [HTTP::header value Referer]
		foreach grpstar_443_request_rewriteRecord $static::grpstar_443_request_referer
		{
			set grpstar_443_request_find [getfield $grpstar_443_request_rewriteRecord "====" 1]
			set grpstar_443_request_replace [getfield $grpstar_443_request_rewriteRecord "====" 2]

			if {$grpstar_443_request_replace == "nothing"}
			{
				set grpstar_443_request_replace ""
			}

			regsub -all $grpstar_443_request_find $grpstar_443_request_val $grpstar_443_request_replace grpstar_443_request_val
		}
		HTTP::header replace Referer $grpstar_443_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::grpstar_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set grpstar_443_request_val [HTTP::header value Cookie]
		foreach grpstar_443_request_rewriteRecord $static::grpstar_443_request_cookie
		{
			set grpstar_443_request_find [getfield $grpstar_443_request_rewriteRecord "====" 1]
			set grpstar_443_request_replace [getfield $grpstar_443_request_rewriteRecord "====" 2]

			if {$grpstar_443_request_replace == "nothing"}
			{
				set grpstar_443_request_replace ""
			}

			regsub -all $grpstar_443_request_find $grpstar_443_request_val $grpstar_443_request_replace grpstar_443_request_val
		}
		HTTP::header replace Cookie $grpstar_443_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$GRP_NonPROD_443_GLOBAL_hostName_index == "grpuat" and $GRP_NonPROD_443_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::grpstar_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set grpstar_443_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach grpstar_443_response_val $grpstar_443_response_val_list
		{
			foreach grpstar_443_response_rewriteRecord $static::grpstar_443_response_setCookie
			{
				set grpstar_443_response_find [getfield $grpstar_443_response_rewriteRecord "====" 1]
				set grpstar_443_response_replace [getfield $grpstar_443_response_rewriteRecord "====" 2]

				if {$grpstar_443_response_replace == "nothing"}
				{
					set grpstar_443_response_replace ""
				}
				regsub -all $grpstar_443_response_find $grpstar_443_response_val $grpstar_443_response_replace grpstar_443_response_val
			}
			HTTP::header insert Set-Cookie $grpstar_443_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::grpstar_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set grpstar_443_response_val [HTTP::header value Location]

		foreach grpstar_443_response_rewriteRecord $static::grpstar_443_response_location
		{
			set grpstar_443_response_find [getfield $grpstar_443_response_rewriteRecord "====" 1]
			set grpstar_443_response_replace [getfield $grpstar_443_response_rewriteRecord "====" 2]
			if {$grpstar_443_response_replace == "nothing"}
			{
				set grpstar_443_response_replace ""
			}

			regsub -all $grpstar_443_response_find $grpstar_443_response_val $grpstar_443_response_replace grpstar_443_response_val
		}
		HTTP::header replace Location $grpstar_443_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::grpstar_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set grpstar_443_response_val [HTTP::header value Content-Location]

		foreach grpstar_443_response_rewriteRecord $static::grpstar_443_response_contentLocation
		{
			set grpstar_443_response_find [getfield $grpstar_443_response_rewriteRecord "====" 1]
			set grpstar_443_response_replace [getfield $grpstar_443_response_rewriteRecord "====" 2]
			if {$grpstar_443_response_replace == "nothing"}
			{
				set grpstar_443_response_replace ""
			}

			regsub -all $grpstar_443_response_find $grpstar_443_response_val $grpstar_443_response_replace grpstar_443_response_val
		}
		HTTP::header replace Content-Location $grpstar_443_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::grpstar_443_response_body] > 0}
	{
	set expression ""
	foreach grpstar_443_response_rewriteRecord $static::grpstar_443_response_body
	{
		set grpstar_443_response_find [getfield $grpstar_443_response_rewriteRecord "====" 1]
		set grpstar_443_response_replace [getfield $grpstar_443_response_rewriteRecord "====" 2]
		if {$grpstar_443_response_replace == "nothing"}
		{
			set grpstar_443_response_replace ""
		}

		set expression "$expression@$grpstar_443_response_find@$grpstar_443_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
	#	log local0. "rewrite exec"
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/GRP_Test_443_GV {
    when RULE_INIT
{
	set static::GRP_Test_443_poolIdentifeir "WebPool"
	set static::GRP_Test_443_CRPA_Src "ACLgrpcrpa"
	set static::GRP_Test_443_DEMO_Src "ACLgrpdemo"
	#set static::GRP_Test_443_ME "GRP_NonPROD_Maintenance_Exempt"
}

when HTTP_REQUEST
{
	set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 0
	set GRP_Test_443_GLOBAL_GRP_Forms_BREAK 0
	set GRP_Test_443_GLOBAL_hostName ""
	set GRP_Test_443_GLOBAL_hostName_index ""
	set GRP_Test_443_GLOBAL_poolName ""
	set GRP_Test_443_GLOBAL_URI ""
	set GRP_Test_443_Rewrite_Responce_Payload 0
	set GRP_Test_443_prod_Rewrite_Resp_Payload 0
	set GRP_Test_443_GLOBAL_Rewrite_Select ""

	switch [string tolower [HTTP::host]] { 
    "grpdemo.dubai.gov.ae" - "demowebmail.dubai.gov.ae" - "servicedesk.dubaigov.ae"
	{
		#log local0. "Access allowed for Host: [HTTP::host] IP: [IP::client_addr]" 
    }
	"tfimsp.dubai.gov.ae" - "tfimidp.dubai.gov.ae" - "srdtfimsp.dubaigov.ae"
	{
	}

	default
	{
		#log local0. "Access blocked for Host: [HTTP::host]"
		set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
		drop
    }
    } 

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/GRP_Test_443_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." }
	{
   		set grp_test_443_host [HTTP::host]
		regsub -all -nocase "www\." $grp_test_443_host "" grp_test_443_host
		HTTP::respond 302 Location "http://$grp_test_443_host[HTTP::uri]"
		set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
	}

}
}
ltm rule /Common/GRP_Test_443_Pool_SSL_Disable {
    when SERVER_CONNECTED {
	if  {$GRP_Test_443_GLOBAL_poolName == "Dashboard_Pool"} {
	    SSL::disable
	    } 
}

when HTTP_RESPONSE {
    set GRP_Test_443_myValues [HTTP::cookie names]
    foreach GRP_Test_443_mycookies $GRP_Test_443_myValues {
       #HTTP::cookie secure $GRP_Test_443_mycookies enable
    }
 }
}
ltm rule /Common/GRP_Test_443_Pool_Select {
    when RULE_INIT
{
set GRP_Test_443_Sorry "<html><head></head><body><p>Access Denied1...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST
{
if { $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0 } {

	set GRP_Test_443_GLOBAL_hostName [HTTP::host]
	set GRP_Test_443_GLOBAL_URI [HTTP::uri]

	if {$GRP_Test_443_GLOBAL_hostName contains ":"}
	{
		set GRP_Test_443_GLOBAL_hostName [getfield $GRP_Test_443_GLOBAL_hostName ":" 1]
	}

	set GRP_Test_443_GLOBAL_hostName_index [substr $GRP_Test_443_GLOBAL_hostName 0 "."]


	set GRP_Test_443_GLOBAL_poolName "$GRP_Test_443_GLOBAL_hostName_index$static::GRP_Test_443_poolIdentifeir"

	#--------------------------------

	switch $GRP_Test_443_GLOBAL_poolName
	{	
		"grpdemoWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_225_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "grpDEMO"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_grpDEMO 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
		       "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
		       }
			   "/xdiscoverer" - "//xdiscoverer"
			   {
				#grpdemo_disco_test
				set GRP_Test_443_GLOBAL_poolName "grpdemo_disco_test"
				set GRP_Test_443_GLOBAL_Rewrite_Select "grpDEMOdisco"
				pool $GRP_Test_443_GLOBAL_poolName
	        	persist cookie insert SSO_POC_grpDEMO_disco 0
			   }
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}
	    }

		"demowebmailWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_225_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "demoWebMail"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_demoWebMail 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}	
	    }

		"tfimidpWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_226_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "tfimidp"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_tfimidp 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}	
	    }

		"servicedeskWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_227_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "sdesk"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_sdesk 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}	
	    } 

		"tfimspWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_225_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "tfimsp"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_tfimsp 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}	
	    }

		"srdtfimspWebPool"
		{
			set GRP_Test_443_GLOBAL_poolName "ssotest_227_443_Pool"
			set GRP_Test_443_GLOBAL_Rewrite_Select "srdtfimsp"
			pool $GRP_Test_443_GLOBAL_poolName
	       	persist cookie insert SSO_POC_srdtfimsp 0

			switch -glob  $GRP_Test_443_GLOBAL_URI
		    {
			   "/pkmslogin.form"
			   {
				#set GRP_Test_443_GLOBAL_GRP_BREAK_ALL 1
			   }
			   default
			   {  
		 	   }   
			}	
	    }



		default 
		{
		}	
	}
}	

}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_demomail {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_ssodemomail_request_uri
	{
	}
	set static::GRP_Test_443_ssodemomail_request_host
	{
	} 
	set static::GRP_Test_443_ssodemomail_request_referer
	{
	}
	set static::GRP_Test_443_ssodemomail_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_ssodemomail_response_setCookie
	{
	}
	set static::GRP_Test_443_ssodemomail_response_location
	{
	}
	set static::GRP_Test_443_ssodemomail_response_contentLocation
	{
	}
	set static::GRP_Test_443_ssodemomail_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "demoWebMail" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_ssodemomail_request_uri] > 0}
	{
	set GRP_Test_443_ssodemomail_request_val [HTTP::uri]
	foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_request_uri
	{
		set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
		set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
		{
			set GRP_Test_443_ssodemomail_request_replace ""
		}

		regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_ssodemomail_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_ssodemomail_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_ssodemomail_request_val [HTTP::host]
		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_request_host
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}
			regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_ssodemomail_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_ssodemomail_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_ssodemomail_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_request_referer
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}

			regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_ssodemomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_ssodemomail_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_ssodemomail_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_request_cookie
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}

			regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_ssodemomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "demoWebMail" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_ssodemomail_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_ssodemomail_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_val_list
		{
			foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_response_setCookie
			{
				set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
				set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
				{
					set GRP_Test_443_ssodemomail_request_replace ""
				}
				regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_ssodemomail_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssodemomail_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_ssodemomail_request_val [HTTP::header value Location]

		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_response_location
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}

			regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_ssodemomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssodemomail_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_ssodemomail_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_response_contentLocation
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}

			regsub -all $GRP_Test_443_ssodemomail_request_find $GRP_Test_443_ssodemomail_request_val $GRP_Test_443_ssodemomail_request_replace GRP_Test_443_ssodemomail_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_ssodemomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_ssodemomail_response_body] > 0}
	{
		set GRP_Test_443_ssodemomail_expression ""
		foreach GRP_Test_443_ssodemomail_request_rewriteRecord $static::GRP_Test_443_ssodemomail_response_body
		{
			set GRP_Test_443_ssodemomail_request_find [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssodemomail_request_replace [getfield $GRP_Test_443_ssodemomail_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssodemomail_request_replace == "nothing"}
			{
				set GRP_Test_443_ssodemomail_request_replace ""
			}

			set GRP_Test_443_ssodemomail_expression "$GRP_Test_443_ssodemomail_expression@$GRP_Test_443_ssodemomail_request_find@$GRP_Test_443_ssodemomail_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_ssodemomail_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "demoWebMail" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_ssodemomail_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_ssodemomail_theMatch"
		#log local0. "on URI: $GRP_Test_443_ssodemomail_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_ecsso {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_ecsso_request_uri
	{
	}
	set static::GRP_Test_443_ecsso_request_host
	{
		"survey.dubai.gov.ae====www.surveymonkey.com"
	} 
	set static::GRP_Test_443_ecsso_request_referer
	{
	}
	set static::GRP_Test_443_ecsso_request_cookie
	{
		"survey.dubai.gov.ae====.surveymonkey.com"
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_ecsso_response_setCookie
	{
		".surveymonkey.com====survey.dubai.gov.ae"
	}
	set static::GRP_Test_443_ecsso_response_location
	{
		"http://www.surveymonkey.com====https://survey.dubai.gov.ae"
		"www.surveymonkey.com====survey.dubai.gov.ae"
	}
	set static::GRP_Test_443_ecsso_response_contentLocation
	{
		"http://www.surveymonkey.com====https://survey.dubai.gov.ae"
		"www.surveymonkey.com====survey.dubai.gov.ae"
	}
	set static::GRP_Test_443_ecsso_response_body
	{
		"http://www.surveymonkey.com====https://survey.dubai.gov.ae"
		"www.surveymonkey.com====survey.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "Survey_Monkey_Pool" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_ecsso_request_uri] > 0}
	{
	set GRP_Test_443_ecsso_request_val [HTTP::uri]
	foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_request_uri
	{
		set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
		set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_ecsso_request_replace == "nothing"}
		{
			set GRP_Test_443_ecsso_request_replace ""
		}

		regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_ecsso_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_ecsso_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_ecsso_request_val [HTTP::host]
		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_request_host
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}
			regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_ecsso_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_ecsso_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_ecsso_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_request_referer
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}

			regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_ecsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_ecsso_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_ecsso_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_request_cookie
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}

			regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_ecsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "Survey_Monkey_Pool" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_ecsso_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_ecsso_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_val_list
		{
			foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_response_setCookie
			{
				set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
				set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_ecsso_request_replace == "nothing"}
				{
					set GRP_Test_443_ecsso_request_replace ""
				}
				regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_ecsso_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ecsso_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_ecsso_request_val [HTTP::header value Location]

		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_response_location
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}

			regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_ecsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ecsso_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_ecsso_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_response_contentLocation
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}

			regsub -all $GRP_Test_443_ecsso_request_find $GRP_Test_443_ecsso_request_val $GRP_Test_443_ecsso_request_replace GRP_Test_443_ecsso_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_ecsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_ecsso_response_body] > 0}
	{
		set GRP_Test_443_ecsso_expression ""
		foreach GRP_Test_443_ecsso_request_rewriteRecord $static::GRP_Test_443_ecsso_response_body
		{
			set GRP_Test_443_ecsso_request_find [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 1]
			set GRP_Test_443_ecsso_request_replace [getfield $GRP_Test_443_ecsso_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ecsso_request_replace == "nothing"}
			{
				set GRP_Test_443_ecsso_request_replace ""
			}

			set GRP_Test_443_ecsso_expression "$GRP_Test_443_ecsso_expression@$GRP_Test_443_ecsso_request_find@$GRP_Test_443_ecsso_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_ecsso_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "Survey_Monkey_Pool" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_ecsso_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_ecsso_theMatch"
		#log local0. "on URI: $GRP_Test_443_ecsso_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_grpdev {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_ssogrpdev_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::GRP_Test_443_ssogrpdev_request_host
	{
	} 
	set static::GRP_Test_443_ssogrpdev_request_referer
	{
	}
	set static::GRP_Test_443_ssogrpdev_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_ssogrpdev_response_setCookie
	{
	}
	set static::GRP_Test_443_ssogrpdev_response_location
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::GRP_Test_443_ssogrpdev_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::GRP_Test_443_ssogrpdev_response_body
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "grpDEMO" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_ssogrpdev_request_uri] > 0}
	{
	set GRP_Test_443_ssogrpdev_request_val [HTTP::uri]
	foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_request_uri
	{
		set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
		set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
		{
			set GRP_Test_443_ssogrpdev_request_replace ""
		}

		regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_ssogrpdev_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_ssogrpdev_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_ssogrpdev_request_val [HTTP::host]
		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_request_host
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}
			regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_ssogrpdev_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_ssogrpdev_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_ssogrpdev_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_request_referer
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_ssogrpdev_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_ssogrpdev_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_request_cookie
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "grpDEMO" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_ssogrpdev_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_ssogrpdev_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_val_list
		{
			foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_response_setCookie
			{
				set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
				set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
				{
					set GRP_Test_443_ssogrpdev_request_replace ""
				}
				regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_ssogrpdev_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssogrpdev_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_ssogrpdev_request_val [HTTP::header value Location]

		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_response_location
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssogrpdev_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_ssogrpdev_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_response_contentLocation
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}

			regsub -all $GRP_Test_443_ssogrpdev_request_find $GRP_Test_443_ssogrpdev_request_val $GRP_Test_443_ssogrpdev_request_replace GRP_Test_443_ssogrpdev_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_ssogrpdev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_ssogrpdev_response_body] > 0}
	{
		set GRP_Test_443_ssogrpdev_expression ""
		foreach GRP_Test_443_ssogrpdev_request_rewriteRecord $static::GRP_Test_443_ssogrpdev_response_body
		{
			set GRP_Test_443_ssogrpdev_request_find [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssogrpdev_request_replace [getfield $GRP_Test_443_ssogrpdev_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssogrpdev_request_replace == "nothing"}
			{
				set GRP_Test_443_ssogrpdev_request_replace ""
			}

			set GRP_Test_443_ssogrpdev_expression "$GRP_Test_443_ssogrpdev_expression@$GRP_Test_443_ssogrpdev_request_find@$GRP_Test_443_ssogrpdev_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_ssogrpdev_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "grpDEMO" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_ssogrpdev_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_ssogrpdev_theMatch"
		#log local0. "on URI: $GRP_Test_443_ssogrpdev_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_sdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_ssosdesk_request_uri
	{
		"^/\$====/arsys"
	}
	set static::GRP_Test_443_ssosdesk_request_host
	{
	} 
	set static::GRP_Test_443_ssosdesk_request_referer
	{
	}
	set static::GRP_Test_443_ssosdesk_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_ssosdesk_response_setCookie
	{
	}
	set static::GRP_Test_443_ssosdesk_response_location
	{
		"http://servicedesk.dubaigov.ae:443====https://servicedesk.dubaigov.ae"
	}
	set static::GRP_Test_443_ssosdesk_response_contentLocation
	{
		"http://servicedesk.dubaigov.ae:443====https://servicedesk.dubaigov.ae"
	}
	set static::GRP_Test_443_ssosdesk_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "sdesk" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_ssosdesk_request_uri] > 0}
	{
	set GRP_Test_443_ssosdesk_request_val [HTTP::uri]
	foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_request_uri
	{
		set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
		set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
		{
			set GRP_Test_443_ssosdesk_request_replace ""
		}

		regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_ssosdesk_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_ssosdesk_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_ssosdesk_request_val [HTTP::host]
		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_request_host
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}
			regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_ssosdesk_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_ssosdesk_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_ssosdesk_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_request_referer
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}

			regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_ssosdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_ssosdesk_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_ssosdesk_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_request_cookie
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}

			regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_ssosdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "sdesk" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_ssosdesk_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_ssosdesk_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_val_list
		{
			foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_response_setCookie
			{
				set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
				set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
				{
					set GRP_Test_443_ssosdesk_request_replace ""
				}
				regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_ssosdesk_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssosdesk_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_ssosdesk_request_val [HTTP::header value Location]

		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_response_location
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}

			regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_ssosdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_ssosdesk_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_ssosdesk_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_response_contentLocation
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}

			regsub -all $GRP_Test_443_ssosdesk_request_find $GRP_Test_443_ssosdesk_request_val $GRP_Test_443_ssosdesk_request_replace GRP_Test_443_ssosdesk_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_ssosdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_ssosdesk_response_body] > 0}
	{
		set GRP_Test_443_ssosdesk_expression ""
		foreach GRP_Test_443_ssosdesk_request_rewriteRecord $static::GRP_Test_443_ssosdesk_response_body
		{
			set GRP_Test_443_ssosdesk_request_find [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 1]
			set GRP_Test_443_ssosdesk_request_replace [getfield $GRP_Test_443_ssosdesk_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_ssosdesk_request_replace == "nothing"}
			{
				set GRP_Test_443_ssosdesk_request_replace ""
			}

			set GRP_Test_443_ssosdesk_expression "$GRP_Test_443_ssosdesk_expression@$GRP_Test_443_ssosdesk_request_find@$GRP_Test_443_ssosdesk_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_ssosdesk_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "sdesk" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_ssosdesk_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_ssosdesk_theMatch"
		#log local0. "on URI: $GRP_Test_443_ssosdesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_srdtfimsp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_srdtfimsp_request_uri
	{
	}
	set static::GRP_Test_443_srdtfimsp_request_host
	{
	} 
	set static::GRP_Test_443_srdtfimsp_request_referer
	{
	}
	set static::GRP_Test_443_srdtfimsp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_srdtfimsp_response_setCookie
	{
	}
	set static::GRP_Test_443_srdtfimsp_response_location
	{
	}
	set static::GRP_Test_443_srdtfimsp_response_contentLocation
	{
	}
	set static::GRP_Test_443_srdtfimsp_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "srdtfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_srdtfimsp_request_uri] > 0}
	{
	set GRP_Test_443_srdtfimsp_request_val [HTTP::uri]
	foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_request_uri
	{
		set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
		set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
		{
			set GRP_Test_443_srdtfimsp_request_replace ""
		}

		regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_srdtfimsp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_srdtfimsp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_srdtfimsp_request_val [HTTP::host]
		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_request_host
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}
			regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_srdtfimsp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_srdtfimsp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_srdtfimsp_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_request_referer
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_srdtfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_srdtfimsp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_srdtfimsp_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_request_cookie
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_srdtfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "srdtfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_srdtfimsp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_srdtfimsp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_val_list
		{
			foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_response_setCookie
			{
				set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
				set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
				{
					set GRP_Test_443_srdtfimsp_request_replace ""
				}
				regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_srdtfimsp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_srdtfimsp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_srdtfimsp_request_val [HTTP::header value Location]

		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_response_location
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_srdtfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_srdtfimsp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_srdtfimsp_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_response_contentLocation
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_srdtfimsp_request_find $GRP_Test_443_srdtfimsp_request_val $GRP_Test_443_srdtfimsp_request_replace GRP_Test_443_srdtfimsp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_srdtfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_srdtfimsp_response_body] > 0}
	{
		set GRP_Test_443_srdtfimsp_expression ""
		foreach GRP_Test_443_srdtfimsp_request_rewriteRecord $static::GRP_Test_443_srdtfimsp_response_body
		{
			set GRP_Test_443_srdtfimsp_request_find [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_srdtfimsp_request_replace [getfield $GRP_Test_443_srdtfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_srdtfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_srdtfimsp_request_replace ""
			}

			set GRP_Test_443_srdtfimsp_expression "$GRP_Test_443_srdtfimsp_expression@$GRP_Test_443_srdtfimsp_request_find@$GRP_Test_443_srdtfimsp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_srdtfimsp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_227_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "srdtfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_srdtfimsp_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_srdtfimsp_theMatch"
		#log local0. "on URI: $GRP_Test_443_srdtfimsp_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_443_ssoRewrite_tfimsp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_443_tfimsp_request_uri
	{
	}
	set static::GRP_Test_443_tfimsp_request_host
	{
	} 
	set static::GRP_Test_443_tfimsp_request_referer
	{
	}
	set static::GRP_Test_443_tfimsp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_443_tfimsp_response_setCookie
	{
	}
	set static::GRP_Test_443_tfimsp_response_location
	{
	}
	set static::GRP_Test_443_tfimsp_response_contentLocation
	{
	}
	set static::GRP_Test_443_tfimsp_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "tfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_Test_443_tfimsp_request_uri] > 0}
	{
	set GRP_Test_443_tfimsp_request_val [HTTP::uri]
	foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_request_uri
	{
		set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
		set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]
		if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
		{
			set GRP_Test_443_tfimsp_request_replace ""
		}

		regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_443_tfimsp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_443_tfimsp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_443_tfimsp_request_val [HTTP::host]
		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_request_host
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}
			regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_443_tfimsp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_443_tfimsp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_443_tfimsp_request_val [HTTP::header value Referer]
		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_request_referer
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_443_tfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_443_tfimsp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_443_tfimsp_request_val [HTTP::header value Cookie]
		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_request_cookie
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]

			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_443_tfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "tfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_443_tfimsp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_443_tfimsp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_val_list
		{
			foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_response_setCookie
			{
				set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
				set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]

				if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
				{
					set GRP_Test_443_tfimsp_request_replace ""
				}
				regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_443_tfimsp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_443_tfimsp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_443_tfimsp_request_val [HTTP::header value Location]

		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_response_location
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_443_tfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_443_tfimsp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_443_tfimsp_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_response_contentLocation
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}

			regsub -all $GRP_Test_443_tfimsp_request_find $GRP_Test_443_tfimsp_request_val $GRP_Test_443_tfimsp_request_replace GRP_Test_443_tfimsp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_443_tfimsp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_Test_443_tfimsp_response_body] > 0}
	{
		set GRP_Test_443_tfimsp_expression ""
		foreach GRP_Test_443_tfimsp_request_rewriteRecord $static::GRP_Test_443_tfimsp_response_body
		{
			set GRP_Test_443_tfimsp_request_find [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 1]
			set GRP_Test_443_tfimsp_request_replace [getfield $GRP_Test_443_tfimsp_request_rewriteRecord "====" 2]
			if {$GRP_Test_443_tfimsp_request_replace == "nothing"}
			{
				set GRP_Test_443_tfimsp_request_replace ""
			}

			set GRP_Test_443_tfimsp_expression "$GRP_Test_443_tfimsp_expression@$GRP_Test_443_tfimsp_request_find@$GRP_Test_443_tfimsp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_Test_443_tfimsp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_Test_443_GLOBAL_poolName == "ssotest_225_443_Pool" and $GRP_Test_443_GLOBAL_Rewrite_Select == "tfimsp" and $GRP_Test_443_GLOBAL_GRP_BREAK_ALL == 0} {

		#set GRP_Test_443_tfimsp_theMatch [STREAM::match]

		#log local0. "match found: $GRP_Test_443_tfimsp_theMatch"
		#log local0. "on URI: $GRP_Test_443_tfimsp_GLOBAL_URI"

    }
}
}
ltm rule /Common/GRP_Test_GV {
    when RULE_INIT
{
	set static::GRP_Test_poolIdentifeir "WebPool"
	set static::GRP_Test_CRPA_Src "ACLgrpcrpa"
	set static::GRP_Test_DEMO_Src "ACLgrpdemo"
	set static::GRP_Test_ME "GRP_NonPROD_Maintenance_Exempt"
}




when HTTP_REQUEST {
	set GRP_Test_GLOBAL_GRP_BREAK_ALL 0
	set GRP_Test_GLOBAL_hostName ""
	set GRP_Test_GLOBAL_hostName_index ""
	set GRP_Test_GLOBAL_poolName ""
	set GRP_Test_GLOBAL_URI ""
	set GRP_Test_GLOBAL_Log 0
	set saran_uri ""
	set saran_uri1 ""

	set GRP_Test_GLOBAL_hostName [HTTP::host]

	switch [string tolower [HTTP::host]] { 
    "grpdev.dubai.gov.ae" 
	{

    }
	"xgrpdemo.dubai.gov.ae"
	{

	}
	"xyzwgrp.dubai.gov.ae"
	{
	}
	default
	{
		#log local0. "Access blocked for Host: [HTTP::host]"
		set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		drop
    }
    } 
	STREAM::disable	
}

when HTTP_RESPONSE {
	STREAM::disable

}
}
ltm rule /Common/GRP_Test_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0 }
	{
   		set grp_test_80_host [HTTP::host]
		regsub -all -nocase "www\." $grp_test_80_host "" grp_test_80_host
		HTTP::respond 302 Location "http://$grp_test_80_host[HTTP::uri]"
		set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
	}

	if { [IP::client_addr] equals "213.42.50.181" or ([IP::client_addr] equals "213.42.55.99")} {

	    #set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		#HTTP::redirect "https://[HTTP::host][HTTP::uri]"
	}

}
}
ltm rule /Common/GRP_Test_Pool_Select {
    when RULE_INIT
{
set GRP_Test_Sorry "<html><head></head><body><p>Access Denied1...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST
{
if { $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0 } {

	set GRP_Test_GLOBAL_URI [HTTP::uri]

	if {$GRP_Test_GLOBAL_hostName contains ":"}
	{
		set GRP_Test_GLOBAL_hostName [getfield $GRP_Test_GLOBAL_hostName ":" 1]
	}

	set GRP_Test_GLOBAL_hostName_index [substr $GRP_Test_GLOBAL_hostName 0 "."]


	set GRP_Test_GLOBAL_poolName "$GRP_Test_GLOBAL_hostName_index$static::GRP_Test_poolIdentifeir"

	#--------------------------------

	switch $GRP_Test_GLOBAL_poolName
	{
		"grpdemoWebPool"
		{
			set GRP_Test_GLOBAL_poolName "ssotest_224_80_Pool"
			pool $GRP_Test_GLOBAL_poolName
	       	persist cookie insert Test_80_grpDEMO 0

			switch -glob  $GRP_Test_GLOBAL_URI
		    {
		       "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            #set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		       }
		       "/pkmslogin.form"
			   {
				#set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
			   }   
			   default
			   {   
		 	   }   
			}
	    }

		"grpdevWebPool"
		{
			pool $GRP_Test_GLOBAL_poolName
	       	persist cookie insert Test_grpDEV 0

			switch -glob  $GRP_Test_GLOBAL_URI
		    {
		       "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            #set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		       }
			   default
			   {
		 	   }   
			}
	    }

		"xxxxgrpWebPool"
		{
			if {[IP::client_addr] equals "172.16.3.12"}
            {
				pool $GRP_Test_GLOBAL_poolName
	        	persist cookie insert SSO_POC_grpPROD_APP 0
		    } else {
				set GRP_Test_GLOBAL_poolName "servicesWebPool"
				pool $GRP_Test_GLOBAL_poolName
	        	persist cookie insert SSO_POC_grpPROD_DMZ 0
			}

			switch -glob  $GRP_Test_GLOBAL_URI
		    {
		       "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		       }
			   default
			   {
		 	   }   
			}
	    }
		"xyzgrpWebPool"
		{
			set GRP_Test_GLOBAL_poolName "MS_GRP_PRD_DMZ_Pool"
			pool $GRP_Test_GLOBAL_poolName
	       	persist cookie insert Test_RTA_grpPROD_DMZ 0
		}
		default 
		{
		}	
	}
}	

}
}
ltm rule /Common/GRP_Test_Rewrite_dev {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_dev_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::GRP_Test_dev_request_host
	{
	} 
	set static::GRP_Test_dev_request_referer
	{
	}
	set static::GRP_Test_dev_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_dev_response_setCookie
	{
	}
	set static::GRP_Test_dev_response_location
	{
	}
	set static::GRP_Test_dev_response_contentLocation
	{
	}
	set static::GRP_Test_dev_response_body
	{
		#"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_GLOBAL_poolName == "xssotest_224_80_Pool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{

	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::GRP_Test_dev_request_uri] > 0}
	{
	set GRP_Test_dev_request_val [HTTP::uri]
	foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_request_uri
	{
		set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
		set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]
		if {$GRP_Test_dev_request_replace == "nothing"}
		{
			set GRP_Test_dev_request_replace ""
		}

		regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_dev_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_dev_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_dev_request_val [HTTP::host]
		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_request_host
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]

			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}
			regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_dev_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_dev_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_dev_request_val [HTTP::header value Referer]
		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_request_referer
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]

			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}

			regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_dev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_dev_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_dev_request_val [HTTP::header value Cookie]
		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_request_cookie
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]

			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}

			regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_dev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_GLOBAL_poolName == "xssotest_224_80_Pool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_dev_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_dev_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_dev_request_val $GRP_Test_dev_request_val_list
		{
			foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_response_setCookie
			{
				set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
				set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]

				if {$GRP_Test_dev_request_replace == "nothing"}
				{
					set GRP_Test_dev_request_replace ""
				}
				regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_dev_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_dev_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{

		set GRP_Test_dev_request_val [HTTP::header value Location]

		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_response_location
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]
			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}

			regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
			#log local0. " Luk For: $GRP_Test_dev_request_find Found-In PKt: $GRP_Test_dev_request_val & Replaced-Wit: $GRP_Test_dev_request_replace "
		}
		if { [catch {HTTP::header replace Location $GRP_Test_dev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_dev_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_dev_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_response_contentLocation
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]
			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}

			regsub -all $GRP_Test_dev_request_find $GRP_Test_dev_request_val $GRP_Test_dev_request_replace GRP_Test_dev_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_dev_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::GRP_Test_dev_response_body] > 0}
	{
		set GRP_Test_dev_expression ""
		foreach GRP_Test_dev_request_rewriteRecord $static::GRP_Test_dev_response_body
		{
			set GRP_Test_dev_request_find [getfield $GRP_Test_dev_request_rewriteRecord "====" 1]
			set GRP_Test_dev_request_replace [getfield $GRP_Test_dev_request_rewriteRecord "====" 2]
			if {$GRP_Test_dev_request_replace == "nothing"}
			{
				set GRP_Test_dev_request_replace ""
			}

			set GRP_Test_dev_expression "$GRP_Test_dev_expression@$GRP_Test_dev_request_find@$GRP_Test_dev_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
            {
			if { [catch
			{
				STREAM::expression $GRP_Test_dev_expression
				STREAM::enable
			} result] }
			{
			#	log local0. "fffffffffff $result"
			}
		}
	}
    }
}

when STREAM_MATCHED
{
	if {$GRP_Test_GLOBAL_poolName == "xssotest_224_80_Pool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	set GRP_Test_dev_theMatch [STREAM::match]

	#	log local0. "match found: $GRP_Test_dev_theMatch"
	#	log local0. "on URI: $GRP_Test_GLOBAL_URI"
    }
}
}
ltm rule /Common/GRP_Test_Rewrite_supt {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_Test_supt_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"locale=en_US====locale=en_AE"
	}
	set static::GRP_Test_supt_request_host
	{
		#"grpsupt.dubai.gov.ae====relapp1.dubai.gov.ae"
		#"grpdev.dubai.gov.ae====relapp2.dubai.gov.ae:8005"
	} 
	set static::GRP_Test_supt_request_referer
	{
		#"grpsupt.dubai.gov.ae====relapp1.dubai.gov.ae"
		#"grpdev.dubai.gov.ae====relapp2.dubai.gov.ae:8005"
	}
	set static::GRP_Test_supt_request_cookie
	{
		#"PRODSUPT====PROD"
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_Test_supt_response_setCookie
	{
		#"PROD====PRODSUPT"
	}
	set static::GRP_Test_supt_response_location
	{
		#"http://relapp1.dubai.gov.ae====http://grpsupt.dubai.gov.ae"
		#"http://relapp2.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
		#"http://grpdev.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
	}
	set static::GRP_Test_supt_response_contentLocation
	{
		#"http://relapp1.dubai.gov.ae====http://grpsupt.dubai.gov.ae"
		#"http://relapp2.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
		#"http://grpdev.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
	}
	set static::GRP_Test_supt_response_body
	{
		#"http://relapp1.dubai.gov.ae====http://grpsupt.dubai.gov.ae"
		#"http://relapp2.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
		#"http://grpdev.dubai.gov.ae:8005====http://grpdev.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_Test_GLOBAL_poolName == "grpdevWebPool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{

	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::GRP_Test_supt_request_uri] > 0}
	{
	set GRP_Test_supt_request_val [HTTP::uri]
	foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_request_uri
	{
		set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
		set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]
		if {$GRP_Test_supt_request_replace == "nothing"}
		{
			set GRP_Test_supt_request_replace ""
		}

		regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
	}
	if { [catch {HTTP::uri $GRP_Test_supt_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_Test_supt_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_Test_supt_request_val [HTTP::host]
		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_request_host
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]

			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}
			regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_Test_supt_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_Test_supt_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_Test_supt_request_val [HTTP::header value Referer]
		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_request_referer
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]

			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}

			regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_Test_supt_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_Test_supt_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_Test_supt_request_val [HTTP::header value Cookie]
		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_request_cookie
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]

			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}

			regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_Test_supt_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_Test_GLOBAL_poolName == "grpdevWebPool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_Test_supt_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_Test_supt_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_Test_supt_request_val $GRP_Test_supt_request_val_list
		{
			foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_response_setCookie
			{
				set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
				set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]

				if {$GRP_Test_supt_request_replace == "nothing"}
				{
					set GRP_Test_supt_request_replace ""
				}
				regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_Test_supt_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_Test_supt_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_Test_supt_request_val [HTTP::header value Location]

		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_response_location
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]
			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}

			regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_Test_supt_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_Test_supt_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_Test_supt_request_val [HTTP::header value Content-Location]

		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_response_contentLocation
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]
			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}

			regsub -all $GRP_Test_supt_request_find $GRP_Test_supt_request_val $GRP_Test_supt_request_replace GRP_Test_supt_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_Test_supt_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::GRP_Test_supt_response_body] > 0}
	{
		set GRP_Test_supt_expression ""
		foreach GRP_Test_supt_request_rewriteRecord $static::GRP_Test_supt_response_body
		{
			set GRP_Test_supt_request_find [getfield $GRP_Test_supt_request_rewriteRecord "====" 1]
			set GRP_Test_supt_request_replace [getfield $GRP_Test_supt_request_rewriteRecord "====" 2]
			if {$GRP_Test_supt_request_replace == "nothing"}
			{
				set GRP_Test_supt_request_replace ""
			}

			set GRP_Test_supt_expression "$GRP_Test_supt_expression@$GRP_Test_supt_request_find@$GRP_Test_supt_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
            {
			if { [catch
			{
				STREAM::expression $GRP_Test_supt_expression
				STREAM::enable
			} result] }
			{
			#	log local0. "fffffffffff $result"
			}
		}
	}
    }
}

when STREAM_MATCHED
{
	if {$GRP_Test_GLOBAL_poolName == "grpdevWebPool" and $GRP_Test_GLOBAL_GRP_BREAK_ALL == 0}
	{
	#	set GRP_Test_supt_theMatch [STREAM::match]

	#	log local0. "match found: $GRP_Test_supt_theMatch"
	#	log local0. "on URI: $GRP_Test_GLOBAL_URI"
    }
}
}
ltm rule /Common/GRP_VIS_Base_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GRP_VIS_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"http://grpvis.dubai.gov.ae====http://grpvis.dubai.gov.ae"
	}
	set static::GRP_VIS_request_host
	{
	} 
	set static::GRP_VIS_request_referer
	{
	}
	set static::GRP_VIS_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GRP_VIS_response_setCookie
	{
	}
	set static::GRP_VIS_response_location
	{
		#"http://grpvis.dubai.gov.ae====https://grpvis.dubai.gov.ae"
		#"http://grpvis.dubai.gov.ae:80====http://grpvis.dubai.gov.ae"
		"http://dfadvis1.dubai.gov.ae:8010====http://grpvis.dubai.gov.ae"
		#"http://dfadvis1.dubai.gov.ae:8010====https://grpvis.dubai.gov.ae"
	}
	set static::GRP_VIS_response_contentLocation
	{
		#"http://grpvis.dubai.gov.ae====https://grpvis.dubai.gov.ae"
		#"http://grpvis.dubai.gov.ae:80====http://grpvis.dubai.gov.ae"
		"http://dfadvis1.dubai.gov.ae:8010====http://grpvis.dubai.gov.ae"
		#"http://dfadvis1.dubai.gov.ae:8010====https://grpvis.dubai.gov.ae"
	}
	set static::GRP_VIS_response_body
	{
		#"http://grpvis.dubai.gov.ae====https://grpvis.dubai.gov.ae"
		#"http://grpvis.dubai.gov.ae:80====http://grpvis.dubai.gov.ae"
		"http://dfadvis1.dubai.gov.ae:8010====http://grpvis.dubai.gov.ae"
		#"http://dfadvis1.dubai.gov.ae:8010====https://grpvis.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$GRP_VIS_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::GRP_VIS_request_uri] > 0}
	{
	set GRP_VIS_request_val [HTTP::uri]
	foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_request_uri
	{
		set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
		set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]
		if {$GRP_VIS_request_replace == "nothing"}
		{
			set GRP_VIS_request_replace ""
		}

		regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
	}
	if { [catch {HTTP::uri $GRP_VIS_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GRP_VIS_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GRP_VIS_request_val [HTTP::host]
		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_request_host
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]

			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}
			regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
		}
		if { [catch {HTTP::header replace Host $GRP_VIS_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GRP_VIS_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GRP_VIS_request_val [HTTP::header value Referer]
		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_request_referer
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]

			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}

			regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
		}

		if { [catch {HTTP::header replace Referer $GRP_VIS_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GRP_VIS_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GRP_VIS_request_val [HTTP::header value Cookie]
		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_request_cookie
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]

			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}

			regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
		}
		if { [catch {HTTP::header replace Cookie $GRP_VIS_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GRP_VIS_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GRP_VIS_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GRP_VIS_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GRP_VIS_request_val $GRP_VIS_request_val_list
		{
			foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_response_setCookie
			{
				set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
				set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]

				if {$GRP_VIS_request_replace == "nothing"}
				{
					set GRP_VIS_request_replace ""
				}
				regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GRP_VIS_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GRP_VIS_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GRP_VIS_request_val [HTTP::header value Location]

		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_response_location
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]
			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}

			regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
		}
		if { [catch {HTTP::header replace Location $GRP_VIS_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GRP_VIS_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GRP_VIS_request_val [HTTP::header value Content-Location]

		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_response_contentLocation
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]
			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}

			regsub -all $GRP_VIS_request_find $GRP_VIS_request_val $GRP_VIS_request_replace GRP_VIS_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GRP_VIS_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::GRP_VIS_response_body] > 0}
	{
		set GRP_VIS_expression ""
		foreach GRP_VIS_request_rewriteRecord $static::GRP_VIS_response_body
		{
			set GRP_VIS_request_find [getfield $GRP_VIS_request_rewriteRecord "====" 1]
			set GRP_VIS_request_replace [getfield $GRP_VIS_request_rewriteRecord "====" 2]
			if {$GRP_VIS_request_replace == "nothing"}
			{
				set GRP_VIS_request_replace ""
			}

			set GRP_VIS_expression "$GRP_VIS_expression@$GRP_VIS_request_find@$GRP_VIS_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GRP_VIS_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$GRP_VIS_GLOBAL_BREAK_ALL == 0} {

		#set GRP_VIS_theMatch [STREAM::match]

		#log local0. "match found: $GRP_VIS_theMatch"
		#log local0. "on URI: $GRP_VIS_GLOBAL_URI"

    }
}
}
ltm rule /Common/GSB_PROD_80_Base {
    when RULE_INIT
{
	#set static::GSB_PROD_Sorry2 "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"
	#set static::GSB_PROD_flag_maintenance 0
}

when HTTP_REQUEST
{
	set GSB_PROD_80_GLOBAL_BREAK_ALL 0
	set GSB_PROD_80_GLOBAL_poolName ""
	set GSB_PROD_80_GLOBAL_URI ""	

	switch [string tolower [HTTP::host]] { 
        "gsb.dubai.gov.ae" - "gsb.dubai.gov.ae:80"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			set GSB_PROD_80_GLOBAL_URI [HTTP::uri]
			if { $GSB_PROD_80_GLOBAL_URI starts_with "/secure" } {
				set GSB_PROD_80_GLOBAL_poolName "eServPROD_ESB_8244_Pool"
				pool $GSB_PROD_80_GLOBAL_poolName
			} else {
				drop
			}
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set GSB_PROD_80_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/GSB_PROD_80_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::GSB_PROD_80_request_uri
	{
		"^/secure====/services"
	}
	set static::GSB_PROD_80_request_host
	{
	} 
	set static::GSB_PROD_80_request_referer
	{
	}
	set static::GSB_PROD_80_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::GSB_PROD_80_response_setCookie
	{
	}
	set static::GSB_PROD_80_response_location
	{

	}
	set static::GSB_PROD_80_response_contentLocation
	{

	}
	set static::GSB_PROD_80_response_body
	{
		"https://gsb.dubai.gov.ae/services====https://gsb.dubai.gov.ae/secure"
	}
}

when HTTP_REQUEST
{
	if {$GSB_PROD_80_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $GSB_PROD_80_GLOBAL_BREAK_ALL == 0} {

            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }
	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::GSB_PROD_80_request_uri] > 0}
	{
	set GSB_PROD_80_request_val [HTTP::uri]
	foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_request_uri
	{
		set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
		set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]
		if {$GSB_PROD_80_request_replace == "nothing"}
		{
			set GSB_PROD_80_request_replace ""
		}

		regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
	}
	if { [catch {HTTP::uri $GSB_PROD_80_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::GSB_PROD_80_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set GSB_PROD_80_request_val [HTTP::host]
		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_request_host
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]

			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}
			regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
		}
		if { [catch {HTTP::header replace Host $GSB_PROD_80_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::GSB_PROD_80_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set GSB_PROD_80_request_val [HTTP::header value Referer]
		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_request_referer
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]

			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}

			regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
		}

		if { [catch {HTTP::header replace Referer $GSB_PROD_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::GSB_PROD_80_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set GSB_PROD_80_request_val [HTTP::header value Cookie]
		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_request_cookie
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]

			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}

			regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
		}
		if { [catch {HTTP::header replace Cookie $GSB_PROD_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$GSB_PROD_80_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $GSB_PROD_80_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::GSB_PROD_80_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set GSB_PROD_80_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach GSB_PROD_80_request_val $GSB_PROD_80_request_val_list
		{
			foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_response_setCookie
			{
				set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
				set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]

				if {$GSB_PROD_80_request_replace == "nothing"}
				{
					set GSB_PROD_80_request_replace ""
				}
				regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $GSB_PROD_80_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::GSB_PROD_80_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set GSB_PROD_80_request_val [HTTP::header value Location]

		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_response_location
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]
			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}

			regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
		}
		if { [catch {HTTP::header replace Location $GSB_PROD_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::GSB_PROD_80_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set GSB_PROD_80_request_val [HTTP::header value Content-Location]

		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_response_contentLocation
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]
			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}

			regsub -all $GSB_PROD_80_request_find $GSB_PROD_80_request_val $GSB_PROD_80_request_replace GSB_PROD_80_request_val
		}
		if { [catch {HTTP::header replace Content-Location $GSB_PROD_80_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::GSB_PROD_80_response_body] > 0}
	{
		set GSB_PROD_80_expression ""
		foreach GSB_PROD_80_request_rewriteRecord $static::GSB_PROD_80_response_body
		{
			set GSB_PROD_80_request_find [getfield $GSB_PROD_80_request_rewriteRecord "====" 1]
			set GSB_PROD_80_request_replace [getfield $GSB_PROD_80_request_rewriteRecord "====" 2]
			if {$GSB_PROD_80_request_replace == "nothing"}
			{
				set GSB_PROD_80_request_replace ""
			}

			set GSB_PROD_80_expression "$GSB_PROD_80_expression@$GSB_PROD_80_request_find@$GSB_PROD_80_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $GSB_PROD_80_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
    }
    }
}

when STREAM_MATCHED
{
	if {$GSB_PROD_80_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $GSB_PROD_80_GLOBAL_BREAK_ALL == 0} {

		#set GSB_PROD_80_theMatch [STREAM::match]

		#log local0. "match found: $GSB_PROD_80_theMatch"
		#log local0. "on URI: $GSB_PROD_80_GLOBAL_URI"

    }
}
}
ltm rule /Common/GeSSPROD_for_GSBPROD_iRule {
    when HTTP_REQUEST {
    # Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] { 
     "gsbtogess.dubai.gov.ae:54546" - "apitogess.dubai.gov.ae:54546" - "apitogess.dubai.gov.ae"
	{
     if { ([HTTP::uri] starts_with "/syncws/") } {
			# Strip '/syncws' from the begining of the URI.
			HTTP::uri [string range [HTTP::uri] 7 end]
	        pool GeSSPROD_Internal_Pool
        } else  {
		            drop
		        }
    }
    default {
		     drop
		    }
}  

}
}
ltm rule /Common/HHRC-JIRA-PRD-Base {
    when HTTP_REQUEST
{
	set Diwan_GLOBAL_poolName ""

	switch [string tolower [HTTP::host]] {
		"diwanit.dubai.gov.ae" - "diwanspace.dubai.gov.ae" - "diwanitqa.dubai.gov.ae" - "diwanspaceqa.dubai.gov.ae" 
	    {
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			HTTP::redirect "https://[HTTP::host]"
        }

		"diwansupport.dubai.gov.ae"
		{
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			HTTP::redirect "https://[HTTP::host]"
        }

		"diwanspqa.dubai.gov.ae" - "mydiwanqa.dubai.gov.ae" - "diwanpwaqa.dubai.gov.ae"
		{
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			HTTP::redirect "https://[HTTP::host]"
        }

		"utmqa.dubai.gov.ae"
	    {
		    #if { ([HTTP::uri] equals "/") } {
				#HTTP::redirect "https://[HTTP::host][HTTP::uri]"
				set Diwan_GLOBAL_poolName "Diwan_SP_QA_Pool"
				pool $Diwan_GLOBAL_poolName
			#}
        }



		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/HHRC-JIRA-PRD-SSL-Base {
    when HTTP_REQUEST
{
	set Diwan_GLOBAL_poolName ""

	switch [string tolower [HTTP::host]] {
		"diwanit.dubai.gov.ae"
	    {
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			pool "HHRC-JIRA-PRD"
        }
		"diwanspace.dubai.gov.ae"
		{
			pool "HHRC-CONF-PRD"
		}

		"diwanitqa.dubai.gov.ae"
		{
			pool "HHRC-JIRA-QA"
		}

		"diwanspaceqa.dubai.gov.ae"
		{
			pool "HHRC-CONF-QA"
		}

		"diwanspqa.dubai.gov.ae" - "mydiwanqa.dubai.gov.ae" - "diwanpwaqa.dubai.gov.ae"
		{
			pool "Diwan_SP_QA_Pool"
		}

		"diwansupport.dubai.gov.ae"
		{
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			if { [HTTP::uri] equals "/" } {
				HTTP::uri "/display/SP/Support+Portal"
			}
			HTTP::header replace Host "diwanspace.dubai.gov.ae"
			pool "HHRC-CONF-PRD"
        }



		"utmqa.dubai.gov.ae"
	    {
		    #if { ([HTTP::uri] equals "/") } {
				#HTTP::redirect "https://[HTTP::host][HTTP::uri]"
				set Diwan_GLOBAL_poolName "Diwan_SP_QA_SSL_Pool"
				pool $Diwan_GLOBAL_poolName
			#}
        }



		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/HHRC-UTM-QA-ssl-Disable {
    when SERVER_CONNECTED {
	if  { $Diwan_GLOBAL_poolName != "Diwan_SP_QA_SSL_Pool"} {
	    SSL::disable
	    } 
}
}
ltm rule /Common/HMC_NET_PROD_Base {
    when RULE_INIT
{
	set static::HMC_NET_PROD_SrcIP "GIN_Range"
	set static::HMC_NET_PROD_Maint_flag 0
	set static::HMC_NET_PROD_Sorry1 "<html><head></head><body><p>Access Denied...!!! </p></body></html>"
}

when HTTP_REQUEST
{
	set HMC_NET_PROD_GLOBAL_BREAK_ALL 0

	if { ($static::HMC_NET_PROD_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "MP_ENABLED_IP") } {

		set HMC_NET_PROD_GLOBAL_BREAK_ALL 1
		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"

		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		#log local0. "Access allowed for Client-IP: [IP::client_addr] Host: [HTTP::host]"
		switch [string tolower [HTTP::host]] {
			"accountmanagementmobws.dubaigov.local" - "accountmanagementmobws.dubaigov.local:80" -
			"ecomplainmobws.dubaigov.local" - "ecomplainmobws.dubaigov.local:80" -
			"ecomplainssows.dubai.ae" - "ecomplainssows.dubai.ae:80" -
			"ecomplainwebservice.dubai.ae" -
			"esuggestmobws.dubaigov.local" - "esuggestmobws.dubaigov.local:80" -
			"esuggestssows.dubai.ae" - "esuggestssows.dubai.ae:80"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				if { [class match [IP::client_addr] equals $static::HMC_NET_PROD_SrcIP] } {
					pool "HMC_NET_PROD_Pool"

				} else {
					set HMC_NET_PROD_GLOBAL_BREAK_ALL 1
					HTTP::respond 200 content $static::HMC_NET_PROD_Sorry1

				}
			}

			"myidkioskws.dubaigov.local" - "myidkioskws.iis" - "myidkioskws.dubaigov.local:80" -
			"happinessbiapi.dubai.gov.ae" - "happinessbiapi.dubai.gov.ae:80" -
			"grpkioskws.dubaigov.local:80" - "grpkioskws.dubaigov.local"
			{
				#log local0. "Access allowed for Client-IP: [IP::client_addr] Host: [HTTP::host]"
				if { [IP::client_addr] equals "213.42.56.171" or [IP::client_addr] equals "213.42.56.170" } {
					pool "HMC_NET_PROD_Pool"
				#	log local0. "Access allowed for Host: [HTTP::host] URI: [HTTP::uri] Client-IP: [IP::client_addr]"
				} else {
					set HMC_NET_PROD_GLOBAL_BREAK_ALL 1
					HTTP::respond 200 content $static::HMC_NET_PROD_Sorry1
				}
			}

			"admin.ecomplain.dubai.ae" - "admin.ecomplain.dubai.gov.ae"
			{
				HTTP::redirect "https://admin.ecomplain.dubai.gov.ae[HTTP::uri]"
			}
			"admin.esuggest.dubai.ae" - "admin.esuggest.dubai.gov.ae"
			{
				HTTP::redirect "https://admin.esuggest.dubai.gov.ae[HTTP::uri]"
			}
			"ecomplain.ae" - "ecomplain.dubai.ae" -	"ecomplain.gov.ae" - "www.ecomplain.ae" - "ecomplain.dubai.gov.ae"
			{
				HTTP::redirect "https://ecomplain.dubai.gov.ae[HTTP::uri]"
			}
			"esuggest.ae" - "esuggest.dubai.ae" - "esuggest.dubai.gov.ae"
			{
				HTTP::redirect "https://esuggest.dubai.gov.ae[HTTP::uri]"
			}


			"dubaiid.ae" - "www.dubaiid.ae"
			{
				HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			}	


			"ecomplainwebservice.dubai.ae" -
			"edsd" - "edsdapps" - "edsdapps.dubai.gov.ae" -
			"forums.emodhesh.ae" - "tst.dubai.gov.ae" - 
			"maintenance.dubai.ae" - "sfphelp.dof.gov.ae" - "myidresetpasswordws.dubaigov.local" - "myidresetpasswordws.dubaigov.local:80" - "docs.dubai.gov.ae" - "timeattendanceapi.dubai.gov.ae"
			{
				pool "HMC_NET_PROD_Pool"

			}
			
			"library.legal.dubai.gov.ae"
			{
				#if { [IP::client_addr] equals "213.42.50.180" } {
					pool "HMC_NET_PROD_AS_Pool"
				#} else {
				#	set HMC_NET_PROD_GLOBAL_BREAK_ALL 1
				#	HTTP::respond 200 content $static::HMC_NET_PROD_Sorry1
				#}
			}
			
			"ahdaf.ae" - "www.ahdaf.ae" -
			"famsclientdownloader" -
			"famssmartclient" -
			"famsweb"
			{
				pool "HMC_NET_PROD_AS_Pool"

			}

			"edsd.dubai.gov.ae" -
			"mbrcldcms.dubai.gov.ae" -
			"mbrcldws.dubai.gov.ae" -
			"myid.dubai.gov.ae" -
			"grphrkiosk.dubai.gov.ae" -
			"happiness.dubai.gov.ae" 
			{
				HTTP::redirect "https://[HTTP::host]"
			}

			"myidkiosk.dubai.gov.ae"
			{
				HTTP::redirect "https://myid.dubai.gov.ae"
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#pool "HMC_NET_QA_Pool"
			}
		}
	}
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/HMC_NET_PROD_SSL_Base {
    when RULE_INIT
{
	set static::HMC_NET_SSL_Maint_flag 0
	set static::HMC_NET_SSL_Maint_BypassIPs "IDS_PROD_Maint_BypassIPs"
	set static::eCom_eSug_Admin_Src "eCom_eSug_Admin_Src"
	set static::HMC_NET_PROD_SSL_Sorry "<html><head></head><body><p>Access Denied...!!!</p></body></html>"
}

when HTTP_REQUEST
{
	set HMC_NET_PROD_SSL_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"edsd.dubai.gov.ae" -
		"mbrcldcms.dubai.gov.ae" -
		"mbrcldws.dubai.gov.ae" -
		"grphrkiosk.dubai.gov.ae" -
		"ecomplain.dubai.gov.ae" -
		"esuggest.dubai.gov.ae" -
		"happiness.dubai.gov.ae" 
		{
			pool "HMC_NET_PROD_Pool"
			persist cookie insert ecomp_PROD 0
		}

		"admin.esuggest.dubai.gov.ae" -  "admin.ecomplain.dubai.gov.ae"
		{
			if { (not [class match [IP::client_addr] equals $static::eCom_eSug_Admin_Src]) } {
				HTTP::respond 200 content $static::HMC_NET_PROD_SSL_Sorry
			}
			else {
					pool "HMC_NET_PROD_Pool"		
				}

		}

		"dubaiid.ae" - "www.dubaiid.ae"
			{
				pool "DubaiID_PRD_80_Pool"
				persist cookie insert DubaiID_PROD 0
			}

		"myidkiosk.dubai.gov.ae"
		{
			HTTP::redirect "https://myid.dubai.gov.ae"
		}

		"myid.dubai.gov.ae"
		{
			if { ($static::HMC_NET_SSL_Maint_flag == 1 and (not [class match [IP::client_addr] equals $static::HMC_NET_SSL_Maint_BypassIPs])) or ([IP::client_addr] equals "MP_Enabled_IP") } {
				set HMC_NET_PROD_SSL_GLOBAL_BREAK_ALL 1

				if {[HTTP::uri] ends_with "favicon.ico"} {
					HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
				}
				elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
					HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
				}
				else {
					HTTP::uri "/sites/maintenance/maintenance.aspx"
				}

				#HTTP::redirect "http://maintenance.dubai.ae"
				HTTP::header replace Host "www.dsg.gov.ae"
				HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
				HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

				pool "grpMaintenance_pool"
				persist cookie insert HMC_PROD_Maint 0

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			} else {
					if { [HTTP::uri] equals "/PortalAdmin/Unregister.aspx" } {
						if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.50.180" or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")) } {
							pool "HMC_NET_PROD_Pool"
						} else {
							HTTP::respond 200 content $static::HMC_NET_PROD_SSL_Sorry
						}
					}
					else {
						pool "HMC_NET_PROD_Pool"
					}
				}
		}



		default
		{
			#log local0. "Access blocked for Host: [HTTP::host]"
			#pool "HMC_NET_QA_Pool"
			drop
		}
	}
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/HMC_NET_QA_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"mpaykioskQA.dubai.gov.ae" - "myidqa.dubai.gov.ae" - "myidqa2.dubai.gov.ae" - "inquiry.dubai.gov.ae" - "adminmyidqa.dubai.gov.ae" - "ecomplainqa.dubai.gov.ae" - "ecomplainadminqa.dubai.gov.ae" - "happinessqa.dubai.gov.ae" - "esuggestqa.dubai.gov.ae" - "esuggestadminqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    } else {
				drop
			}
        }

		"smartsurveyqa.dubai.gov.ae" - "dfpqa.dubai.gov.ae"
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "ShPnt_SmartSurvey_QA_Pool"
			#persist cookie insert smartsurvey_QA 0
        }
		
		"esuggestwsqa.local.dubai.ae" - "ecomplainwsqa.local.dubai.ae"
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "HMC_NET_QA_Pool"
			#persist cookie insert smartsurvey_QA 0
        }
		


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	pool "HMC_NET_QA_Pool"
        }
    }	
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/HMC_NET_QA_SSL {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"mpaykioskQA.dubai.gov.ae" - "myidqa.dubai.gov.ae" - "myidqa2.dubai.gov.ae" - "inquiry.dubai.gov.ae" - "adminmyidqa.dubai.gov.ae"
		- "ecomplainqa.dubai.gov.ae" - "ecomplainadminqa.dubai.gov.ae" - "happinessqa.dubai.gov.ae" - "esuggestqa.dubai.gov.ae" - "esuggestadminqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			pool "HMC_NET_QA_Pool"

        }

		"smartsurveyqa.dubai.gov.ae" - "dfpqa.dubai.gov.ae"
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "ShPnt_SmartSurvey_QA_Pool"
			#persist cookie insert smartsurvey_QA 0
        }


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	pool "HMC_NET_QA_Pool"
        }
    }	
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/HMC_PROD_FAD_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"fadqc.dubai.gov.ae" - "www.fadqc.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/HMC_PROD_FAD_SSL_Base {
    when RULE_INIT
{

}

when HTTP_REQUEST
{
	#set HMC_NET_PROD_SSL_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {

		"fadqc.dubai.gov.ae"

		{
			pool "HMC_PROD_IIS_FAD_Pool"
		}


		default
		{
			#log local0. "Access blocked for Host: [HTTP::host]"
			#pool "HMC_NET_QA_Pool"
			drop
		}
	}
}
}
ltm rule /Common/HelpAG_Rewrite_Debug {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::xxxxx_request_uri
	{
	}
	set static::xxxxx_request_host
	{
	} 
	set static::xxxxx_request_referer
	{
	}
	set static::xxxxx_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::xxxxx_response_setCookie
	{
	}
	set static::xxxxx_response_location
	{
	}
	set static::xxxxx_response_contentLocation
	{
	}
	set static::xxxxx_response_body
	{
	}
}

when HTTP_REQUEST
{
	set someURI [HTTP::uri]

	set flag_debugMe 0
	if {[IP::client_addr] equals "213.42.48.184"}
	{
		set flag_debugMe 1
	}
	STREAM::disable
	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::xxxxx_request_uri] > 0}
	{
	set xxxxx_request_val [HTTP::uri]
	foreach xxxxx_request_rewriteRecord $static::xxxxx_request_uri
	{
		set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
		set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
		if {$xxxxx_request_replace == "nothing"}
		{
			set xxxxx_request_replace ""
		}

		regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
	}
	if { [catch {HTTP::uri $xxxxx_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::xxxxx_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set xxxxx_request_val [HTTP::host]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_host
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}
			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Host $xxxxx_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::xxxxx_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set xxxxx_request_val [HTTP::header value Referer]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_referer
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}

		if { [catch {HTTP::header replace Referer $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::xxxxx_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set xxxxx_request_val [HTTP::header value Cookie]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_cookie
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Cookie $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
}

when HTTP_RESPONSE
{

	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::xxxxx_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set xxxxx_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach xxxxx_request_val $xxxxx_request_val_list
		{
			foreach xxxxx_request_rewriteRecord $static::xxxxx_response_setCookie
			{
				set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
				set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

				if {$xxxxx_request_replace == "nothing"}
				{
					set xxxxx_request_replace ""
				}
				regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $xxxxx_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::xxxxx_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set xxxxx_request_val [HTTP::header value Location]

		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_location
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Location $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::xxxxx_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set xxxxx_request_val [HTTP::header value Content-Location]

		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_contentLocation
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Content-Location $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::xxxxx_response_body] > 0}
	{
		if {$flag_debugMe == 1}
		{
		#	log local0. "entered body"
		#	log local0. "$static::xxxx_response_body"
			#set mymatch [STREAM::match]
            #log local0. "match found on $mymatch"
		}


		set expression ""
		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_body
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			set expression "$expression@$xxxxx_request_find@$xxxxx_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
}

when STREAM_MATCHED
{
	if {$flag_debugMe == 1}
	{
		set theMatch [STREAM::match]

	#	log local0. "match found: $theMatch"
	#	log local0. "on URI: $someURI"
	}
}
}
ltm rule /Common/HelpAG_Rewrite_New {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::xxxxx_request_uri
	{
	}
	set static::xxxxx_request_host
	{
	} 
	set static::xxxxx_request_referer
	{
	}
	set static::xxxxx_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::xxxxx_response_setCookie
	{
	}
	set static::xxxxx_response_location
	{
		":8000====nothing"
	}
	set static::xxxxx_response_contentLocation
	{
	}
	set static::xxxxx_response_body
	{
	}
}

when HTTP_REQUEST
{
	STREAM::disable
	#-----------------
	#URI
	#-----------------
	if { [catch {HTTP::header remove Accept-Encoding	} result] }
	{
	#	log local0. "fffffffffff $result"
	}


	if {[llength $static::xxxxx_request_uri] > 0}
	{
	set xxxxx_request_val [HTTP::uri]
	foreach xxxxx_request_rewriteRecord $static::xxxxx_request_uri
	{
		set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
		set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
		if {$xxxxx_request_replace == "nothing"}
		{
			set xxxxx_request_replace ""
		}

		regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
	}
	if { [catch {HTTP::uri $xxxxx_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::xxxxx_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set xxxxx_request_val [HTTP::host]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_host
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}
			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Host $xxxxx_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::xxxxx_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set xxxxx_request_val [HTTP::header value Referer]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_referer
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}

		if { [catch {HTTP::header replace Referer $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::xxxxx_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set xxxxx_request_val [HTTP::header value Cookie]
		foreach xxxxx_request_rewriteRecord $static::xxxxx_request_cookie
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Cookie $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
}

when HTTP_RESPONSE
{

	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::xxxxx_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set xxxxx_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach xxxxx_request_val $xxxxx_request_val_list
		{
			foreach xxxxx_request_rewriteRecord $static::xxxxx_response_setCookie
			{
				set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
				set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]

				if {$xxxxx_request_replace == "nothing"}
				{
					set xxxxx_request_replace ""
				}
				regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $xxxxx_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::xxxxx_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set xxxxx_request_val [HTTP::header value Location]

		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_location
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Location $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::xxxxx_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set xxxxx_request_val [HTTP::header value Content-Location]

		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_contentLocation
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			regsub -all $xxxxx_request_find $xxxxx_request_val $xxxxx_request_replace xxxxx_request_val
		}
		if { [catch {HTTP::header replace Content-Location $xxxxx_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::xxxxx_response_body] > 0}
	{
		set expression ""
		foreach xxxxx_request_rewriteRecord $static::xxxxx_response_body
		{
			set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
			set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
			if {$xxxxx_request_replace == "nothing"}
			{
				set xxxxx_request_replace ""
			}

			set expression "$expression@$xxxxx_request_find@$xxxxx_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
}
}
ltm rule /Common/HelpAG_Unchunk {
    when RULE_INIT
{
    set static::xxxxx_response_body
    {
        "from====to"
    }
}


when HTTP_REQUEST
{
    HTTP::header remove "Accept-Encoding"

    # Don't allow data to be chunked
    if { [HTTP::version] eq "1.1" }
    {
        if { [HTTP::header is_keepalive] }
        {
            HTTP::header replace "Connection" "Keep-Alive"
        }
        HTTP::version "1.0"
    }
    set collected 0
}

when HTTP_RESPONSE
{
    # Get the content length so we can request the data to be
    # processed in the HTTP_RESPONSE_DATA event.
    if { [HTTP::header exists "Content-Length"] }
    {
        set content_length [HTTP::header "Content-Length"]
    }
    else
    {
        set content_length 0
    }
    # content_length of 0 indicates chunked data (of unknown size)
    if { $content_length > 0 && $content_length < 1048577 }
    {
        set collect_length $content_length
    }
    else
    {
        set collect_length 1048576
    }
    log local0.info "Content Length: $content_length   Collect length: $collect_length"

    if { $collect_length > 0 }
    {
        HTTP::collect $collect_length
    }
}

when HTTP_RESPONSE_DATA
{
    set thePayload [HTTP::payload]

    set expression ""
    foreach xxxxx_request_rewriteRecord $static::xxxxx_response_body
    {
        set xxxxx_request_find [getfield $xxxxx_request_rewriteRecord "====" 1]
        set xxxxx_request_replace [getfield $xxxxx_request_rewriteRecord "====" 2]
        if {$xxxxx_request_replace == "nothing"}
        {
            set xxxxx_request_replace ""
        }

        regsub -all $xxxxx_request_find $thePayload $xxxxx_request_replace thePayload
    }

    HTTP::payload replace 0 $content_length $thePayload

    HTTP::release
    if { $content_length > 0 }
    {
        # for unchunked data, calculate remaining length & re-collect if necessary
        # The HTTP_RESPONSE_DATA event will be triggered again when each collection is complete
        set collected [expr {$collected + $collect_length}]
        set remaining [expr {$content_length - $collected}]
        if { $remaining > 0 }
        {
            if { $remaining < $collect_length }
            {
                set collect_length $remaining
            }
            HTTP::collect $collect_length
        }
    }
    else
    {
        # chunked responses data, continue collecting in 1MB chunks.  Watch for hanging responses here.
        # The HTTP_RESPONSE_DATA event will be triggered again when each collection is complete
        HTTP::collect $collect_length
    }
}
}
ltm rule /Common/Hyperion-PROD-Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"sfp.dof.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://sfp.dof.gov.ae/workspace/index.jsp"
		}

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Hyperion-PROD-SSL-Base {
    when RULE_INIT
{
	set static::Hyperion_SSL_Maint_flag 0
	#set static::Hyperion_SSL_Sorry "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"
}

when HTTP_REQUEST
{
	set Hyperion_SSL_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"sfp.dof.gov.ae"
	    {
			if { ($static::Hyperion_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "213.42.50.180"))) or ([IP::client_addr] equals "MP_Enabled_IP") or ([IP::client_addr] equals "213.42.50.172")} {

				set Hyperion_SSL_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				if { [HTTP::uri] equals "/" } {
					HTTP::redirect "https://sfp.dof.gov.ae/workspace/index.jsp"
				} else {
					pool "Hyperion-PRD-Pool"
					persist cookie insert HYP-PRD 0
				}
			}			
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/IDS_PROD_Base {
    priority 100

when RULE_INIT
{
	set static::IDS_PROD_flag_maintenance 0
	set static::IDS_PROD_Maint_BypassIPs "IDS_PROD_Maint_BypassIPs"
}

when HTTP_REQUEST
{
	set IDS_PROD_GLOBAL_BREAK_ALL 0
	set IDS_PROD_GLOBAL_poolName ""
	set IDS_PROD_GLOBAL_hostName ""
	set IDS_PROD_GLOBAL_uri ""
	set IDS_PROD_goToMaintenance 0

	switch [string tolower [HTTP::host]] { 
        "ids.dubai.gov.ae" - "ids.dubai.gov.ae:443"
	    {
				#log local0. "IDS_PROD_flag_maintenance = $static::IDS_PROD_flag_maintenance"
			if {not ([class match [IP::client_addr] equals $static::IDS_PROD_Maint_BypassIPs]) and $static::IDS_PROD_flag_maintenance == 1} {

				set IDS_PROD_goToMaintenance 1
				#log local0. "IDS_PROD_goToMaintenance = $IDS_PROD_goToMaintenance"
			}

			if {$IDS_PROD_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" } {
				set IDS_PROD_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
			} elseif { [HTTP::uri] equals "/" } {
				set IDS_PROD_GLOBAL_BREAK_ALL 1
				HTTP::redirect "https://myid.dubai.gov.ae/"
			}		
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set IDS_PROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/IDS_PROD_Pool_SSL_Disable {
    priority 300

when SERVER_CONNECTED
{
	if  { $IDS_PROD_GLOBAL_poolName != "IDS_PROD_AS_Pool" } {
	    SSL::disable
	}	
}
}
ltm rule /Common/IDS_PROD_Pool_Select {
    priority 200

when RULE_INIT
{
	set static::IDS_PROD_Sorry "<html><head></head><body><p>Access Denied for the specified Uniform Resource Locator (URL). For assistance contact DSG Support Team.</p></body></html>"

	set static::IDS_PROD_URI_to_Pool_mapping
	{
		# "^/OpenIDRelyingPartyApp(/.*)?\$====IDS_PROD_AS_Pool"
		# "^/SAMLRelyingPartyApp(/.*)?\$====IDS_PROD_AS_Pool"
		"^/carbon/sso-saml/degImages/====IDS_PROD_AS_Pool"
		"^/carbon/sso-saml/eidjs/====IDS_PROD_AS_Pool"
		"^/carbon/openid-provider/degImages/====IDS_PROD_AS_Pool"
		"^/carbon/openid-provider/eidjs/====IDS_PROD_AS_Pool"
		"^/carbon/openid-provider/(.*)?.jsp\$====IDS_PROD_AS_Pool"
		# DON'T CHANGE THE ORDER
		"^/carbon====HHRC_Restricted"
		"^/openid====IDS_PROD_AS_Pool"
		"^/samlsso====IDS_PROD_AS_Pool"
		"^/zfp/====IDS_PROD_AS_8081_Pool"
		"^/SmartGovLogin====IDS_PROD_AS_8081_Pool"
		"^/oauth2====IDS_PROD_AS_Pool"
		"^/services/OAuthService====IDS_PROD_AS_Pool"
		"^/services/wso2carbon-sts====IDS_PROD_AS_Pool"
		"^/services(/.*)?\$====IDS_PROD_AS_Pool"
		"^/commonauth====IDS_PROD_AS_Pool"
		"^/authenticationendpoint====IDS_PROD_AS_Pool"
		"^/MYIDSMApp(/.*)?\$====GSB_ONLY"
	}
}

when HTTP_REQUEST
{
	if {$IDS_PROD_GLOBAL_BREAK_ALL == 0}
	{	
		set IDS_PROD_GLOBAL_hostName [HTTP::host]
		set IDS_PROD_GLOBAL_uri [HTTP::uri]

		#..........Pool Selection.........................................................


		foreach IDS_PROD_mappingRecord $static::IDS_PROD_URI_to_Pool_mapping
		{
			set IDS_PROD_mapping_uri [getfield $IDS_PROD_mappingRecord "====" 1]
			set IDS_PROD_mapping_poolName [getfield $IDS_PROD_mappingRecord "====" 2]

			if {[regexp $IDS_PROD_mapping_uri $IDS_PROD_GLOBAL_uri] == 1} {
				set IDS_PROD_GLOBAL_poolName $IDS_PROD_mapping_poolName
				break
			}
		}

		#.................................................................................
		#............IP Restriction & Pool Assignment.....................................

		switch $IDS_PROD_GLOBAL_poolName
		{

			""
			{	
				#log local0. "URI: $IDS_PROD_GLOBAL_uri & IP: [IP::client_addr] has no Pool"
				set IDS_PROD_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::IDS_PROD_Sorry
				#drop
			}
			"HHRC_Restricted"
			{
				if { [IP::client_addr] equals "213.42.50.181" or ([IP::client_addr] equals "213.42.50.172") or ([IP::client_addr] equals "213.42.55.99")} {
					set IDS_PROD_GLOBAL_poolName "IDS_PROD_AS_Pool"
					pool $IDS_PROD_GLOBAL_poolName
				} else {
					set IDS_PROD_GLOBAL_BREAK_ALL 1
					HTTP::respond 200 content $static::IDS_PROD_Sorry
				}
			}
			"GSB_ONLY"
			{
				#log local0. " Def Allow -- URI: $IDS_PROD_GLOBAL_uri and Pool: $IDS_PROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
				if { [IP::client_addr] equals "213.42.56.171" or [IP::client_addr] equals "213.42.56.170"} {
					set IDS_PROD_GLOBAL_poolName "IDS_PROD_AS_8081_Pool"
					pool $IDS_PROD_GLOBAL_poolName
				} else {
					drop
				}
			}
			default	
			{
				pool $IDS_PROD_GLOBAL_poolName
			}
		}  
	}
}
}
ltm rule /Common/IDS_PROD_Rewrite {
    priority 400

when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::IDS_PROD_8081_request_uri
	{
		"^/zfp/ZFApplet.jar\$====/ZFPApp/ZFApplet.jar"
	}
	set static::IDS_PROD_8081_request_host
	{
	} 
	set static::IDS_PROD_8081_request_referer
	{
	}
	set static::IDS_PROD_8081_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::IDS_PROD_8081_response_setCookie
	{
	}
	set static::IDS_PROD_8081_response_location
	{
	}
	set static::IDS_PROD_8081_response_contentLocation
	{
	}
	set static::IDS_PROD_8081_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$IDS_PROD_GLOBAL_poolName == "IDS_PROD_AS_8081_Pool" and $IDS_PROD_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::IDS_PROD_8081_request_uri] > 0}
	{
	set IDS_PROD_8081_request_val [HTTP::uri]
	foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_request_uri
	{
		set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
		set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]
		if {$IDS_PROD_8081_request_replace == "nothing"}
		{
			set IDS_PROD_8081_request_replace ""
		}

		regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
	}
	if { [catch {HTTP::uri $IDS_PROD_8081_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::IDS_PROD_8081_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set IDS_PROD_8081_request_val [HTTP::host]
		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_request_host
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]

			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}
			regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
		}
		if { [catch {HTTP::header replace Host $IDS_PROD_8081_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::IDS_PROD_8081_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set IDS_PROD_8081_request_val [HTTP::header value Referer]
		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_request_referer
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]

			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}

			regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
		}

		if { [catch {HTTP::header replace Referer $IDS_PROD_8081_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::IDS_PROD_8081_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set IDS_PROD_8081_request_val [HTTP::header value Cookie]
		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_request_cookie
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]

			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}

			regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
		}
		if { [catch {HTTP::header replace Cookie $IDS_PROD_8081_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$IDS_PROD_GLOBAL_poolName == "IDS_PROD_AS_8081_Pool" and $IDS_PROD_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::IDS_PROD_8081_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set IDS_PROD_8081_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach IDS_PROD_8081_request_val $IDS_PROD_8081_request_val_list
		{
			foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_response_setCookie
			{
				set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
				set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]

				if {$IDS_PROD_8081_request_replace == "nothing"}
				{
					set IDS_PROD_8081_request_replace ""
				}
				regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $IDS_PROD_8081_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::IDS_PROD_8081_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set IDS_PROD_8081_request_val [HTTP::header value Location]

		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_response_location
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]
			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}

			regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
		}
		if { [catch {HTTP::header replace Location $IDS_PROD_8081_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::IDS_PROD_8081_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set IDS_PROD_8081_request_val [HTTP::header value Content-Location]

		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_response_contentLocation
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]
			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}

			regsub -all $IDS_PROD_8081_request_find $IDS_PROD_8081_request_val $IDS_PROD_8081_request_replace IDS_PROD_8081_request_val
		}
		if { [catch {HTTP::header replace Content-Location $IDS_PROD_8081_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::IDS_PROD_8081_response_body] > 0}
	{
		set IDS_PROD_8081_expression ""
		foreach IDS_PROD_8081_request_rewriteRecord $static::IDS_PROD_8081_response_body
		{
			set IDS_PROD_8081_request_find [getfield $IDS_PROD_8081_request_rewriteRecord "====" 1]
			set IDS_PROD_8081_request_replace [getfield $IDS_PROD_8081_request_rewriteRecord "====" 2]
			if {$IDS_PROD_8081_request_replace == "nothing"}
			{
				set IDS_PROD_8081_request_replace ""
			}

			set IDS_PROD_8081_expression "$IDS_PROD_8081_expression@$IDS_PROD_8081_request_find@$IDS_PROD_8081_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $IDS_PROD_8081_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$IDS_PROD_GLOBAL_poolName == "IDS_PROD_AS_8081_Pool" and $IDS_PROD_GLOBAL_BREAK_ALL == 0} {

		#set IDS_PROD_8081_theMatch [STREAM::match]

		#log local0. "match found: $IDS_PROD_8081_theMatch"
		#log local0. "on URI: $IDS_PROD_8081_GLOBAL_URI"

    }
}
}
ltm rule /Common/IDS_PROD_Splunk_Log {
    when CLIENT_ACCEPTED
{
    set client_address [IP::client_addr]
    set vip [IP::local_addr]
}

when HTTP_REQUEST 
{
    set http_host [HTTP::host]:[TCP::local_port]
    set http_uri [HTTP::uri]
    set http_url $http_host$http_uri
    set http_method [HTTP::method]
    set http_version [HTTP::version]
    set http_user_agent [HTTP::header "User-Agent"]
    set http_content_type [HTTP::header "Content-Type"]
    set http_referrer [HTTP::header "Referer"]
    set tcp_start_time [clock clicks -milliseconds]
    set req_start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    set virtual_server [LB::server]

    if { [HTTP::header Content-Length] > 0 } then {
        set req_length [HTTP::header "Content-Length"]
    } else {
        set req_length 0
    }
}

when HTTP_RESPONSE
{
    set res_start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    set node [IP::server_addr]
    set node_port [TCP::server_port]
    set http_status [HTTP::status]
    set req_elapsed_time [expr {[clock clicks -milliseconds] - $tcp_start_time}]
    if { [HTTP::header Content-Length] > 0 } then {
        set res_length [HTTP::header "Content-Length"]
    } else {
        set res_length 0
    }
	#log 172.18.50.201 local0.info "SIEM Test from F5 LB1 @4.4" 
	#log local0.info "<190>,f5_irule=Splunk-iRule-HTTP,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,virtual_server=\"$virtual_server\",bytes_in=$req_length,res_start_time=$res_start_time,node=$node,node_port=$node_port,http_status=$http_status,req_elapsed_time=$req_elapsed_time,bytes_out=$res_length\r\n"
   set hsl [HSL::open -proto TCP -pool Pool-syslog]
   HSL::send $hsl "<190>,f5_irule=Splunk-iRule-HTTP,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,virtual_server=\"$virtual_server\",bytes_in=$req_length,res_start_time=$res_start_time,node=$node,node_port=$node_port,http_status=$http_status,req_elapsed_time=$req_elapsed_time,bytes_out=$res_length\r\n"
}

when LB_FAILED
{
    set hsl [HSL::open -proto TCP -pool Pool-syslog]
    HSL::send $hsl "<190>,f5_irule=Splunk-iRule-LB_FAILED,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,virtual_server=\"$virtual_server\",bytes_in=$req_length\r\n"
}
}
ltm rule /Common/Idmsvc_Prod_SSL {
    when RULE_INIT
{
	#set static::Idm_Svcernal_HHRC_IPs "STS_PROD_HHRC_IPs"
}

when HTTP_REQUEST
{
	set Idm_Svc_Serv_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] { 

		"idmsvc.dubai.gov.ae"
		{
			if { $Idm_Svc_Serv_URI starts_with "/passwordsynch"} {
				pool "SSO-SIM-PRD-SSL"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			}	
			 else {
				HTTP::respond 200 content "URL Blocked"
			}
		}
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	reject

		}
	}
}
}
ltm rule /Common/JIRA_CONF_DEV_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"jiradev.dsg.gov.ae" -
		"confluencedev.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://[HTTP::host]"
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/JIRA_CONF_DEV_SSL_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"jiradev.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    pool "JIRA_DEV_Pool"
        }
		"confluencedev.dsg.gov.ae"
		{
			pool "Confluence_DEV_Pool"
		}
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/JIRA_STG_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {

		"jiraqa.dsg.gov.ae" - "sonarqa.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"confluenceqa.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"smartlead.dsg.gov.ae" - "sdptasks.smartdubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"smartspace.dsg.gov.ae" - "sdpspace.smartdubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"bambooqa.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"bitbucketqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"fisheyeqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
	    	if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"smartci.dsg.gov.ae" - "smartchat.dsg.gov.ae" - "filecloud.dsg.gov.ae" - "smartcq.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
	    	if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"smartscm.dsg.gov.ae" - "smartscr.dsg.gov.ae" - "smartbuilds.dsg.gov.ae" - "smartlead.smartdubai.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
        }

		"smartcq.dsg.gov.ae" - "wfoldersqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"

		    	HTTP::redirect "https://[HTTP::host]"

        }
		
		"smartbuilds.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"

		    	HTTP::redirect "https://[HTTP::host]"
        }
		
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/JIRA_STG_SSL_Base {
    when RULE_INIT
{
	set static::JIRA_PROD_GLOBAL_SrcIPs "JIRA_PROD_Allowed_IPs"
	set static::JIRA_PROD_Sorry "<html><head></head><body><p>Sorry, Access Denied...!!!</p></body></html>"
	set static::JIRA_PROD_SSL_Maint_flag 0
	set static::JIRA_PROD_SSL_Maint_flag_smartlead 0
}

when HTTP_REQUEST
{
	set Response_Rewrite 0
	set JIRA_PROD_SSL_GLOBAL_BREAK_ALL 0
	set JIRA_PROD_SSL_poolName ""

	switch [string tolower [HTTP::host]] {

		"jiraqa.dsg.gov.ae" - "jiraqa.dsg.gov.ae:9090"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool JIRA_STG_SSL_Pool
			set JIRA_PROD_SSL_poolName "JIRA_Cloud_STG_SSL_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"confluenceqa.dsg.gov.ae" - "confluenceqa.dsg.gov.ae:7070"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool Confl_QA_STG_SSL_Pool
			set JIRA_PROD_SSL_poolName "Confl_Cloud_QA_STG_SSL_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"bambooqa.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool
			set JIRA_PROD_SSL_poolName "BMBO_Cloud_STG_SSL_8085_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"bitbucketqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set Response_Rewrite 1
			#pool "BitBucket_STG_7990"
			set JIRA_PROD_SSL_poolName "BitBucket_Cloud_STG_7990"
			pool $JIRA_PROD_SSL_poolName
        }

		"fisheyeqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#set Response_Rewrite 1
			#pool "BitBucket_STG_7990"
			set Response_Rewrite 1
			set JIRA_PROD_SSL_poolName "FishEye_Cloud_STG_8060_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"sonarqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#set Response_Rewrite 1
			#pool "BitBucket_STG_7990"
			#set Response_Rewrite 1
			set JIRA_PROD_SSL_poolName "SONAR_QA_9000_pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"smartlead.dsg.gov.ae" - "sdptasks.smartdubai.ae"
	    {

			if { ($static::JIRA_PROD_SSL_Maint_flag_smartlead == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") or ([IP::client_addr] equals "213.42.50.172") } {
				set JIRA_PROD_SSL_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				}
			else {
					set JIRA_PROD_SSL_poolName "JIRA_Prod_SSL_Pool"
					pool $JIRA_PROD_SSL_poolName
				#log local0. "Access allowed for Host: [HTTP::host]"
				}
		}

		"smartspace.dsg.gov.ae" - "sdpspace.smartdubai.ae"
	    {

			if { ($static::JIRA_PROD_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") or ([IP::client_addr] equals "213.42.50.172")} {
				set JIRA_PROD_SSL_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				}
			else {
					set JIRA_PROD_SSL_poolName "Confl_Prod_SSL_Pool"
					pool $JIRA_PROD_SSL_poolName
				#log local0. "Access allowed for Host: [HTTP::host]"
				}
		}

		"smartscr.dsg.gov.ae"
	    {
			if { not [class match [IP::client_addr] equals $static::JIRA_PROD_GLOBAL_SrcIPs] }
					{
						HTTP::respond 200 content $static::JIRA_PROD_Sorry
					}
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set Response_Rewrite 1
			set JIRA_PROD_SSL_poolName "FE_CRU_8060_Pool"
			pool $JIRA_PROD_SSL_poolName
        }


		"smartci.dsg.gov.ae"
	    {
			if { [HTTP::uri] starts_with "/api" or [HTTP::uri] starts_with "/rest" } {
				set JIRA_PROD_SSL_poolName "BMBO_Cloud_PROD_SSL_8085_Pool"
				pool $JIRA_PROD_SSL_poolName
			} elseif { [class match [IP::client_addr] equals $static::JIRA_PROD_GLOBAL_SrcIPs] } {
				set JIRA_PROD_SSL_poolName "BMBO_Cloud_PROD_SSL_8085_Pool"
				pool $JIRA_PROD_SSL_poolName
			} else {
				drop
				#HTTP::respond 200 content $static::JIRA_PROD_Sorry
			}
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool			
        }

		"smartscm.dsg.gov.ae" 
	    {
			if { not [class match [IP::client_addr] equals $static::JIRA_PROD_GLOBAL_SrcIPs] }
					{
						HTTP::respond 200 content $static::JIRA_PROD_Sorry
					}
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool
			set JIRA_PROD_SSL_poolName "BitBucket_Cloud_PROD_7990"
			pool $JIRA_PROD_SSL_poolName
        }

		"smartbuilds.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool
			set JIRA_PROD_SSL_poolName "SmrtBld_Cloud_PROD_80_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"smartlead.smartdubai.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool
			set JIRA_PROD_SSL_poolName "DDE_PROD_JIRA_Pool"
			pool $JIRA_PROD_SSL_poolName
        }

		"smartchat.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#pool BMBO_STG_SSL_8085_Pool
			set JIRA_PROD_SSL_poolName "smartchat__Jira_Pool"
			pool $JIRA_PROD_SSL_poolName
        }
		"filecloud.dsg.gov.ae"
		{
			set JIRA_PROD_SSL_poolName "Pool_10.23.3.86_SSL"
			pool $JIRA_PROD_SSL_poolName
		}

		"smartcq.dsg.gov.ae"
		{
			set JIRA_PROD_SSL_poolName "SONAR_PROD_9000_pool"
			pool $JIRA_PROD_SSL_poolName
		}


		"wfoldersqa.dsg.gov.ae"
		{
			set JIRA_PROD_SSL_poolName "WFolders_STG_SSL_Pool"
			pool $JIRA_PROD_SSL_poolName
		}

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}

when HTTP_RESPONSE
{
	if { $Response_Rewrite } {
		if {[HTTP::is_redirect]} {

			set Orig_Location_str [HTTP::header value Location]
			set String_tobe_Replaced "http://"
			set New_String "https://"
			set New_Location_str ""

			regsub -all $String_tobe_Replaced $Orig_Location_str $New_String New_Location_str

			if { [catch {HTTP::header replace Location $New_Location_str} result] } {
				#	log local0. "fffffffffff $result"
			}
		}
	}
}
}
ltm rule /Common/JIRA_STG_SSL_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $JIRA_PROD_SSL_poolName != "smartchat__Jira_Pool" and $JIRA_PROD_SSL_poolName != "Pool_10.23.3.86_SSL" and $JIRA_PROD_SSL_poolName != "WFolders_STG_SSL_Pool" } {
			SSL::disable
			#log local0. "SSL disabled for pool: $SSO_PROD_wMail_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/LAD_CMS_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] { 
        "icms.legal.dubai.gov.ae"
	    {
		    #if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			#}
        }

		"cms.legal.dubai.gov.ae"
		{
			#if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			#}
		}

		"officeapps1.dubai.gov.ae" - "lps.legal.dubai.gov.ae" - "app.legal.dubai.gov.ae" - "apptest.legal.dubai.gov.ae" - "oldlps.legal.dubai.gov.ae"
		{
			#if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			#}
		}

		"ladinternalcms"
		{
			pool "LAD-IntraWF-80-Pool"
			persist cookie insert LAD_iCMS 0
		}

		"tadween.slc.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/LAD_CMS_SSL_Base {
    when RULE_INIT
{
	set static::LAD_CMS1 "<html><head></head><body><p>Access Denied...!!! </p></body></html>"
}

when HTTP_REQUEST
{
	set LAD_CMS_GLOBAL_poolName ""
	set LAD_CMS_SSL_Rewrite_Select ""
	set LAD_CMS_SSL_BREAK_ALL 0


	switch [string tolower [HTTP::host]] { 
        "icms.legal.dubai.gov.ae"
	    {
			if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.50.180" or [IP::client_addr] equals "213.42.50.170") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} { 
				set LAD_CMS_GLOBAL_poolName "LAD-Intra-WF-Pool"
				pool $LAD_CMS_GLOBAL_poolName
				persist cookie insert LAD_Intranet_CMS 0
			}
			else {
				HTTP::respond 200 content $static::LAD_CMS1
			}
        }

		"cms.legal.dubai.gov.ae"
		{
			set LAD_CMS_GLOBAL_poolName "LAD-DMZ-WF-Pool"
			pool $LAD_CMS_GLOBAL_poolName
			persist cookie insert LAD_CMS 0
		}

		"officeapps1.dubai.gov.ae"
		{
			set LAD_CMS_GLOBAL_poolName "LAD-Office-Web-Pool"
			pool $LAD_CMS_GLOBAL_poolName
			persist cookie insert Office_Apps 0
		}

		"lps.legal.dubai.gov.ae" - "oldlps.legal.dubai.gov.ae"
		{
			set LAD_CMS_GLOBAL_poolName "LAD-DMZ-WF-Pool"
			pool $LAD_CMS_GLOBAL_poolName
			persist cookie insert LAD_LPS 0
		}


		"app.legal.dubai.gov.ae" - "apptest.legal.dubai.gov.ae"
		{
			set LAD_CMS_GLOBAL_poolName "LAD-DMZ-App-Pool"
			pool $LAD_CMS_GLOBAL_poolName
			persist cookie insert LAD_LPS 0
		}

		"tadween.slc.dubai.gov.ae"
		{
			set LAD_CMS_GLOBAL_poolName "SLC-Tadween-80"
			pool $LAD_CMS_GLOBAL_poolName
			persist cookie insert SLC_TAD 0
			set LAD_CMS_SSL_Rewrite_Select "tadween"
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

	STREAM::disable
}


when HTTP_RESPONSE { 

	STREAM::disable  
    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/LAD_CMS_SSL_Disable {
    when SERVER_CONNECTED
{
	if { $LAD_CMS_GLOBAL_poolName == "LAD-DMZ-WF-Pool" or $LAD_CMS_GLOBAL_poolName == "LAD-DMZ-App-Pool" or $LAD_CMS_GLOBAL_poolName == "SLC-Tadween-80"} {
		SSL::disable
		#log local0. "SSL disabled for pool: $LAD_CMS_GLOBAL_poolName"
	}
}
}
ltm rule /Common/LAD_CMS_SSL_Rewrite_tadween {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::LAD_CMS_SSL_request_uri
	{
	}
	set static::LAD_CMS_SSL_request_host
	{
	} 
	set static::LAD_CMS_SSL_request_referer
	{
	}
	set static::LAD_CMS_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::LAD_CMS_SSL_response_setCookie
	{
	}
	set static::LAD_CMS_SSL_response_location
	{
		"http://tadween.slc.dubai.gov.ae====https://tadween.slc.dubai.gov.ae"
	}
	set static::LAD_CMS_SSL_response_contentLocation
	{
		"http://tadween.slc.dubai.gov.ae====https://tadween.slc.dubai.gov.ae"
	}
	set static::LAD_CMS_SSL_response_body
	{
		"http://tadween.slc.dubai.gov.ae====https://tadween.slc.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$LAD_CMS_SSL_Rewrite_Select == "tadween" and $LAD_CMS_SSL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::LAD_CMS_SSL_request_uri] > 0}
	{
	set LAD_CMS_SSL_request_val [HTTP::uri]
	foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_request_uri
	{
		set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
		set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]
		if {$LAD_CMS_SSL_request_replace == "nothing"}
		{
			set LAD_CMS_SSL_request_replace ""
		}

		regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
	}
	if { [catch {HTTP::uri $LAD_CMS_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::LAD_CMS_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set LAD_CMS_SSL_request_val [HTTP::host]
		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_request_host
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]

			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}
			regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $LAD_CMS_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::LAD_CMS_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set LAD_CMS_SSL_request_val [HTTP::header value Referer]
		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_request_referer
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]

			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}

			regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $LAD_CMS_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::LAD_CMS_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set LAD_CMS_SSL_request_val [HTTP::header value Cookie]
		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_request_cookie
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]

			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}

			regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $LAD_CMS_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$LAD_CMS_SSL_Rewrite_Select == "tadween" and $LAD_CMS_SSL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::LAD_CMS_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set LAD_CMS_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_val_list
		{
			foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_response_setCookie
			{
				set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
				set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]

				if {$LAD_CMS_SSL_request_replace == "nothing"}
				{
					set LAD_CMS_SSL_request_replace ""
				}
				regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $LAD_CMS_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::LAD_CMS_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set LAD_CMS_SSL_request_val [HTTP::header value Location]

		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_response_location
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]
			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}

			regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $LAD_CMS_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::LAD_CMS_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set LAD_CMS_SSL_request_val [HTTP::header value Content-Location]

		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_response_contentLocation
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]
			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}

			regsub -all $LAD_CMS_SSL_request_find $LAD_CMS_SSL_request_val $LAD_CMS_SSL_request_replace LAD_CMS_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $LAD_CMS_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::LAD_CMS_SSL_response_body] > 0}
	{
		set LAD_CMS_SSL_expression ""
		foreach LAD_CMS_SSL_request_rewriteRecord $static::LAD_CMS_SSL_response_body
		{
			set LAD_CMS_SSL_request_find [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 1]
			set LAD_CMS_SSL_request_replace [getfield $LAD_CMS_SSL_request_rewriteRecord "====" 2]
			if {$LAD_CMS_SSL_request_replace == "nothing"}
			{
				set LAD_CMS_SSL_request_replace ""
			}

			set LAD_CMS_SSL_expression "$LAD_CMS_SSL_expression@$LAD_CMS_SSL_request_find@$LAD_CMS_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $LAD_CMS_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$LAD_CMS_SSL_Rewrite_Select == "tadween" and $LAD_CMS_SSL_BREAK_ALL == 0} {

		#set LAD_CMS_SSL_theMatch [STREAM::match]

		#log local0. "match found: $LAD_CMS_SSL_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/LogHeaders {
    when HTTP_REQUEST
{	
	set LogString "Client [IP::client_addr]:[TCP::client_port] -> [HTTP::host][HTTP::uri]"

	log local0. "============================================="
	log local0. "$LogString (request)"
	foreach aHeader [HTTP::header names] {
		log local0. "$aHeader: [HTTP::header value $aHeader]"
	}
	log local0. "============================================="

	#if { [HTTP::uri] contains "/udd.js" } {
	#	log local0. "URI: [HTTP::uri]"
	#	if { [HTTP::header exists Accept] } {
	#		log local0. "Accept-Encoding exists"
	#		log local0. "Accept: [HTTP::header value Accept]"
	#		HTTP::header remove Accept
	#		HTTP::header insert Accept "*/*"
	#		log local0. "Accept: [HTTP::header value Accept]"
	#	}
	#}
}

when HTTP_RESPONSE
{
	log local0. "============================================="
	log local0. "$LogString (response) - status: [HTTP::status]"
	foreach aHeader [HTTP::header names] {
		log local0. "$aHeader: [HTTP::header value $aHeader]"
    }
    log local0. "============================================="   
}
}
ltm rule /Common/MS_GRP_PROD_80_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0}
	{
   		set MS_GRP_PROD_80_host [HTTP::host]
		regsub -all -nocase "www\." $MS_GRP_PROD_80_host "" MS_GRP_PROD_80_host
		HTTP::respond 302 Location "http://$MS_GRP_PROD_80_host[HTTP::uri]"
		set MS_GRP_PROD_80_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/MS_GRP_PROD_80_Http_to_Https {
    when RULE_INIT
{
	set static::MS_GRP_PROD_80_HTTP_to_HTTPS_Redirect "ACL_MS_GRP_PROD_HTTP_to_HTTPS"
}


when HTTP_REQUEST
{
	if { [matchclass $static::MS_GRP_PROD_80_HTTP_to_HTTPS_Redirect equals [IP::client_addr]] and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0}
	{
		set MS_GRP_PROD_80_GLOBAL_BREAK_ALL 1
	    if { ([HTTP::uri] equals "/")  }
		{
			HTTP::redirect "https://grp.dubai.gov.ae"
		} else {
			drop
		}
	}
}
}
ltm rule /Common/MS_GRP_PROD_80_Pool_Select {
    when RULE_INIT
{
	#set static::MS_GRP_PROD_80_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

  switch [string tolower [HTTP::host]] { 

	"grp.dubai.gov.ae" 
	{
    	if { not [matchclass [IP::client_addr] equals $static::MS_GRP_PROD_80_GIN_Src]  or [IP::client_addr] equals "172.16.3.12"}
            {
	     	    #Redirecting Non_GIN IPs to access GRP only as HTTPS
	        	##set MS_GRP_PROD_80_GLOBAL_BREAK_All 1
	        	##HTTP::redirect "https://[HTTP::host][HTTP::uri]"
				#set MS_GRP_PROD_80_GLOBAL_poolName $static::MS_GRP_PROD_80_DMZ_Pool
				#pool $MS_GRP_PROD_80_GLOBAL_poolName
				#persist cookie insert DRgrpPROD_DMZ 0	
				#set MS_GRP_PROD_80_GLOBAL_Rewrite_Class "dmz"
	        } else {
	        	#set MS_GRP_PROD_80_GLOBAL_poolName $static::MS_GRP_PROD_80_APP_Pool
	            #pool $MS_GRP_PROD_80_GLOBAL_poolName
	        	#persist cookie insert grpPROD_APP 0
		    }	
	}

	default
    {
		# No default Pool
	}
  }


}

}
}
ltm rule /Common/MS_GRP_PROD_80_Pools_Maintenance {
    when RULE_INIT
{
	set static::MS_GRP_PROD_80_flag_maintenance_grpDMZ 1
	set static::MS_GRP_PROD_80_flag_maintenance_grpAPP 1
}

when HTTP_REQUEST
{
	set MS_GRP_PROD_80_flag_goToMaintenance 0

	switch $MS_GRP_PROD_80_GLOBAL_poolName
	{
		"MS_GRP_PRD_DMZ_Pool"
		{
			if {not ([matchclass $static::MS_GRP_PROD_80_ME equals [IP::client_addr]]) and $static::MS_GRP_PROD_80_flag_maintenance_grpDMZ == 1}
			{
				set MS_GRP_PROD_80_flag_goToMaintenance 1
			}
		}
		"MS_GRP_PRD_APP_Pool"
		{
			if {not ([matchclass $static::MS_GRP_PROD_80_ME equals [IP::client_addr]]) and $static::MS_GRP_PROD_80_flag_maintenance_grpAPP == 1}
			{
				set MS_GRP_PROD_80_flag_goToMaintenance 1
			}
		}
	}

	if {$MS_GRP_PROD_80_flag_goToMaintenance == 1}
	{
		set MS_GRP_PROD_80_GLOBAL_BREAK_ALL 1
		if {[HTTP::uri] ends_with "favicon.ico"}
	    {
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for favicon"	
        HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
		HTTP::header replace "host:" "www.deg.gov.ae"
	    #HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
	    #HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"	
		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_grp 0
        } elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace Host "www.deg.gov.ae"
		HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_grp 0
	} 


}
}
ltm rule /Common/MS_GRP_PROD_80_Rewrite_eJob {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_80_eJob_request_uri
	{
		"^/\$====/OA_HTML/IrcVisitor.jsp?L=AR"
	}
	set static::MS_GRP_PROD_80_eJob_request_host
	{
	} 
	set static::MS_GRP_PROD_80_eJob_request_referer
	{
	}
	set static::MS_GRP_PROD_80_eJob_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_80_eJob_response_setCookie
	{
	}
	set static::MS_GRP_PROD_80_eJob_response_location
	{
		"http://grp.dubai.gov.ae====http://ejob.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_80_eJob_response_contentLocation
	{
		"http://grp.dubai.gov.ae====http://ejob.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_80_eJob_response_body
	{
		"http://grp.dubai.gov.ae====http://ejob.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_eJob_request_uri] > 0}
	{
	set MS_GRP_PROD_80_eJob_request_val [HTTP::uri]
	foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_request_uri
	{
		set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
		{
			set MS_GRP_PROD_80_eJob_request_replace ""
		}

		regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_80_eJob_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_eJob_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_80_eJob_request_val [HTTP::host]
		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_request_host
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}
			regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_80_eJob_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_eJob_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_80_eJob_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_request_referer
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_80_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_eJob_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_80_eJob_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_request_cookie
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_80_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_eJob_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_80_eJob_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_val_list
		{
			foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_response_setCookie
			{
				set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
				{
					set MS_GRP_PROD_80_eJob_request_replace ""
				}
				regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_80_eJob_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_eJob_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_80_eJob_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_response_location
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_80_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_eJob_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_80_eJob_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_response_contentLocation
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_eJob_request_find $MS_GRP_PROD_80_eJob_request_val $MS_GRP_PROD_80_eJob_request_replace MS_GRP_PROD_80_eJob_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_80_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_80_eJob_response_body] > 0}
	{
		set MS_GRP_PROD_80_eJob_expression ""
		foreach MS_GRP_PROD_80_eJob_request_rewriteRecord $static::MS_GRP_PROD_80_eJob_response_body
		{
			set MS_GRP_PROD_80_eJob_request_find [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_eJob_request_replace [getfield $MS_GRP_PROD_80_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_eJob_request_replace ""
			}

			set MS_GRP_PROD_80_eJob_expression "$MS_GRP_PROD_80_eJob_expression@$MS_GRP_PROD_80_eJob_request_find@$MS_GRP_PROD_80_eJob_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_80_eJob_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0}
	{

		#set MS_GRP_PROD_80_eJob_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_80_eJob_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_80_eJob_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_80_Rewrite_grp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_80_grp_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::MS_GRP_PROD_80_grp_request_host
	{
	} 
	set static::MS_GRP_PROD_80_grp_request_referer
	{
	}
	set static::MS_GRP_PROD_80_grp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_80_grp_response_setCookie
	{
	}
	set static::MS_GRP_PROD_80_grp_response_location
	{
	}
	set static::MS_GRP_PROD_80_grp_response_contentLocation
	{
	}
	set static::MS_GRP_PROD_80_grp_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_80_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_grp_request_uri] > 0}
	{
	set MS_GRP_PROD_80_grp_request_val [HTTP::uri]
	foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_request_uri
	{
		set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
		{
			set MS_GRP_PROD_80_grp_request_replace ""
		}

		regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_80_grp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_grp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_80_grp_request_val [HTTP::host]
		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_request_host
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}
			regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_80_grp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_grp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_80_grp_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_request_referer
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_80_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_grp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_80_grp_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_request_cookie
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_80_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_80_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool1" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_grp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_80_grp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_val_list
		{
			foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_response_setCookie
			{
				set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
				{
					set MS_GRP_PROD_80_grp_request_replace ""
				}
				regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_80_grp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_grp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_80_grp_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_response_location
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_80_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_grp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_80_grp_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_response_contentLocation
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_grp_request_find $MS_GRP_PROD_80_grp_request_val $MS_GRP_PROD_80_grp_request_replace MS_GRP_PROD_80_grp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_80_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_80_grp_response_body] > 0}
	{
		set MS_GRP_PROD_80_grp_expression ""
		foreach MS_GRP_PROD_80_grp_request_rewriteRecord $static::MS_GRP_PROD_80_grp_response_body
		{
			set MS_GRP_PROD_80_grp_request_find [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_grp_request_replace [getfield $MS_GRP_PROD_80_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_grp_request_replace ""
			}

			set MS_GRP_PROD_80_grp_expression "$MS_GRP_PROD_80_grp_expression@$MS_GRP_PROD_80_grp_request_find@$MS_GRP_PROD_80_grp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_80_grp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_80_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool1" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

		#set MS_GRP_PROD_80_grp_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_80_grp_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_80_grp_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_80_Rewrite_grpDmz {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_80_dmz_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::MS_GRP_PROD_80_dmz_request_host
	{
	} 
	set static::MS_GRP_PROD_80_dmz_request_referer
	{
	}
	set static::MS_GRP_PROD_80_dmz_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_80_dmz_response_setCookie
	{
	}
	set static::MS_GRP_PROD_80_dmz_response_location
	{
	}
	set static::MS_GRP_PROD_80_dmz_response_contentLocation
	{
	}
	set static::MS_GRP_PROD_80_dmz_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "dmz" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_dmz_request_uri] > 0}
	{
	set MS_GRP_PROD_80_dmz_request_val [HTTP::uri]
	foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_request_uri
	{
		set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
		{
			set MS_GRP_PROD_80_dmz_request_replace ""
		}

		regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_80_dmz_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_dmz_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_80_dmz_request_val [HTTP::host]
		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_request_host
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}
			regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_80_dmz_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_dmz_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_80_dmz_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_request_referer
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_80_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_dmz_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_80_dmz_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_request_cookie
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_80_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "dmz1" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_dmz_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_80_dmz_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_val_list
		{
			foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_response_setCookie
			{
				set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
				{
					set MS_GRP_PROD_80_dmz_request_replace ""
				}
				regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_80_dmz_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_dmz_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_80_dmz_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_response_location
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_80_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_dmz_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_80_dmz_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_response_contentLocation
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_dmz_request_find $MS_GRP_PROD_80_dmz_request_val $MS_GRP_PROD_80_dmz_request_replace MS_GRP_PROD_80_dmz_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_80_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_80_dmz_response_body] > 0}
	{
		set MS_GRP_PROD_80_dmz_expression ""
		foreach MS_GRP_PROD_80_dmz_request_rewriteRecord $static::MS_GRP_PROD_80_dmz_response_body
		{
			set MS_GRP_PROD_80_dmz_request_find [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_dmz_request_replace [getfield $MS_GRP_PROD_80_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_dmz_request_replace ""
			}

			set MS_GRP_PROD_80_dmz_expression "$MS_GRP_PROD_80_dmz_expression@$MS_GRP_PROD_80_dmz_request_find@$MS_GRP_PROD_80_dmz_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_80_dmz_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "dmz1" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

		#set MS_GRP_PROD_80_dmz_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_80_dmz_theMatch"
		#log local0. "on URI: $DR_GRP_PROD_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_80_Rewrite_iSup {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_80_iSup_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::MS_GRP_PROD_80_iSup_request_host
	{
	} 
	set static::MS_GRP_PROD_80_iSup_request_referer
	{
	}
	set static::MS_GRP_PROD_80_iSup_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_80_iSup_response_setCookie
	{
	}
	set static::MS_GRP_PROD_80_iSup_response_location
	{
		"http://grp.dubai.gov.ae====http://isupplier.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_80_iSup_response_contentLocation
	{
		"http://grp.dubai.gov.ae====http://isupplier.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_80_iSup_response_body
	{
		"http://grp.dubai.gov.ae====http://isupplier.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_iSup_request_uri] > 0}
	{
	set MS_GRP_PROD_80_iSup_request_val [HTTP::uri]
	foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_request_uri
	{
		set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
		{
			set MS_GRP_PROD_80_iSup_request_replace ""
		}

		regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_80_iSup_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_iSup_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_80_iSup_request_val [HTTP::host]
		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_request_host
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}
			regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_80_iSup_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_iSup_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_80_iSup_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_request_referer
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_80_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_80_iSup_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_80_iSup_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_request_cookie
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_80_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_iSup_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_80_iSup_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_val_list
		{
			foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_response_setCookie
			{
				set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
				{
					set MS_GRP_PROD_80_iSup_request_replace ""
				}
				regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_80_iSup_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_iSup_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_80_iSup_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_response_location
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_80_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_80_iSup_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_80_iSup_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_response_contentLocation
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_80_iSup_request_find $MS_GRP_PROD_80_iSup_request_val $MS_GRP_PROD_80_iSup_request_replace MS_GRP_PROD_80_iSup_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_80_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_80_iSup_response_body] > 0}
	{
		set MS_GRP_PROD_80_iSup_expression ""
		foreach MS_GRP_PROD_80_iSup_request_rewriteRecord $static::MS_GRP_PROD_80_iSup_response_body
		{
			set MS_GRP_PROD_80_iSup_request_find [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_80_iSup_request_replace [getfield $MS_GRP_PROD_80_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_80_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_80_iSup_request_replace ""
			}

			set MS_GRP_PROD_80_iSup_expression "$MS_GRP_PROD_80_iSup_expression@$MS_GRP_PROD_80_iSup_request_find@$MS_GRP_PROD_80_iSup_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_80_iSup_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_80_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_80_GLOBAL_BREAK_ALL == 0}
	{

		#set MS_GRP_PROD_80_iSup_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_80_iSup_theMatch"

    }
}
}
ltm rule /Common/MS_GRP_PROD_443_Base {
    when RULE_INIT
{

	set static::MS_GRP_PROD_443_GIN_Src "ACL_MS_GRP_PROD_GIN_Supernet"
	set static::MS_GRP_PROD_443_ME "ACL_MS_GRP_PROD_Maint_Exempt"
	set static::MS_GRP_PROD_443_APP_Pool "MS_GRP_PRD_APP_Pool"
	set static::MS_GRP_PROD_443_DMZ_Pool "MS_GRP_PRD_DMZ_Pool"
	set static::MS_GRP_PROD_443_REP_Pool "MS_GRP_PRD_REP_Pool"
	set static::MS_GRP_PROD_443_eJob_for_Dept "PRODeJobRedirect"
}

when HTTP_REQUEST
{
	set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 0
	set MS_GRP_PROD_443_GLOBAL_poolName ""
	set MS_GRP_PROD_443_GLOBAL_Rewrite_Class ""
	set MS_GRP_PROD_443_GLOBAL_URI ""
	#set MS_GRP_PROD_443_Rewrite_Responce_Payload 1

	switch [string tolower [HTTP::host]] { 
        "grp.dubai.gov.ae" - "www.grp.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ejob.dubai.gov.ae" - "www.ejob.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"

			set MS_GRP_PROD_443_URI_GLOBAL_UC [string toupper [HTTP::uri]]
	    	if {[class match $MS_GRP_PROD_443_URI_GLOBAL_UC starts_with $static::MS_GRP_PROD_443_eJob_for_Dept]} {
	        	set eJob_CustomPage_DeptList [class names $static::MS_GRP_PROD_443_eJob_for_Dept]
	            #log local0. "$eJob_CustomPage_DeptList"	
		        foreach eJob_CustomPage_Dept_Select $eJob_CustomPage_DeptList
		        {
		        #log local0. "$eJob_CustomPage_Dept_Select"
		    	set eJob_CustomPage_AR_Dept_Select "${eJob_CustomPage_Dept_Select}_AR"
		    	#log local0. "$eJob_CustomPage_AR_Dept_Select"
		        	if {$MS_GRP_PROD_443_URI_GLOBAL_UC equals $eJob_CustomPage_Dept_Select} {
				    	HTTP::uri "/OA_HTML/${eJob_CustomPage_Dept_Select}IrcVisitor.jsp"
				    	break
				    } elseif {$MS_GRP_PROD_443_URI_GLOBAL_UC equals $eJob_CustomPage_AR_Dept_Select} {
				     	HTTP::uri "/OA_HTML/${eJob_CustomPage_Dept_Select}IrcVisitor.jsp?L=AR"
				    	break
				    } 
		        }
		    }
        }
		"isupplier.dubai.gov.ae" - "www.isupplier.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ejob.ae" - "www.ejob.ae" - "ejob.dubai.ae" - "www.ejob.dubai.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "https://ejob.dubai.gov.ae/OA_HTML/IrcVisitor.jsp?L=AR"
			HTTP::redirect "https://ejob.dubai.gov.ae[HTTP::uri]"
        }
		"isupplier.ae" - "www.isupplier.ae" - "isupplier.gov.ae" - "www.isupplier.gov.ae" - "isupplier.dubai.ae" - "www.isupplier.dubai.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
		    HTTP::redirect "https://isupplier.dubai.gov.ae" 
        }
    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/MS_GRP_PROD_443_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0}
	{
   		set MS_GRP_PROD_443_host [HTTP::host]
		regsub -all -nocase "www\." $MS_GRP_PROD_443_host "" MS_GRP_PROD_443_host
		HTTP::respond 302 Location "https://$MS_GRP_PROD_443_host[HTTP::uri]"
		set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/MS_GRP_PROD_443_Pool_Select {
    when RULE_INIT
{
	#set static::MS_GRP_PROD_443_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

	set MS_GRP_PROD_443_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"grp.dubai.gov.ae" 
	{
    	if { not [matchclass [IP::client_addr] equals $static::MS_GRP_PROD_443_GIN_Src] or [IP::client_addr] equals "172.16.3.12" }
            {
				set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_DMZ_Pool
				pool $MS_GRP_PROD_443_GLOBAL_poolName
				persist cookie insert grpPROD_DMZ 0	
				set MS_GRP_PROD_443_GLOBAL_Rewrite_Class "dmz"
	        } else {
				switch -glob  $MS_GRP_PROD_443_GLOBAL_URI
				{
					"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
					{
						# These URIs are exempted from Rewrite iRule
						set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
	        	        set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_APP_Pool
	                    pool $MS_GRP_PROD_443_GLOBAL_poolName
	        	        persist cookie insert grpPROD_APP 0
					}
					"/discoverer/*" - "//discoverer/*"
					{
						set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_REP_Pool
	                    pool $MS_GRP_PROD_443_GLOBAL_poolName
	        	        persist cookie insert grpPROD_REP 0
					}
					default
					{
						set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_APP_Pool
	                    pool $MS_GRP_PROD_443_GLOBAL_poolName
	        	        persist cookie insert grpPROD_APP 0
					}
				}
		    }	
	}
	"ejob.dubai.gov.ae"
	{
		set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_DMZ_Pool
		pool $MS_GRP_PROD_443_GLOBAL_poolName
		persist cookie insert grpPROD_DMZ_eJob 0
		set MS_GRP_PROD_443_GLOBAL_Rewrite_Class "eJob"
	}
	"isupplier.dubai.gov.ae"
	{
		set MS_GRP_PROD_443_GLOBAL_poolName $static::MS_GRP_PROD_443_DMZ_Pool
		pool $MS_GRP_PROD_443_GLOBAL_poolName
		persist cookie insert grpPROD_DMZ_iSup 0
		set MS_GRP_PROD_443_GLOBAL_Rewrite_Class "iSup"
	}
	default
    {
		# No default Pool
	}
  } 

}

}
}
ltm rule /Common/MS_GRP_PROD_443_Pools_Maintenance {
    when RULE_INIT
{
	set static::MS_GRP_PROD_443_flag_maintenance_grpDMZ 1
	set static::MS_GRP_PROD_443_flag_maintenance_grpAPP 1
}

when HTTP_REQUEST
{
	set MS_GRP_PROD_443_flag_goToMaintenance 0

	switch $MS_GRP_PROD_443_GLOBAL_poolName
	{
		"MS_GRP_PRD_DMZ_Pool"
		{
			if {not ([matchclass $static::MS_GRP_PROD_443_ME equals [IP::client_addr]]) and $static::MS_GRP_PROD_443_flag_maintenance_grpDMZ == 1}
			{
				set MS_GRP_PROD_443_flag_goToMaintenance 1
			}
		}
		"MS_GRP_PRD_APP_Pool"
		{
			if {not ([matchclass $static::MS_GRP_PROD_443_ME equals [IP::client_addr]]) and $static::MS_GRP_PROD_443_flag_maintenance_grpAPP == 1}
			{
				set MS_GRP_PROD_443_flag_goToMaintenance 1
			}
		}
	}

	if {$MS_GRP_PROD_443_flag_goToMaintenance == 1}
	{
		set MS_GRP_PROD_443_GLOBAL_BREAK_ALL 1
		if {[HTTP::uri] ends_with "favicon.ico"}
	    {
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for favicon"	
        HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
		HTTP::header replace Host "www.deg.gov.ae"
	    #HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
	    #HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"	
		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_grp 0
        } elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace Host "www.deg.gov.ae"
		HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		pool "grpMaintenance_pool"
		persist cookie insert AuxPool_grp 0
	} 


}
}
ltm rule /Common/MS_GRP_PROD_443_Rewrite_discov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_443_discov_request_uri
	{
		"^//discoverer/====/discoverer/"
	}
	set static::MS_GRP_PROD_443_discov_request_host
	{
	} 
	set static::MS_GRP_PROD_443_discov_request_referer
	{
	}
	set static::MS_GRP_PROD_443_discov_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_443_discov_response_setCookie
	{
	}
	set static::MS_GRP_PROD_443_discov_response_location
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_discov_response_contentLocation
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_discov_response_body
	{
		"http://grp.dubai.gov.ae:65000====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_REP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_discov_request_uri] > 0}
	{
	set MS_GRP_PROD_443_discov_request_val [HTTP::uri]
	foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_request_uri
	{
		set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
		{
			set MS_GRP_PROD_443_discov_request_replace ""
		}

		regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_443_discov_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_discov_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_443_discov_request_val [HTTP::host]
		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_request_host
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}
			regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_443_discov_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_discov_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_443_discov_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_request_referer
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_443_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_discov_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_443_discov_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_request_cookie
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_443_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_REP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_discov_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_443_discov_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_val_list
		{
			foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_response_setCookie
			{
				set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
				{
					set MS_GRP_PROD_443_discov_request_replace ""
				}
				regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_443_discov_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_discov_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_443_discov_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_response_location
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_443_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_discov_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_443_discov_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_response_contentLocation
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_discov_request_find $MS_GRP_PROD_443_discov_request_val $MS_GRP_PROD_443_discov_request_replace MS_GRP_PROD_443_discov_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_443_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_443_discov_response_body] > 0}
	{
		set MS_GRP_PROD_443_discov_expression ""
		foreach MS_GRP_PROD_443_discov_request_rewriteRecord $static::MS_GRP_PROD_443_discov_response_body
		{
			set MS_GRP_PROD_443_discov_request_find [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_discov_request_replace [getfield $MS_GRP_PROD_443_discov_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_discov_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_discov_request_replace ""
			}

			set MS_GRP_PROD_443_discov_expression "$MS_GRP_PROD_443_discov_expression@$MS_GRP_PROD_443_discov_request_find@$MS_GRP_PROD_443_discov_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_443_discov_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_REP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

		#set MS_GRP_PROD_443_discov_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_443_discov_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_443_Rewrite_eJob {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_443_eJob_request_uri
	{
		"^/\$====/OA_HTML/IrcVisitor.jsp?L=AR"
	}
	set static::MS_GRP_PROD_443_eJob_request_host
	{
	} 
	set static::MS_GRP_PROD_443_eJob_request_referer
	{
	}
	set static::MS_GRP_PROD_443_eJob_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_443_eJob_response_setCookie
	{
	}
	set static::MS_GRP_PROD_443_eJob_response_location
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"http://ejob.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_eJob_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"http://ejob.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_eJob_response_body
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_eJob_request_uri] > 0}
	{
	set MS_GRP_PROD_443_eJob_request_val [HTTP::uri]
	foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_request_uri
	{
		set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
		{
			set MS_GRP_PROD_443_eJob_request_replace ""
		}

		regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_443_eJob_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_eJob_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_443_eJob_request_val [HTTP::host]
		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_request_host
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}
			regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_443_eJob_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_eJob_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_443_eJob_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_request_referer
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_443_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_eJob_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_443_eJob_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_request_cookie
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_443_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_eJob_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_443_eJob_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_val_list
		{
			foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_response_setCookie
			{
				set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
				{
					set MS_GRP_PROD_443_eJob_request_replace ""
				}
				regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_443_eJob_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_eJob_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_443_eJob_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_response_location
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_443_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_eJob_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_443_eJob_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_response_contentLocation
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_eJob_request_find $MS_GRP_PROD_443_eJob_request_val $MS_GRP_PROD_443_eJob_request_replace MS_GRP_PROD_443_eJob_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_443_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_443_eJob_response_body] > 0}
	{
		set MS_GRP_PROD_443_eJob_expression ""
		foreach MS_GRP_PROD_443_eJob_request_rewriteRecord $static::MS_GRP_PROD_443_eJob_response_body
		{
			set MS_GRP_PROD_443_eJob_request_find [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_eJob_request_replace [getfield $MS_GRP_PROD_443_eJob_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_eJob_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_eJob_request_replace ""
			}

			set MS_GRP_PROD_443_eJob_expression "$MS_GRP_PROD_443_eJob_expression@$MS_GRP_PROD_443_eJob_request_find@$MS_GRP_PROD_443_eJob_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_443_eJob_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "eJob" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0}
	{

		#set MS_GRP_PROD_443_eJob_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_443_eJob_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_443_Rewrite_grp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_443_grp_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"https%3A%2F%2Fgrp.dubai.gov.ae====http://grp.dubai.gov.ae"
		"https://grp.dubai.gov.ae====http://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_grp_request_host
	{
	} 
	set static::MS_GRP_PROD_443_grp_request_referer
	{
	}
	set static::MS_GRP_PROD_443_grp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_443_grp_response_setCookie
	{
	}
	set static::MS_GRP_PROD_443_grp_response_location
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_grp_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_grp_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_grp_request_uri] > 0}
	{
	set MS_GRP_PROD_443_grp_request_val [HTTP::uri]
	foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_request_uri
	{
		set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
		{
			set MS_GRP_PROD_443_grp_request_replace ""
		}

		regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_443_grp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_grp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_443_grp_request_val [HTTP::host]
		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_request_host
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}
			regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_443_grp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_grp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_443_grp_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_request_referer
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_443_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_grp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_443_grp_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_request_cookie
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_443_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_grp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_443_grp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_val_list
		{
			foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_response_setCookie
			{
				set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
				{
					set MS_GRP_PROD_443_grp_request_replace ""
				}
				regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_443_grp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_grp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_443_grp_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_response_location
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_443_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_grp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_443_grp_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_response_contentLocation
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_grp_request_find $MS_GRP_PROD_443_grp_request_val $MS_GRP_PROD_443_grp_request_replace MS_GRP_PROD_443_grp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_443_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_443_grp_response_body] > 0}
	{
		set MS_GRP_PROD_443_grp_expression ""
		foreach MS_GRP_PROD_443_grp_request_rewriteRecord $static::MS_GRP_PROD_443_grp_response_body
		{
			set MS_GRP_PROD_443_grp_request_find [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_grp_request_replace [getfield $MS_GRP_PROD_443_grp_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_grp_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_grp_request_replace ""
			}

			set MS_GRP_PROD_443_grp_expression "$MS_GRP_PROD_443_grp_expression@$MS_GRP_PROD_443_grp_request_find@$MS_GRP_PROD_443_grp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_443_grp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_443_GLOBAL_poolName == "MS_GRP_PRD_APP_Pool" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

		#set MS_GRP_PROD_443_grp_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_443_grp_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_443_Rewrite_grpDmz {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_443_dmz_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::MS_GRP_PROD_443_dmz_request_host
	{
	} 
	set static::MS_GRP_PROD_443_dmz_request_referer
	{
	}
	set static::MS_GRP_PROD_443_dmz_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_443_dmz_response_setCookie
	{
	}
	set static::MS_GRP_PROD_443_dmz_response_location
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_dmz_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_dmz_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "dmz" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_dmz_request_uri] > 0}
	{
	set MS_GRP_PROD_443_dmz_request_val [HTTP::uri]
	foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_request_uri
	{
		set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
		{
			set MS_GRP_PROD_443_dmz_request_replace ""
		}

		regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_443_dmz_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_dmz_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_443_dmz_request_val [HTTP::host]
		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_request_host
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}
			regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_443_dmz_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_dmz_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_443_dmz_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_request_referer
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_443_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_dmz_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_443_dmz_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_request_cookie
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_443_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "dmz" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_dmz_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_443_dmz_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_val_list
		{
			foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_response_setCookie
			{
				set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
				{
					set MS_GRP_PROD_443_dmz_request_replace ""
				}
				regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_443_dmz_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_dmz_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_443_dmz_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_response_location
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_443_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_dmz_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_443_dmz_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_response_contentLocation
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_dmz_request_find $MS_GRP_PROD_443_dmz_request_val $MS_GRP_PROD_443_dmz_request_replace MS_GRP_PROD_443_dmz_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_443_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_443_dmz_response_body] > 0}
	{
		set MS_GRP_PROD_443_dmz_expression ""
		foreach MS_GRP_PROD_443_dmz_request_rewriteRecord $static::MS_GRP_PROD_443_dmz_response_body
		{
			set MS_GRP_PROD_443_dmz_request_find [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_dmz_request_replace [getfield $MS_GRP_PROD_443_dmz_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_dmz_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_dmz_request_replace ""
			}

			set MS_GRP_PROD_443_dmz_expression "$MS_GRP_PROD_443_dmz_expression@$MS_GRP_PROD_443_dmz_request_find@$MS_GRP_PROD_443_dmz_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_443_dmz_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "dmz" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

		#set MS_GRP_PROD_443_dmz_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_443_dmz_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_443_dmz_GLOBAL_URI"

    }
}
}
ltm rule /Common/MS_GRP_PROD_443_Rewrite_iSup {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::MS_GRP_PROD_443_iSup_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::MS_GRP_PROD_443_iSup_request_host
	{
	} 
	set static::MS_GRP_PROD_443_iSup_request_referer
	{
	}
	set static::MS_GRP_PROD_443_iSup_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::MS_GRP_PROD_443_iSup_response_setCookie
	{
	}
	set static::MS_GRP_PROD_443_iSup_response_location
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"http://isupplier.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_iSup_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"http://isupplier.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
	set static::MS_GRP_PROD_443_iSup_response_body
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_iSup_request_uri] > 0}
	{
	set MS_GRP_PROD_443_iSup_request_val [HTTP::uri]
	foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_request_uri
	{
		set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
		set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]
		if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
		{
			set MS_GRP_PROD_443_iSup_request_replace ""
		}

		regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
	}
	if { [catch {HTTP::uri $MS_GRP_PROD_443_iSup_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_iSup_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set MS_GRP_PROD_443_iSup_request_val [HTTP::host]
		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_request_host
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}
			regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
		}
		if { [catch {HTTP::header replace Host $MS_GRP_PROD_443_iSup_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_iSup_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set MS_GRP_PROD_443_iSup_request_val [HTTP::header value Referer]
		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_request_referer
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
		}

		if { [catch {HTTP::header replace Referer $MS_GRP_PROD_443_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::MS_GRP_PROD_443_iSup_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set MS_GRP_PROD_443_iSup_request_val [HTTP::header value Cookie]
		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_request_cookie
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]

			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
		}
		if { [catch {HTTP::header replace Cookie $MS_GRP_PROD_443_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_iSup_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set MS_GRP_PROD_443_iSup_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_val_list
		{
			foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_response_setCookie
			{
				set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
				set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]

				if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
				{
					set MS_GRP_PROD_443_iSup_request_replace ""
				}
				regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $MS_GRP_PROD_443_iSup_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_iSup_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set MS_GRP_PROD_443_iSup_request_val [HTTP::header value Location]

		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_response_location
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
		}
		if { [catch {HTTP::header replace Location $MS_GRP_PROD_443_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::MS_GRP_PROD_443_iSup_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set MS_GRP_PROD_443_iSup_request_val [HTTP::header value Content-Location]

		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_response_contentLocation
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}

			regsub -all $MS_GRP_PROD_443_iSup_request_find $MS_GRP_PROD_443_iSup_request_val $MS_GRP_PROD_443_iSup_request_replace MS_GRP_PROD_443_iSup_request_val
		}
		if { [catch {HTTP::header replace Content-Location $MS_GRP_PROD_443_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::MS_GRP_PROD_443_iSup_response_body] > 0}
	{
		set MS_GRP_PROD_443_iSup_expression ""
		foreach MS_GRP_PROD_443_iSup_request_rewriteRecord $static::MS_GRP_PROD_443_iSup_response_body
		{
			set MS_GRP_PROD_443_iSup_request_find [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 1]
			set MS_GRP_PROD_443_iSup_request_replace [getfield $MS_GRP_PROD_443_iSup_request_rewriteRecord "====" 2]
			if {$MS_GRP_PROD_443_iSup_request_replace == "nothing"}
			{
				set MS_GRP_PROD_443_iSup_request_replace ""
			}

			set MS_GRP_PROD_443_iSup_expression "$MS_GRP_PROD_443_iSup_expression@$MS_GRP_PROD_443_iSup_request_find@$MS_GRP_PROD_443_iSup_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $MS_GRP_PROD_443_iSup_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$MS_GRP_PROD_443_GLOBAL_Rewrite_Class == "iSup" and $MS_GRP_PROD_443_GLOBAL_BREAK_ALL == 0}
	{

		#set MS_GRP_PROD_443_iSup_theMatch [STREAM::match]

		#log local0. "match found: $MS_GRP_PROD_443_iSup_theMatch"
		#log local0. "on URI: $MS_GRP_PROD_443_GLOBAL_URI"

    }
}
}
ltm rule /Common/MyID_PROD_EIDA_Base {
    when RULE_INIT
{
	#set static::MyID_PROD_Maint_BypassIPs "MyID_PROD_Maint_BypassIPs"
	set static::MyID_PROD_Sorry "<html><head></head><body><p>Access Denied for the specified Uniform Resource Locator (URL). For assistance contact DSG Support Team.</p></body></html>"
	set static::MyID_PROD_Maint "<html><head></head><body><p>VG Service is currently under maintenance, Please try again later, Sorry for any inconvenience.</p></body></html>"
	set static::Enable_Maintenance 0
}

when HTTP_REQUEST
{
	set MyID_PROD_GLOBAL_BREAK_ALL 0
	set MyID_PROD_GLOBAL_poolName ""
	#set MyID_PROD_GLOBAL_hostName ""
	#set MyID_PROD_GLOBAL_uri ""

	switch [string tolower [HTTP::host]] { 
        "eidavg.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/VGServer/VGServletSM" } {

				if { $static::Enable_Maintenance and (not ([IP::client_addr] equals "213.42.50.181") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")) } {
					HTTP::respond 200 content $static::MyID_PROD_Maint
				} else {
					set MyID_PROD_GLOBAL_poolName "MyID_PROD_EIDA_Pool"
					pool $MyID_PROD_GLOBAL_poolName
					persist none
					HTTP::header insert ServiceProviderName DSGD
				}
			}
			else {
				HTTP::respond 200 content $static::MyID_PROD_Sorry	
			}
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set MyID_PROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	#STREAM::disable
}

when HTTP_RESPONSE
{
	#STREAM::disable
	if { [HTTP::header exists Server] } {
		HTTP::header remove Server
	}
}
}
ltm rule /Common/OEM-DSG-Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"oem.dsg.gov.ae"
	    {
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			HTTP::redirect "https://oem.dsg.gov.ae/em"
        }

		"ucp.dsg.gov.ae" - "ucp.dsg.gov.ae:4443"
		{
			HTTP::redirect "https://ucp.dsg.gov.ae:4443/*"
				#HTTP::redirect	"https://[HTTP::host][HTTP::uri]"
		}

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/OEM-DSG-SSL-Base {
    when HTTP_REQUEST
{
	set OEM_DSG_SSL_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"oem.dsg.gov.ae"
	    {
			#log local0. "Access allowed from [IP::client_addr] to Host: [HTTP::host] on URI: [HTTP::uri]"
			pool "OEM-server"
		}

		"ucp.dsg.gov.ae:4443" - "ucp.dsg.gov.ae"
		{
				pool "Dubainow_ucpprod_admin_Pool"

		}


		default
		{
		 #   log local0. "Access blocked for Host: [HTTP::host]"
			drop
		}
	}	

	STREAM::disable
}

when HTTP_RESPONSE
{   
	STREAM::disable
}
}
ltm rule /Common/OEM-DSG-SSL-Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::OEM_DSG_SSL_request_uri
	{
		"^/\$====/em"
	}
	set static::OEM_DSG_SSL_request_host
	{
	} 
	set static::OEM_DSG_SSL_request_referer
	{
	}
	set static::OEM_DSG_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::OEM_DSG_SSL_response_setCookie
	{
	}
	set static::OEM_DSG_SSL_response_location
	{
		"http://hblpoem1.dubaigov.local:7788====https://oem.dsg.gov.ae"
		"http://oem.dsg.gov.ae====https://oem.dsg.gov.ae"
	}
	set static::OEM_DSG_SSL_response_contentLocation
	{
		"http://hblpoem1.dubaigov.local:7788====https://oem.dsg.gov.ae"
		"http://oem.dsg.gov.ae====https://oem.dsg.gov.ae"
	}
	set static::OEM_DSG_SSL_response_body
	{
		"http://hblpoem1.dubaigov.local:7788====https://oem.dsg.gov.ae"
		"http://oem.dsg.gov.ae====https://oem.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$OEM_DSG_SSL_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::OEM_DSG_SSL_request_uri] > 0}
	{
	set OEM_DSG_SSL_request_val [HTTP::uri]
	foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_request_uri
	{
		set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
		set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]
		if {$OEM_DSG_SSL_request_replace == "nothing"}
		{
			set OEM_DSG_SSL_request_replace ""
		}

		regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
	}
	if { [catch {HTTP::uri $OEM_DSG_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::OEM_DSG_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set OEM_DSG_SSL_request_val [HTTP::host]
		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_request_host
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]

			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}
			regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $OEM_DSG_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::OEM_DSG_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set OEM_DSG_SSL_request_val [HTTP::header value Referer]
		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_request_referer
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]

			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}

			regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $OEM_DSG_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::OEM_DSG_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set OEM_DSG_SSL_request_val [HTTP::header value Cookie]
		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_request_cookie
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]

			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}

			regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $OEM_DSG_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$OEM_DSG_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::OEM_DSG_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set OEM_DSG_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_val_list
		{
			foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_response_setCookie
			{
				set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
				set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]

				if {$OEM_DSG_SSL_request_replace == "nothing"}
				{
					set OEM_DSG_SSL_request_replace ""
				}
				regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $OEM_DSG_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::OEM_DSG_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set OEM_DSG_SSL_request_val [HTTP::header value Location]

		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_response_location
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]
			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}

			regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $OEM_DSG_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::OEM_DSG_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set OEM_DSG_SSL_request_val [HTTP::header value Content-Location]

		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_response_contentLocation
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]
			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}

			regsub -all $OEM_DSG_SSL_request_find $OEM_DSG_SSL_request_val $OEM_DSG_SSL_request_replace OEM_DSG_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $OEM_DSG_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::OEM_DSG_SSL_response_body] > 0}
	{
		set OEM_DSG_SSL_expression ""
		foreach OEM_DSG_SSL_request_rewriteRecord $static::OEM_DSG_SSL_response_body
		{
			set OEM_DSG_SSL_request_find [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 1]
			set OEM_DSG_SSL_request_replace [getfield $OEM_DSG_SSL_request_rewriteRecord "====" 2]
			if {$OEM_DSG_SSL_request_replace == "nothing"}
			{
				set OEM_DSG_SSL_request_replace ""
			}

			set OEM_DSG_SSL_expression "$OEM_DSG_SSL_expression@$OEM_DSG_SSL_request_find@$OEM_DSG_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $OEM_DSG_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$OEM_DSG_SSL_GLOBAL_BREAK_ALL == 0} {

		#set OEM_DSG_SSL_theMatch [STREAM::match]

		#log local0. "match found: $OEM_DSG_SSL_theMatch"
		#log local0. "on URI: $OEM_DSG_SSL_GLOBAL_URI"

    }
}
}
ltm rule /Common/Old_GRP_Services_iRule {
    when RULE_INIT
{
	# This is a old GRP Services iRule [UnUsed] - For Ref Only.

	# Enable to rewrite page content (try a setting of 1 first)
	# (2 = attempt to rewrite host/path and just /path, 1 = attempt to rewrite host/path)
	set static::RewriteResponsePayload 1

	# Added by HelpAG... flag variable to modify reply by streaming or by buffering
	# 0 will have the irule use the streaming commands for content rewrite
	# 1 will have the irule use the regular buffer/modify/release method
	set static::useBuffering 0
	set static::underMaintenance 0

}

when HTTP_REQUEST
{
	if {$static::underMaintenance == 0}
	{
	set stream_disable_cmd "STREAM::disable"


    # Execute the STREAM::disable command.  Use catch to handle any errors. Save the result to $result
    if { [catch {eval $stream_disable_cmd} result] }
	{
       	# There was an error trying to disable the stream profile.
       	log local0. " Error disabling stream filter ($result).If you enable static::RewriteResponsePayload, then you should add a stream profile to the VIP.Else, set static::RewriteResponsePayload to 0 in this iRule."
    }

	# "bypass" tracks whether or not we made any changes inbound so we
   	# can skip changes on the outbound traffic for greater efficiency.
   	set bypass 1

   	# The name of the Data Group (aka class) we are going to use
	set hostIndex [substr [HTTP::host] 0 "."]
   	set clname "servicesRewrite$hostIndex"

	#set poolName "servicesWebPool"	
	#pool $poolName

   	# Initialize other local variables used in this rule
   	set orig_uri "[HTTP::uri]"
   	set orig_host "[HTTP::host]"
   	set clientside ""
   	set serverside ""

	#------------ remove
   	#set newpool ""
   	set ppass ""
	if {$orig_host starts_with "www"}
	{
		regsub -all -nocase "www\." $orig_host "" orig_host
		HTTP::redirect "http://$orig_host$orig_uri"
		return
	}
	if {$orig_uri equals "/" or $orig_uri equals ""}
	{
		set serviceRedirectClname "servicesRedirect"
		set redirectPathRecord [class match -element "$orig_host" equals $serviceRedirectClname]
		# Store each entry in the data group line into a local variable
		set dummy [getfield $redirectPathRecord " " 1]
		set redirectPath [string trimleft [getfield $redirectPathRecord " " 2 ] "{" ]
		# TODO REMOVE -----------------------------------
		set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
		# TODO REMOVE -----------------------------------
		HTTP::redirect "http://$orig_host$redirectPath"
		return
	}
	if {! [class exists $clname]}
	{
      	return
   	}
	else
	{
      	set ppass [class match -element "$orig_host$orig_uri" starts_with $clname]
      	if {$ppass eq ""}
		{
        	# Did not find with hostname, look for just path
        	set ppass [class match -element "$orig_uri" starts_with $clname]
      	}
      	if {$ppass eq ""}
		{
        	return
		}
   	}

   	# Store each entry in the data group line into a local variable
   	set clientside [getfield $ppass " " 1]
   	set serverside [string trimleft [getfield $ppass " " 2 ] "{" ]
	# TODO REMOVE -----------------------------------
   	set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
	# TODO REMOVE -----------------------------------
   	# If serverside is in the form =match=replace=, apply regex


   	if {$clientside starts_with "/"}
	{
      	# No virtual hostname specified, so use the Host header instead
      	set host_clientside $orig_host
      	set path_clientside $clientside
   	}
	else
	{
      	# Virtual host specified in entry, split the host and path
      	set host_clientside [getfield $clientside "/" 1]
      	set path_clientside [substr $clientside [string length $host_clientside]]
   	}
   	# At this point $host_clientside is the client hostname, and $path_clientside
   	# is the client-side path as specified in the data group

   	set host_serverside [getfield $serverside "/" 1]
   	set path_serverside [substr $serverside [string length $host_serverside]]
   	if {$host_serverside eq ""}
	{
      	set host_serverside $host_clientside
   	}
   	# At this point $host_serverside is the server hostname, and $path_serverside
   	# is the server-side path as specified in the data group
   	# In order for directory redirects to work properly we have to be careful with slashes
   	if {$path_clientside equals "/"}
	{
      	# Make sure serverside path ends with / if clientside path is "/"
      	if {!($path_serverside ends_with "/")}
		{
        	append path_serverside "/"
      	}
   	}
	else
	{
      	# Otherwise, neither can end in a / (unless serverside path is just "/")
      	if {$path_serverside ends_with "/"}
		{
        	if {!($path_serverside equals "/")}
			{
           		set path_serverside [string trimright $path_serverside /]
			}
      	}
		if {$path_clientside ends_with "/"}
		{
			set path_clientside [string trimright $path_clientside /]
      	}
   	}

	# As you may or may not know, if you go to http://www.domain.com/dir, and /dir is a directory, the web
   	# server will redirect you to http://www.domain.com/dir/.  The problem is, with ProxyPass, if the client-side
   	# path is http://www.domain.com/dir, but the server-side path is http://www.domain.com/, the server will NOT
   	# redirect the client (it isn't going to redirect you to http://www.domain.com//!).  Here is the problem with
   	# that.  If there is an image referenced on the page, say logo.jpg, the client doesn't realize /dir is a directory
   	# and as such it will try to load http://www.domain.com/logo.jpg and not http://www.domain.com/dir/logo.jpg.  So
   	# ProxyPass has to handle the redirect in this case.  This only really matters if the server-side path is "/",
   	# but since we have the code here we might as well offload all of the redirects that we can (that is whenever
   	# the client path is exactly the client path specified in the data group but not "/").

	if {$orig_uri eq $path_clientside}
	{
      	if {[string index $path_clientside end] ne "/"}
		{
        	set is_https 0
        	if {[PROFILE::exists clientssl] == 1}
			{
        		set is_https 1
        	}
        	# Assumption here is that the browser is hitting http://host/path 
        	# which is a virtual path and we need to do the redirect for them
        	if {$is_https == 1}
			{
            	HTTP::redirect "https://$orig_host$orig_uri/"
         	}
			else
			{
        		HTTP::redirect "http://$orig_host$orig_uri/"
         	}
         	return
      	}
   	}

   	# The following code does the actual rewrite on its way TO 
   	# the backend server. It replaces the URI with the newly 
   	# constructed one and masks the "Host" header with the FQDN 
   	# the backend pool server wants to see. 
   	# 
   	# If a new pool or custom SNAT are to be applied, these are 
   	# done here as well. If a SNAT is used, an X-Forwarded-For 
   	# header is attached to send the original requesting IP 
   	# through to the server. 

   	if {$host_clientside eq $orig_host}
	{
      	if {$orig_uri starts_with $path_clientside}
		{
        	# Do not bypass the iRule in the response
        	set bypass 0
       		# Rewrite the URI
       		HTTP::uri $path_serverside[substr $orig_uri [string length $path_clientside]]
       		# Rewrite the Host header
       		HTTP::header replace Host: $host_serverside
       		# Now alter the Referer header if necessary
       		if { [HTTP::header exists "Referer"] }
			{
       			set protocol [substr [HTTP::header "Referer"] 0 $host_clientside]
       			if {[string length $protocol] > 0}
				{
      				set client_path [findstr [HTTP::header "Referer"] $host_clientside [string length $host_clientside]]
      				if {$client_path starts_with $path_clientside}
					{
           				HTTP::header replace "Referer" "$protocol$host_serverside$path_serverside[substr $client_path [string length $path_clientside]]"
       				}
       			}
      		}
      	}
   	}
   	# If we didn't do any translations above, we can go ahead and skip the rest
   	# of this event.

   	if {$bypass}
	{
    	return
   	}

   	# If we're rewriting the response content, prevent the server from using
   	#   compression in its response by removing the Accept-Encoding header
   	#   from the request.  LTM does not decompress response content before
   	#   applying the stream profile.  This header is only removed if we're
   	#   rewriting response content.
   	if { $static::RewriteResponsePayload }
	{
    	if { [HTTP::header exists "Accept-Encoding"] }
		{
       		HTTP::header remove "Accept-Encoding"
      	}
   	}

	if {$static::useBuffering == 1}
	{
		# ------------------ In this section we restrict chunking
		# remove accept encoding so no compression is used
		HTTP::header remove "Accept-Encoding"

		# Don't allow response data to be chunked
		if { [HTTP::version] eq "1.1" }
		{

			# Force downgrade to HTTP 1.0, but still allow keep-alive connections.
			# Since HTTP 1.1 is keep-alive by default, and 1.0 isn't,
			# we need make sure the headers reflect the keep-alive status.
			# Check if this is a keep alive connection
			if { [HTTP::header is_keepalive] }
			{
				# Replace the connection header value with "Keep-Alive"
				HTTP::header replace "Connection" "Keep-Alive"
			}

			# Set server side request version to 1.0
			# This forces the server to respond without chunking
			HTTP::version "1.0"
		}
	}
	# ------------------ In this section we restrict chunking --------- END
	}
	else
	{	
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace "host:" "www.deg.gov.ae"

		pool "grpMaintenance_pool"
	}
}

when HTTP_RESPONSE
{
	if {$static::underMaintenance == 0}
	{
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"
	if {! [class exists $replyClassName] or $bypass}
	{
		return
	}	

   	# Check if we're rewriting the response
   	if {$static::RewriteResponsePayload}
	{
      	# Configure and enable the stream filter to rewrite the response payload
      	# Hide the command from the iRule parser so it won't generate a validation error
      	#   when not using a stream profile

		# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
      	if {$static::RewriteResponsePayload == 1}
		{
			# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
			if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
			{
				# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# ELSE CODE BLOCK FOR USING BUFFER REWRITE
				if {$static::useBuffering == 0}
				{
					set stream_expression_cmd ""
					foreach rewriteRecord [class get $replyClassName]
					{
						set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
						set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
						set stream_expression_cmd "$stream_expression_cmd @$findRegex@$replaceRegex@"
					}
					regsub -all -nocase "\"" $stream_expression_cmd "\\\"" stream_expression_cmd
					if { [virtual name] starts_with "HTTPS" }
					{
						set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""		
					}
					else
					{
						set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""	
					}
					set stream_enable_cmd "STREAM::enable"

					# Execute the STREAM::expression command.  Use catch to handle any errors. Save the result to $result
					if { [catch {eval $stream_expression_cmd} result] }
					{
						# There was an error trying to set the stream expression.
						log local0. " Error setting stream expression ($result). If you enable static::RewriteResponsePayload,then you should add a stream profile to the VIP.  Else, set static::RewriteResponsePayload to 0 in this iRule."
					}
					else
					{
						# No error setting the stream expression, so try to enable the stream filter
						# Execute the STREAM::enable command.  Use catch to handle any errors. Save the result to $result
						if { [catch {eval $stream_enable_cmd} result] }
						{
							# There was an error trying to enable the stream filter.
							log local0. " error enabling stream filter ($result): $result"
						}
					}
				}
				else
				{
					set content_length 4192000
					if { [HTTP::header exists "Content-Length"] }
					{
						set content_length [HTTP::header "Content-Length"]
					}
					HTTP::collect $content_length
				}
				# END ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# END ---------------- CODE BLOCK FOR USING BUFFER REWRITING
			}
			# END ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------	
		}
	}

	# Fix Location, Content-Location, and URI headers
	foreach header {"Location" "Content-Location" "URI" "Set-Cookie"}
	{
		set newHeader [HTTP::header $header]
		set protocol [substr [HTTP::header $header] 0 $host_serverside]
		if {$newHeader ne ""}
		{
			if {$protocol ne ""}
			{
				set server_path [findstr [HTTP::header $header] $host_serverside [string length $host_serverside]]
				if {$server_path starts_with $path_serverside}
				{
					set newHeader "$protocol$host_clientside$path_clientside[substr $server_path [string length $path_serverside]]"
				}
			}
			set hostName_ServerSide [getfield $host_serverside ":" 1]
			set portNumber_ServerSide [getfield $host_serverside ":" 2]

			set	findRegex "$hostName_ServerSide%3A$portNumber_ServerSide"
			set replaceRegex "$orig_host"

			regsub -all -nocase $findRegex $newHeader $replaceRegex newHeader
			if { [virtual name] starts_with "HTTPS"}
			{
				regsub -all -nocase "http://" $newHeader "https://" newHeader
			}
			HTTP::header replace $header: $newHeader
		}
	}
	if {[HTTP::header exists "Set-Cookie"]}
	{
		array set cookielist { }
		# A response may have multiple Set-Cookie headers, loop through them
		foreach cookievalue [HTTP::header values "Set-Cookie"]
		{
			set cookiename [getfield $cookievalue "=" 1]
			set newcookievalue ""
			# Each cookie starts with name=value and then has more name/value pairs
			foreach element [split $cookievalue ";"]
			{
				set element [string trim $element]
				if {$element contains "="}
				{
					set elementname [getfield $element "=" 1]
					set elementvalue [getfield $element "=" 2]
					if {$elementname eq "domain"}
					{
						# Rewrite domain of cookie, if necessary.
						if {$elementvalue ne ".$host_serverside"}
						{
							set elementvalue ".$host_clientside"
						}
					}
					append newcookievalue "$elementname=$elementvalue; "
				}
				else
				{
					append newcookievalue "$element; "
				}
			}
			# Store new cookie value for later re-insertion. The cookie value
			# string will end with an extra "; " so strip that off here.
			set cookielist($cookiename) [string range $newcookievalue 0 [expr {[string length $newcookievalue] - 3}]]
		}
		# Remove all Set-Cookie headers and re-add them (modified or not)
		HTTP::header remove "Set-Cookie"
		foreach cookiename [array names cookielist]
		{
			HTTP::header insert "Set-Cookie" $cookielist($cookiename)
		}
	}
	}
}

when HTTP_RESPONSE_DATA
{
	if {$static::underMaintenance == 0}
	{
	set debugExtentions 1
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"

	if {! [class exists $replyClassName] or $bypass}
	{
		return
	}

	# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
    if {$static::RewriteResponsePayload == 1}
	{
		#set testPayload [HTTP::payload]
		#set payload [HTTP::payload]
		# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
		if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
		{
			# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
			if {$static::useBuffering == 1}
			{	
				set payload [HTTP::payload]
				set	findRegex "$host_serverside$path_serverside"
				set replaceRegex "$host_clientside$path_clientside"
				regsub -all -nocase $findRegex $payload $replaceRegex payload

				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
					set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
					regsub -all -nocase $findRegex $payload $replaceRegex payload
				}
				if { [virtual name] starts_with "HTTPS" }
				{
					regsub -all -nocase "http://" $payload "https://" payload
				}
			}
			HTTP::payload replace 0 [HTTP::payload length] $payload
		}
		else
		{
			if { $debugExtentions == 1}
			{
				# this code will check file extensions that are not set to be rewritten but that actually have matches
				set payload [HTTP::payload]

				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]

					if { [regexp -all -nocase $findRegex $payload] == 1}
					{
						log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
					}
				}
				set	findRegex "$host_serverside$path_serverside"
				if { [regexp -all -nocase $findRegex $payload] == 1}
				{
					log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
				}
			}
		}
	}	
	}
}
}
ltm rule /Common/Old_GRP_iRules1 {
    when RULE_INIT
{
	# This is a old GRP Production iRule [UnUsed] - For Ref Only.

	# Enable to rewrite page content (try a setting of 1 first)
	# (2 = attempt to rewrite host/path and just /path, 1 = attempt to rewrite host/path)
	set static::RewriteResponsePayload 1

	# Added by HelpAG... flag variable to modify reply by streaming or by buffering
	# 0 will have the irule use the streaming commands for content rewrite
	# 1 will have the irule use the regular buffer/modify/release method
	set static::useBuffering 0


}

when HTTP_REQUEST
{
	if {$GRP_PROD_GLOBALS_breakAll == 0}
	{
	set under_Maintenance 0
	set clientIP  [IP::client_addr]
	set maintenanceException "maintenanceException"

	set flag_maintenanceException  0

	if { [class exists $maintenanceException] }
	{
		if {  [matchclass $clientIP equals $maintenanceException] }
		{
			set flag_maintenanceException  1
		}
	}

	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set stream_disable_cmd "STREAM::disable"
	set redirectToServices 0
    # Execute the STREAM::disable command.  Use catch to handle any errors. Save the result to $result
    if { [catch {eval $stream_disable_cmd} result] }
	{
       	# There was an error trying to disable the stream profile.
       	log local0. " Error disabling stream filter ($result).If you enable static::RewriteResponsePayload, then you should add a stream profile to the VIP.Else, set static::RewriteResponsePayload to 0 in this iRule."
    }

	# "bypass" tracks whether or not we made any changes inbound so we
   	# can skip changes on the outbound traffic for greater efficiency.
   	set bypass 1
	set clname "ProxyPass[virtual name]"

	set hostIndex [substr [HTTP::host] 0 "."]

	if { not [matchclass [IP::client_addr] equals $::GINsubnets]  or $clientIP equals "172.16.3.12"}
    {
		pool "servicesWebPool"
		set clname "GRPrewriteservices"
		set redirectToServices 1
	}
	else
	{
		pool "grpWebPool"
		set clname "ProxyPass[virtual name]"
		set redirectToServices 0			
	}

	set aclName "ACL$hostIndex"
	if { [class exists $aclName] }
	{
		if { not [matchclass [IP::client_addr] equals $aclName] }
		{
			log local1.warning "request blocked"
			reject
		}
	}

   	# Initialize other local variables used in this rule
   	set orig_uri "[HTTP::uri]"
   	set orig_host "[HTTP::host]"
   	set clientside ""
   	set serverside ""
   	set ppass ""

	if {! [class exists $clname]}
	{
      	return
   	}
	else
	{
      	set ppass [class match -element "$orig_host$orig_uri" starts_with $clname]
      	if {$ppass eq ""}
		{
        	# Did not find with hostname, look for just path
        	set ppass [class match -element "$orig_uri" starts_with $clname]
      	}
      	if {$ppass eq ""}
		{
        	return
		}
   	}


   	# Store each entry in the data group line into a local variable
   	set clientside [getfield $ppass " " 1]
   	set serverside [string trimleft [getfield $ppass " " 2 ] "{" ]
	# TODO REMOVE -----------------------------------
   	set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
	# TODO REMOVE -----------------------------------
   	# If serverside is in the form =match=replace=, apply regex


   	if {$clientside starts_with "/"}
	{
      	# No virtual hostname specified, so use the Host header instead
      	set host_clientside $orig_host
      	set path_clientside $clientside
   	}
	else
	{
      	# Virtual host specified in entry, split the host and path
      	set host_clientside [getfield $clientside "/" 1]
      	set path_clientside [substr $clientside [string length $host_clientside]]
   	}
   	# At this point $host_clientside is the client hostname, and $path_clientside
   	# is the client-side path as specified in the data group

   	set host_serverside [getfield $serverside "/" 1]
   	set path_serverside [substr $serverside [string length $host_serverside]]
   	if {$host_serverside eq ""}
	{
      	set host_serverside $host_clientside
   	}
   	# At this point $host_serverside is the server hostname, and $path_serverside
   	# is the server-side path as specified in the data group
   	# In order for directory redirects to work properly we have to be careful with slashes
   	if {$path_clientside equals "/"}
	{
      	# Make sure serverside path ends with / if clientside path is "/"
      	if {!($path_serverside ends_with "/")}
		{
        	append path_serverside "/"
      	}
   	}
	else
	{
      	# Otherwise, neither can end in a / (unless serverside path is just "/")
      	if {$path_serverside ends_with "/"}
		{
        	if {!($path_serverside equals "/")}
			{
           		set path_serverside [string trimright $path_serverside /]
			}
      	}
		if {$path_clientside ends_with "/"}
		{
			set path_clientside [string trimright $path_clientside /]
      	}
   	}

	# As you may or may not know, if you go to http://www.domain.com/dir, and /dir is a directory, the web
   	# server will redirect you to http://www.domain.com/dir/.  The problem is, with ProxyPass, if the client-side
   	# path is http://www.domain.com/dir, but the server-side path is http://www.domain.com/, the server will NOT
   	# redirect the client (it isn't going to redirect you to http://www.domain.com//!).  Here is the problem with
   	# that.  If there is an image referenced on the page, say logo.jpg, the client doesn't realize /dir is a directory
   	# and as such it will try to load http://www.domain.com/logo.jpg and not http://www.domain.com/dir/logo.jpg.  So
   	# ProxyPass has to handle the redirect in this case.  This only really matters if the server-side path is "/",
   	# but since we have the code here we might as well offload all of the redirects that we can (that is whenever
   	# the client path is exactly the client path specified in the data group but not "/").

	if {$orig_uri eq $path_clientside}
	{
      	if {[string index $path_clientside end] ne "/"}
		{
        	set is_https 0
        	if {[PROFILE::exists clientssl] == 1}
			{
        		set is_https 1
        	}
        	# Assumption here is that the browser is hitting http://host/path 
        	# which is a virtual path and we need to do the redirect for them
        	if {$is_https == 1}
			{
            	HTTP::redirect "https://$orig_host$orig_uri/"
         	}
			else
			{
        		HTTP::redirect "http://$orig_host$orig_uri/"
         	}
         	return
      	}
   	}

   	# The following code does the actual rewrite on its way TO 
   	# the backend server. It replaces the URI with the newly 
   	# constructed one and masks the "Host" header with the FQDN 
   	# the backend pool server wants to see. 
   	# 
   	# If a new pool or custom SNAT are to be applied, these are 
   	# done here as well. If a SNAT is used, an X-Forwarded-For 
   	# header is attached to send the original requesting IP 
   	# through to the server. 

   	if {$host_clientside eq $orig_host}
	{
      	if {$orig_uri starts_with $path_clientside}
		{
        	# Do not bypass the iRule in the response
        	set bypass 0
       		# Rewrite the URI
       		HTTP::uri $path_serverside[substr $orig_uri [string length $path_clientside]]
       		# Rewrite the Host header
       		HTTP::header replace Host: $host_serverside
       		# Now alter the Referer header if necessary
       		if { [HTTP::header exists "Referer"] }
			{
       			set protocol [substr [HTTP::header "Referer"] 0 $host_clientside]
       			if {[string length $protocol] > 0}
				{
      				set client_path [findstr [HTTP::header "Referer"] $host_clientside [string length $host_clientside]]
      				if {$client_path starts_with $path_clientside}
					{
           				HTTP::header replace "Referer" "$protocol$host_serverside$path_serverside[substr $client_path [string length $path_clientside]]"
       				}
       			}
      		}
      	}
   	}
   	# If we didn't do any translations above, we can go ahead and skip the rest
   	# of this event.

   	if {$bypass}
	{
    	return
   	}

	if {$static::useBuffering == 1}
	{
		HTTP::header remove "Accept-Encoding"

		# Don't allow data to be chunked
		if { [HTTP::version] eq "1.1" }
		{

			# Force downgrade to HTTP 1.0, but still allow keep-alive connections.
			# Since 1.1 is keep-alive by default, and 1.0 isn't,
			# we need make sure the headers reflect the keep-alive status.

			# Check if this is a keep alive connection
			if { [HTTP::header is_keepalive] }
			{

				# Replace the connection header value with "Keep-Alive"
				HTTP::header replace "Connection" "Keep-Alive"
			}

			# Set server side request version to 1.0
			# This forces the server to respond without chunking
			HTTP::version "1.0"
		}
	}
	}
	else
	{	
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace "host:" "www.deg.gov.ae"

		pool "grpMaintenance_pool"
	}
    }
}

when HTTP_RESPONSE
{
	if {$GRP_PROD_GLOBALS_breakAll == 0}
	{
	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"
	#log local0. "class name: $replyClassName"
	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}	

   	# Check if we're rewriting the response
   	if {$static::RewriteResponsePayload}
	{
      	# Configure and enable the stream filter to rewrite the response payload
      	# Hide the command from the iRule parser so it won't generate a validation error
      	#   when not using a stream profile

		# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
      	if {$static::RewriteResponsePayload == 1}
		{
			# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
			if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
			{
				# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# ELSE CODE BLOCK FOR USING BUFFER REWRITE
				if {$static::useBuffering == 0}
				{
					set stream_expression_cmd ""
					if {not $redirectToServices}
					{
						foreach rewriteRecord [class get $replyClassName]
						{
							set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
							set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
							set stream_expression_cmd "$stream_expression_cmd @$findRegex@$replaceRegex@"
						}

						regsub -all -nocase "\"" $stream_expression_cmd "\\\"" stream_expression_cmd
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""		
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""	
						}
					}
					else
					{
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
					}
					set stream_enable_cmd "STREAM::enable"

					# Execute the STREAM::expression command.  Use catch to handle any errors. Save the result to $result
					if { [catch {eval $stream_expression_cmd} result] }
					{
						# There was an error trying to set the stream expression.
						log local0. " Error setting stream expression ($result). If you enable static::RewriteResponsePayload,then you should add a stream profile to the VIP.  Else, set static::RewriteResponsePayload to 0 in this iRule."
					}
					else
					{
						# No error setting the stream expression, so try to enable the stream filter
						# Execute the STREAM::enable command.  Use catch to handle any errors. Save the result to $result
						if { [catch {eval $stream_enable_cmd} result] }
						{
							# There was an error trying to enable the stream filter.
							log local0. " error enabling stream filter ($result): $result"
						}
					}
				}
				else
				{
					# Trigger collection for up to 1MB of data
					if {[HTTP::header exists "Content-Length"] && [HTTP::header "Content-Length"] <= 1048576}
					{
						set content_length [HTTP::header "Content-Length"]
					}
					else
					{
						set content_length 1048576
					}
					# Check if $content_length has been set and is not set to 0
					if { [info exists content_length] && $content_length > 0}
					{
						HTTP::collect $content_length
					}
				}
				# END ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# END ---------------- CODE BLOCK FOR USING BUFFER REWRITING
			}
			# END ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------	
		}
	}

	# Fix Location, Content-Location, and URI headers
	foreach header {"Location" "Content-Location" "URI"}
	{
		set newHeader [HTTP::header $header]
		set protocol [substr [HTTP::header $header] 0 $host_serverside]
		if {$newHeader ne ""}
		{
			if {$protocol ne ""}
			{
				set server_path [findstr [HTTP::header $header] $host_serverside [string length $host_serverside]]
				if {$server_path starts_with $path_serverside}
				{
					set newHeader "$protocol$host_clientside$path_clientside[substr $server_path [string length $path_serverside]]"
				}
			}
			set hostName_ServerSide [getfield $host_serverside ":" 1]
			set portNumber_ServerSide [getfield $host_serverside ":" 2]

			set	findRegex "$hostName_ServerSide%3A$portNumber_ServerSide"
			set replaceRegex "$orig_host"

			regsub -all -nocase $findRegex $newHeader $replaceRegex newHeader
			if { [virtual name] starts_with "HTTPS"}
			{
				regsub -all -nocase "http://" $newHeader "https://" newHeader
			}
			HTTP::header replace $header: $newHeader
		}
	}
	}
    }
}

when HTTP_RESPONSE_DATA
{
	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set debugExtentions 0
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"


	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}

	# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
    if {$static::RewriteResponsePayload == 1}
	{
		#set testPayload [HTTP::payload]
		#set payload [HTTP::payload]
		# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
		if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
		{
			# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
			if {$static::useBuffering == 1}
			{	
				set payload [HTTP::payload]

				set	findRegex "$host_serverside$path_serverside"
				set replaceRegex "$host_clientside$path_clientside"
				regsub -all -nocase $findRegex $payload $replaceRegex payload

				if {not $redirectToServices}
				{
					foreach rewriteRecord [class get $replyClassName]
					{
						set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
						set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
						regsub -all -nocase $findRegex $payload $replaceRegex payload
					}
					if { [virtual name] starts_with "HTTPS" }
					{
						regsub -all -nocase "http://" $payload "https://" payload
					}
				}
			}
			HTTP::payload replace 0 [HTTP::payload length] $payload
		}
		else
		{
			if { $debugExtentions == 1}
			{
				# this code will check file extensions that are not set to be rewritten but that actually have matches
				set payload [HTTP::payload]
				if {not $redirectToServices}
				{
				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]

					if { [regexp -all -nocase $findRegex $payload] == 1}
					{
						log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
					}
				}
				}
				set	findRegex "$host_serverside$path_serverside"
				if { [regexp -all -nocase $findRegex $payload] == 1}
				{
					log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
				}
			}
		}
	}	
	}
}
}
ltm rule /Common/Old_GRP_iRules2 {
    when RULE_INIT
{
	# This is a old GRP Production iRule [UnUsed] - For Ref Only.

	# Enable to rewrite page content (try a setting of 1 first)
	# (2 = attempt to rewrite host/path and just /path, 1 = attempt to rewrite host/path)
	set static::RewriteResponsePayload 1

	# Added by HelpAG... flag variable to modify reply by streaming or by buffering
	# 0 will have the irule use the streaming commands for content rewrite
	# 1 will have the irule use the regular buffer/modify/release method
	set static::useBuffering 0


}

when HTTP_REQUEST
{
	set under_Maintenance 0
	set clientIP  [IP::client_addr]
	set maintenanceException "maintenanceException"

	set flag_maintenanceException  0

	if { [class exists $maintenanceException] }
	{
		if {  [matchclass $clientIP equals $maintenanceException] }
		{
			set flag_maintenanceException  1
		}
	}

	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set stream_disable_cmd "STREAM::disable"
	set redirectToServices 0
    # Execute the STREAM::disable command.  Use catch to handle any errors. Save the result to $result
    if { [catch {eval $stream_disable_cmd} result] }
	{
       	# There was an error trying to disable the stream profile.
       	log local0. " Error disabling stream filter ($result).If you enable static::RewriteResponsePayload, then you should add a stream profile to the VIP.Else, set static::RewriteResponsePayload to 0 in this iRule."
    }

	# "bypass" tracks whether or not we made any changes inbound so we
   	# can skip changes on the outbound traffic for greater efficiency.
   	set bypass 1
	set clname "ProxyPass[virtual name]"

	set hostIndex [substr [HTTP::host] 0 "."]

	if { not [matchclass [IP::client_addr] equals $::GINsubnets]  or $clientIP equals "172.16.3.12"}
    {
		pool "servicesWebPool"
		set clname "GRPrewriteservices"
		set redirectToServices 1
	}
	else
	{
		pool "grpWebPool"
		set clname "ProxyPass[virtual name]"
		set redirectToServices 0			
	}

	set aclName "ACL$hostIndex"
	if { [class exists $aclName] }
	{
		if { not [matchclass [IP::client_addr] equals $aclName] }
		{
			log local1.warning "request blocked"
			reject
		}
	}

   	# Initialize other local variables used in this rule
   	set orig_uri "[HTTP::uri]"
   	set orig_host "[HTTP::host]"
   	set clientside ""
   	set serverside ""
   	set ppass ""

	if {! [class exists $clname]}
	{
      	return
   	}
	else
	{
      	set ppass [class match -element "$orig_host$orig_uri" starts_with $clname]
      	if {$ppass eq ""}
		{
        	# Did not find with hostname, look for just path
        	set ppass [class match -element "$orig_uri" starts_with $clname]
      	}
      	if {$ppass eq ""}
		{
        	return
		}
   	}


   	# Store each entry in the data group line into a local variable
   	set clientside [getfield $ppass " " 1]
   	set serverside [string trimleft [getfield $ppass " " 2 ] "{" ]
	# TODO REMOVE -----------------------------------
   	set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
	# TODO REMOVE -----------------------------------
   	# If serverside is in the form =match=replace=, apply regex


   	if {$clientside starts_with "/"}
	{
      	# No virtual hostname specified, so use the Host header instead
      	set host_clientside $orig_host
      	set path_clientside $clientside
   	}
	else
	{
      	# Virtual host specified in entry, split the host and path
      	set host_clientside [getfield $clientside "/" 1]
      	set path_clientside [substr $clientside [string length $host_clientside]]
   	}
   	# At this point $host_clientside is the client hostname, and $path_clientside
   	# is the client-side path as specified in the data group

   	set host_serverside [getfield $serverside "/" 1]
   	set path_serverside [substr $serverside [string length $host_serverside]]
   	if {$host_serverside eq ""}
	{
      	set host_serverside $host_clientside
   	}
   	# At this point $host_serverside is the server hostname, and $path_serverside
   	# is the server-side path as specified in the data group
   	# In order for directory redirects to work properly we have to be careful with slashes
   	if {$path_clientside equals "/"}
	{
      	# Make sure serverside path ends with / if clientside path is "/"
      	if {!($path_serverside ends_with "/")}
		{
        	append path_serverside "/"
      	}
   	}
	else
	{
      	# Otherwise, neither can end in a / (unless serverside path is just "/")
      	if {$path_serverside ends_with "/"}
		{
        	if {!($path_serverside equals "/")}
			{
           		set path_serverside [string trimright $path_serverside /]
			}
      	}
		if {$path_clientside ends_with "/"}
		{
			set path_clientside [string trimright $path_clientside /]
      	}
   	}

	# As you may or may not know, if you go to http://www.domain.com/dir, and /dir is a directory, the web
   	# server will redirect you to http://www.domain.com/dir/.  The problem is, with ProxyPass, if the client-side
   	# path is http://www.domain.com/dir, but the server-side path is http://www.domain.com/, the server will NOT
   	# redirect the client (it isn't going to redirect you to http://www.domain.com//!).  Here is the problem with
   	# that.  If there is an image referenced on the page, say logo.jpg, the client doesn't realize /dir is a directory
   	# and as such it will try to load http://www.domain.com/logo.jpg and not http://www.domain.com/dir/logo.jpg.  So
   	# ProxyPass has to handle the redirect in this case.  This only really matters if the server-side path is "/",
   	# but since we have the code here we might as well offload all of the redirects that we can (that is whenever
   	# the client path is exactly the client path specified in the data group but not "/").

	if {$orig_uri eq $path_clientside}
	{
      	if {[string index $path_clientside end] ne "/"}
		{
        	set is_https 0
        	if {[PROFILE::exists clientssl] == 1}
			{
        		set is_https 1
        	}
        	# Assumption here is that the browser is hitting http://host/path 
        	# which is a virtual path and we need to do the redirect for them
        	if {$is_https == 1}
			{
            	HTTP::redirect "https://$orig_host$orig_uri/"
         	}
			else
			{
        		HTTP::redirect "http://$orig_host$orig_uri/"
         	}
         	return
      	}
   	}

   	# The following code does the actual rewrite on its way TO 
   	# the backend server. It replaces the URI with the newly 
   	# constructed one and masks the "Host" header with the FQDN 
   	# the backend pool server wants to see. 
   	# 
   	# If a new pool or custom SNAT are to be applied, these are 
   	# done here as well. If a SNAT is used, an X-Forwarded-For 
   	# header is attached to send the original requesting IP 
   	# through to the server. 

   	if {$host_clientside eq $orig_host}
	{
      	if {$orig_uri starts_with $path_clientside}
		{
        	# Do not bypass the iRule in the response
        	set bypass 0
       		# Rewrite the URI
       		HTTP::uri $path_serverside[substr $orig_uri [string length $path_clientside]]
       		# Rewrite the Host header
       		HTTP::header replace Host: $host_serverside
       		# Now alter the Referer header if necessary
       		if { [HTTP::header exists "Referer"] }
			{
       			set protocol [substr [HTTP::header "Referer"] 0 $host_clientside]
       			if {[string length $protocol] > 0}
				{
      				set client_path [findstr [HTTP::header "Referer"] $host_clientside [string length $host_clientside]]
      				if {$client_path starts_with $path_clientside}
					{
           				HTTP::header replace "Referer" "$protocol$host_serverside$path_serverside[substr $client_path [string length $path_clientside]]"
       				}
       			}
      		}
      	}
   	}
   	# If we didn't do any translations above, we can go ahead and skip the rest
   	# of this event.

   	if {$bypass}
	{
    	return
   	}

	if {$static::useBuffering == 1}
	{
		HTTP::header remove "Accept-Encoding"

		# Don't allow data to be chunked
		if { [HTTP::version] eq "1.1" }
		{

			# Force downgrade to HTTP 1.0, but still allow keep-alive connections.
			# Since 1.1 is keep-alive by default, and 1.0 isn't,
			# we need make sure the headers reflect the keep-alive status.

			# Check if this is a keep alive connection
			if { [HTTP::header is_keepalive] }
			{

				# Replace the connection header value with "Keep-Alive"
				HTTP::header replace "Connection" "Keep-Alive"
			}

			# Set server side request version to 1.0
			# This forces the server to respond without chunking
			HTTP::version "1.0"
		}
	}
	}
	else
	{	
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace "host:" "www.deg.gov.ae"

		pool "grpMaintenance_pool"
	}
}

when HTTP_RESPONSE
{
	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"
	#log local0. "class name: $replyClassName"
	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}	

   	# Check if we're rewriting the response
   	if {$static::RewriteResponsePayload}
	{
      	# Configure and enable the stream filter to rewrite the response payload
      	# Hide the command from the iRule parser so it won't generate a validation error
      	#   when not using a stream profile

		# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
      	if {$static::RewriteResponsePayload == 1}
		{
			# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
			if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
			{
				# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# ELSE CODE BLOCK FOR USING BUFFER REWRITE
				if {$static::useBuffering == 0}
				{
					set stream_expression_cmd ""
					if {not $redirectToServices}
					{
						foreach rewriteRecord [class get $replyClassName]
						{
							set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
							set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
							set stream_expression_cmd "$stream_expression_cmd @$findRegex@$replaceRegex@"
						}

						regsub -all -nocase "\"" $stream_expression_cmd "\\\"" stream_expression_cmd
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""		
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""	
						}
					}
					else
					{
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
					}
					set stream_enable_cmd "STREAM::enable"

					# Execute the STREAM::expression command.  Use catch to handle any errors. Save the result to $result
					if { [catch {eval $stream_expression_cmd} result] }
					{
						# There was an error trying to set the stream expression.
						log local0. " Error setting stream expression ($result). If you enable static::RewriteResponsePayload,then you should add a stream profile to the VIP.  Else, set static::RewriteResponsePayload to 0 in this iRule."
					}
					else
					{
						# No error setting the stream expression, so try to enable the stream filter
						# Execute the STREAM::enable command.  Use catch to handle any errors. Save the result to $result
						if { [catch {eval $stream_enable_cmd} result] }
						{
							# There was an error trying to enable the stream filter.
							log local0. " error enabling stream filter ($result): $result"
						}
					}
				}
				else
				{
					# Trigger collection for up to 1MB of data
					if {[HTTP::header exists "Content-Length"] && [HTTP::header "Content-Length"] <= 1048576}
					{
						set content_length [HTTP::header "Content-Length"]
					}
					else
					{
						set content_length 1048576
					}
					# Check if $content_length has been set and is not set to 0
					if { [info exists content_length] && $content_length > 0}
					{
						HTTP::collect $content_length
					}
				}
				# END ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# END ---------------- CODE BLOCK FOR USING BUFFER REWRITING
			}
			# END ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------	
		}
	}

	# Fix Location, Content-Location, and URI headers
	foreach header {"Location" "Content-Location" "URI"}
	{
		set newHeader [HTTP::header $header]
		set protocol [substr [HTTP::header $header] 0 $host_serverside]
		if {$newHeader ne ""}
		{
			if {$protocol ne ""}
			{
				set server_path [findstr [HTTP::header $header] $host_serverside [string length $host_serverside]]
				if {$server_path starts_with $path_serverside}
				{
					set newHeader "$protocol$host_clientside$path_clientside[substr $server_path [string length $path_serverside]]"
				}
			}
			set hostName_ServerSide [getfield $host_serverside ":" 1]
			set portNumber_ServerSide [getfield $host_serverside ":" 2]

			set	findRegex "$hostName_ServerSide%3A$portNumber_ServerSide"
			set replaceRegex "$orig_host"

			regsub -all -nocase $findRegex $newHeader $replaceRegex newHeader
			if { [virtual name] starts_with "HTTPS"}
			{
				regsub -all -nocase "http://" $newHeader "https://" newHeader
			}
			HTTP::header replace $header: $newHeader
		}
	}
	}
}

when HTTP_RESPONSE_DATA
{
	if {$under_Maintenance == 0 or $flag_maintenanceException == 1}
	{
	set debugExtentions 0
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"


	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}

	# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
    if {$static::RewriteResponsePayload == 1}
	{
		#set testPayload [HTTP::payload]
		#set payload [HTTP::payload]
		# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
		if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
		{
			# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
			if {$static::useBuffering == 1}
			{	
				set payload [HTTP::payload]

				set	findRegex "$host_serverside$path_serverside"
				set replaceRegex "$host_clientside$path_clientside"
				regsub -all -nocase $findRegex $payload $replaceRegex payload

				if {not $redirectToServices}
				{
					foreach rewriteRecord [class get $replyClassName]
					{
						set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
						set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
						regsub -all -nocase $findRegex $payload $replaceRegex payload
					}
					if { [virtual name] starts_with "HTTPS" }
					{
						regsub -all -nocase "http://" $payload "https://" payload
					}
				}
			}
			HTTP::payload replace 0 [HTTP::payload length] $payload
		}
		else
		{
			if { $debugExtentions == 1}
			{
				# this code will check file extensions that are not set to be rewritten but that actually have matches
				set payload [HTTP::payload]
				if {not $redirectToServices}
				{
				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]

					if { [regexp -all -nocase $findRegex $payload] == 1}
					{
						log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
					}
				}
				}
				set	findRegex "$host_serverside$path_serverside"
				if { [regexp -all -nocase $findRegex $payload] == 1}
				{
					log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
				}
			}
		}
	}	
	}
}
}
ltm rule /Common/Old_GRP_iRules3 {
    when RULE_INIT
{
	# This is a old GRP Production iRule [UnUsed] - For Ref Only.

	# Enable to rewrite page content (try a setting of 1 first)
	# (2 = attempt to rewrite host/path and just /path, 1 = attempt to rewrite host/path)
	set static::RewriteResponsePayload 1

	# Added by HelpAG... flag variable to modify reply by streaming or by buffering
	# 0 will have the irule use the streaming commands for content rewrite
	# 1 will have the irule use the regular buffer/modify/release method
	set static::useBuffering 0
	set static::underMaintenance 0
}

when HTTP_REQUEST
{
	if {$static::underMaintenance == 0}
	{
	set stream_disable_cmd "STREAM::disable"
	set redirectToServices 0
    # Execute the STREAM::disable command.  Use catch to handle any errors. Save the result to $result
    if { [catch {eval $stream_disable_cmd} result] }
	{
       	# There was an error trying to disable the stream profile.
       	log local0. " Error disabling stream filter ($result).If you enable static::RewriteResponsePayload, then you should add a stream profile to the VIP.Else, set static::RewriteResponsePayload to 0 in this iRule."
    }

	# "bypass" tracks whether or not we made any changes inbound so we
   	# can skip changes on the outbound traffic for greater efficiency.
   	set bypass 1
	set clname "ProxyPass[virtual name]"

	set hostIndex [substr [HTTP::host] 0 "."]

	if { not [matchclass [IP::client_addr] equals $::GINsubnets]  or [IP::client_addr] equals "192.168.1.1"}
    {
		pool "servicesWebPool"
		set clname "GRPrewriteservices"
		set redirectToServices 1
	}
	else
	{
		pool "grpWebPool"
		set clname "ProxyPass[virtual name]"
		set redirectToServices 0			
	}

	set aclName "ACL$hostIndex"
	if { [class exists $aclName] }
	{
		if { not [matchclass [IP::client_addr] equals $aclName] }
		{
			log local1.warning "request blocked"
			reject
		}
	}

   	# Initialize other local variables used in this rule
   	set orig_uri "[HTTP::uri]"
   	set orig_host "[HTTP::host]"
   	set clientside ""
   	set serverside ""
   	set ppass ""

	if {! [class exists $clname]}
	{
      	return
   	}
	else
	{
      	set ppass [class match -element "$orig_host$orig_uri" starts_with $clname]
      	if {$ppass eq ""}
		{
        	# Did not find with hostname, look for just path
        	set ppass [class match -element "$orig_uri" starts_with $clname]
      	}
      	if {$ppass eq ""}
		{
        	return
		}
   	}


   	# Store each entry in the data group line into a local variable
   	set clientside [getfield $ppass " " 1]
   	set serverside [string trimleft [getfield $ppass " " 2 ] "{" ]
	# TODO REMOVE -----------------------------------
   	set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
	# TODO REMOVE -----------------------------------
   	# If serverside is in the form =match=replace=, apply regex


   	if {$clientside starts_with "/"}
	{
      	# No virtual hostname specified, so use the Host header instead
      	set host_clientside $orig_host
      	set path_clientside $clientside
   	}
	else
	{
      	# Virtual host specified in entry, split the host and path
      	set host_clientside [getfield $clientside "/" 1]
      	set path_clientside [substr $clientside [string length $host_clientside]]
   	}
   	# At this point $host_clientside is the client hostname, and $path_clientside
   	# is the client-side path as specified in the data group

   	set host_serverside [getfield $serverside "/" 1]
   	set path_serverside [substr $serverside [string length $host_serverside]]
   	if {$host_serverside eq ""}
	{
      	set host_serverside $host_clientside
   	}
   	# At this point $host_serverside is the server hostname, and $path_serverside
   	# is the server-side path as specified in the data group
   	# In order for directory redirects to work properly we have to be careful with slashes
   	if {$path_clientside equals "/"}
	{
      	# Make sure serverside path ends with / if clientside path is "/"
      	if {!($path_serverside ends_with "/")}
		{
        	append path_serverside "/"
      	}
   	}
	else
	{
      	# Otherwise, neither can end in a / (unless serverside path is just "/")
      	if {$path_serverside ends_with "/"}
		{
        	if {!($path_serverside equals "/")}
			{
           		set path_serverside [string trimright $path_serverside /]
			}
      	}
		if {$path_clientside ends_with "/"}
		{
			set path_clientside [string trimright $path_clientside /]
      	}
   	}

	# As you may or may not know, if you go to http://www.domain.com/dir, and /dir is a directory, the web
   	# server will redirect you to http://www.domain.com/dir/.  The problem is, with ProxyPass, if the client-side
   	# path is http://www.domain.com/dir, but the server-side path is http://www.domain.com/, the server will NOT
   	# redirect the client (it isn't going to redirect you to http://www.domain.com//!).  Here is the problem with
   	# that.  If there is an image referenced on the page, say logo.jpg, the client doesn't realize /dir is a directory
   	# and as such it will try to load http://www.domain.com/logo.jpg and not http://www.domain.com/dir/logo.jpg.  So
   	# ProxyPass has to handle the redirect in this case.  This only really matters if the server-side path is "/",
   	# but since we have the code here we might as well offload all of the redirects that we can (that is whenever
   	# the client path is exactly the client path specified in the data group but not "/").

	if {$orig_uri eq $path_clientside}
	{
      	if {[string index $path_clientside end] ne "/"}
		{
        	set is_https 0
        	if {[PROFILE::exists clientssl] == 1}
			{
        		set is_https 1
        	}
        	# Assumption here is that the browser is hitting http://host/path 
        	# which is a virtual path and we need to do the redirect for them
        	if {$is_https == 1}
			{
            	HTTP::redirect "https://$orig_host$orig_uri/"
         	}
			else
			{
        		HTTP::redirect "http://$orig_host$orig_uri/"
         	}
         	return
      	}
   	}

   	# The following code does the actual rewrite on its way TO 
   	# the backend server. It replaces the URI with the newly 
   	# constructed one and masks the "Host" header with the FQDN 
   	# the backend pool server wants to see. 
   	# 
   	# If a new pool or custom SNAT are to be applied, these are 
   	# done here as well. If a SNAT is used, an X-Forwarded-For 
   	# header is attached to send the original requesting IP 
   	# through to the server. 

   	if {$host_clientside eq $orig_host}
	{
      	if {$orig_uri starts_with $path_clientside}
		{
        	# Do not bypass the iRule in the response
        	set bypass 0
       		# Rewrite the URI
       		HTTP::uri $path_serverside[substr $orig_uri [string length $path_clientside]]
       		# Rewrite the Host header
       		HTTP::header replace Host: $host_serverside
       		# Now alter the Referer header if necessary
       		if { [HTTP::header exists "Referer"] }
			{
       			set protocol [substr [HTTP::header "Referer"] 0 $host_clientside]
       			if {[string length $protocol] > 0}
				{
      				set client_path [findstr [HTTP::header "Referer"] $host_clientside [string length $host_clientside]]
      				if {$client_path starts_with $path_clientside}
					{
           				HTTP::header replace "Referer" "$protocol$host_serverside$path_serverside[substr $client_path [string length $path_clientside]]"
       				}
       			}
      		}
      	}
   	}
   	# If we didn't do any translations above, we can go ahead and skip the rest
   	# of this event.

   	if {$bypass}
	{
    	return
   	}

	if {$static::useBuffering == 1}
	{
		HTTP::header remove "Accept-Encoding"

		# Don't allow data to be chunked
		if { [HTTP::version] eq "1.1" }
		{

			# Force downgrade to HTTP 1.0, but still allow keep-alive connections.
			# Since 1.1 is keep-alive by default, and 1.0 isn't,
			# we need make sure the headers reflect the keep-alive status.

			# Check if this is a keep alive connection
			if { [HTTP::header is_keepalive] }
			{

				# Replace the connection header value with "Keep-Alive"
				HTTP::header replace "Connection" "Keep-Alive"
			}

			# Set server side request version to 1.0
			# This forces the server to respond without chunking
			HTTP::version "1.0"
		}
	}
	}
	else
	{	
		if {[HTTP::uri] ends_with "SystemMaintenance.jpg"}
		{
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else
		{
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}
		HTTP::header replace "host:" "www.deg.gov.ae"

		pool "grpMaintenance_pool"
	}
}

when HTTP_RESPONSE
{
	if {$static::underMaintenance == 0}
	{
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"
	#log local0. "class name: $replyClassName"
	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}	

   	# Check if we're rewriting the response
   	if {$static::RewriteResponsePayload}
	{
      	# Configure and enable the stream filter to rewrite the response payload
      	# Hide the command from the iRule parser so it won't generate a validation error
      	#   when not using a stream profile

		# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
      	if {$static::RewriteResponsePayload == 1}
		{
			# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
			if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
			{
				# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# ELSE CODE BLOCK FOR USING BUFFER REWRITE
				if {$static::useBuffering == 0}
				{
					set stream_expression_cmd ""
					if {not $redirectToServices}
					{
						foreach rewriteRecord [class get $replyClassName]
						{
							set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
							set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
							set stream_expression_cmd "$stream_expression_cmd @$findRegex@$replaceRegex@"
						}

						regsub -all -nocase "\"" $stream_expression_cmd "\\\"" stream_expression_cmd
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""		
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""	
						}
					}
					else
					{
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
					}
					set stream_enable_cmd "STREAM::enable"

					# Execute the STREAM::expression command.  Use catch to handle any errors. Save the result to $result
					if { [catch {eval $stream_expression_cmd} result] }
					{
						# There was an error trying to set the stream expression.
						log local0. " Error setting stream expression ($result). If you enable static::RewriteResponsePayload,then you should add a stream profile to the VIP.  Else, set static::RewriteResponsePayload to 0 in this iRule."
					}
					else
					{
						# No error setting the stream expression, so try to enable the stream filter
						# Execute the STREAM::enable command.  Use catch to handle any errors. Save the result to $result
						if { [catch {eval $stream_enable_cmd} result] }
						{
							# There was an error trying to enable the stream filter.
							log local0. " error enabling stream filter ($result): $result"
						}
					}
				}
				else
				{
					# Trigger collection for up to 1MB of data
					if {[HTTP::header exists "Content-Length"] && [HTTP::header "Content-Length"] <= 1048576}
					{
						set content_length [HTTP::header "Content-Length"]
					}
					else
					{
						set content_length 1048576
					}
					# Check if $content_length has been set and is not set to 0
					if { [info exists content_length] && $content_length > 0}
					{
						HTTP::collect $content_length
					}
				}
				# END ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# END ---------------- CODE BLOCK FOR USING BUFFER REWRITING
			}
			# END ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------	
		}
	}

	# Fix Location, Content-Location, and URI headers
	foreach header {"Location" "Content-Location" "URI"}
	{
		set newHeader [HTTP::header $header]
		set protocol [substr [HTTP::header $header] 0 $host_serverside]
		if {$newHeader ne ""}
		{
			if {$protocol ne ""}
			{
				set server_path [findstr [HTTP::header $header] $host_serverside [string length $host_serverside]]
				if {$server_path starts_with $path_serverside}
				{
					set newHeader "$protocol$host_clientside$path_clientside[substr $server_path [string length $path_serverside]]"
				}
			}
			set hostName_ServerSide [getfield $host_serverside ":" 1]
			set portNumber_ServerSide [getfield $host_serverside ":" 2]

			set	findRegex "$hostName_ServerSide%3A$portNumber_ServerSide"
			set replaceRegex "$orig_host"

			regsub -all -nocase $findRegex $newHeader $replaceRegex newHeader
			if { [virtual name] starts_with "HTTPS"}
			{
				regsub -all -nocase "http://" $newHeader "https://" newHeader
			}
			HTTP::header replace $header: $newHeader
		}
	}
	}
}

when HTTP_RESPONSE_DATA
{
	if {$static::underMaintenance == 0}
	{
	set debugExtentions 0
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"


	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}

	# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
    if {$static::RewriteResponsePayload == 1}
	{
		#set testPayload [HTTP::payload]
		#set payload [HTTP::payload]
		# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
		if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
		{
			# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
			if {$static::useBuffering == 1}
			{	
				set payload [HTTP::payload]

				set	findRegex "$host_serverside$path_serverside"
				set replaceRegex "$host_clientside$path_clientside"
				regsub -all -nocase $findRegex $payload $replaceRegex payload

				if {not $redirectToServices}
				{
					foreach rewriteRecord [class get $replyClassName]
					{
						set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
						set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
						regsub -all -nocase $findRegex $payload $replaceRegex payload
					}
					if { [virtual name] starts_with "HTTPS" }
					{
						regsub -all -nocase "http://" $payload "https://" payload
					}
				}
			}
			HTTP::payload replace 0 [HTTP::payload length] $payload
		}
		else
		{
			if { $debugExtentions == 1}
			{
				# this code will check file extensions that are not set to be rewritten but that actually have matches
				set payload [HTTP::payload]
				if {not $redirectToServices}
				{
				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]

					if { [regexp -all -nocase $findRegex $payload] == 1}
					{
						log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
					}
				}
				}
				set	findRegex "$host_serverside$path_serverside"
				if { [regexp -all -nocase $findRegex $payload] == 1}
				{
					log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
				}
			}
		}
	}	
	}
}
}
ltm rule /Common/ProxyPass {
    when RULE_INIT
{
	# This is ProxyPass iRule - For Ref Only.

	# Enable to rewrite page content (try a setting of 1 first)
	# (2 = attempt to rewrite host/path and just /path, 1 = attempt to rewrite host/path)
	set static::RewriteResponsePayload 1

	# Added by HelpAG... flag variable to modify reply by streaming or by buffering
	# 0 will have the irule use the streaming commands for content rewrite
	# 1 will have the irule use the regular buffer/modify/release method
	set static::useBuffering 0
}

when HTTP_REQUEST
{
	set stream_disable_cmd "STREAM::disable"
	set redirectToServices 0
    # Execute the STREAM::disable command.  Use catch to handle any errors. Save the result to $result
    if { [catch {eval $stream_disable_cmd} result] }
	{
       	# There was an error trying to disable the stream profile.
       	log local0. " Error disabling stream filter ($result).If you enable static::RewriteResponsePayload, then you should add a stream profile to the VIP.Else, set static::RewriteResponsePayload to 0 in this iRule."
    }

	# "bypass" tracks whether or not we made any changes inbound so we
   	# can skip changes on the outbound traffic for greater efficiency.
   	set bypass 1
	set clname "ProxyPass[virtual name]"

	set hostIndex [substr [HTTP::host] 0 "."]

	if { not [matchclass [IP::client_addr] equals $::GINsubnets]  or [IP::client_addr] equals "192.168.1.1"}
    {
		pool "servicesWebPool"
		set clname "GRPrewriteservices"
		set redirectToServices 1
	}
	else
	{
		pool "grpWebPool"
		set clname "ProxyPass[virtual name]"
		set redirectToServices 0			
	}

	set aclName "ACL$hostIndex"
	if { [class exists $aclName] }
	{
		if { not [matchclass [IP::client_addr] equals $aclName] }
		{
			log local1.warning "request blocked"
			reject
		}
	}

   	# Initialize other local variables used in this rule
   	set orig_uri "[HTTP::uri]"
   	set orig_host "[HTTP::host]"
   	set clientside ""
   	set serverside ""
   	set ppass ""

	if {! [class exists $clname]}
	{
      	return
   	}
	else
	{
      	set ppass [class match -element "$orig_host$orig_uri" starts_with $clname]
      	if {$ppass eq ""}
		{
        	# Did not find with hostname, look for just path
        	set ppass [class match -element "$orig_uri" starts_with $clname]
      	}
      	if {$ppass eq ""}
		{
        	return
		}
   	}


   	# Store each entry in the data group line into a local variable
   	set clientside [getfield $ppass " " 1]
   	set serverside [string trimleft [getfield $ppass " " 2 ] "{" ]
	# TODO REMOVE -----------------------------------
   	set dummy [string trimright [getfield $ppass " " 3 ] "}" ]
	# TODO REMOVE -----------------------------------
   	# If serverside is in the form =match=replace=, apply regex


   	if {$clientside starts_with "/"}
	{
      	# No virtual hostname specified, so use the Host header instead
      	set host_clientside $orig_host
      	set path_clientside $clientside
   	}
	else
	{
      	# Virtual host specified in entry, split the host and path
      	set host_clientside [getfield $clientside "/" 1]
      	set path_clientside [substr $clientside [string length $host_clientside]]
   	}
   	# At this point $host_clientside is the client hostname, and $path_clientside
   	# is the client-side path as specified in the data group

   	set host_serverside [getfield $serverside "/" 1]
   	set path_serverside [substr $serverside [string length $host_serverside]]
   	if {$host_serverside eq ""}
	{
      	set host_serverside $host_clientside
   	}
   	# At this point $host_serverside is the server hostname, and $path_serverside
   	# is the server-side path as specified in the data group
   	# In order for directory redirects to work properly we have to be careful with slashes
   	if {$path_clientside equals "/"}
	{
      	# Make sure serverside path ends with / if clientside path is "/"
      	if {!($path_serverside ends_with "/")}
		{
        	append path_serverside "/"
      	}
   	}
	else
	{
      	# Otherwise, neither can end in a / (unless serverside path is just "/")
      	if {$path_serverside ends_with "/"}
		{
        	if {!($path_serverside equals "/")}
			{
           		set path_serverside [string trimright $path_serverside /]
			}
      	}
		if {$path_clientside ends_with "/"}
		{
			set path_clientside [string trimright $path_clientside /]
      	}
   	}

	# As you may or may not know, if you go to http://www.domain.com/dir, and /dir is a directory, the web
   	# server will redirect you to http://www.domain.com/dir/.  The problem is, with ProxyPass, if the client-side
   	# path is http://www.domain.com/dir, but the server-side path is http://www.domain.com/, the server will NOT
   	# redirect the client (it isn't going to redirect you to http://www.domain.com//!).  Here is the problem with
   	# that.  If there is an image referenced on the page, say logo.jpg, the client doesn't realize /dir is a directory
   	# and as such it will try to load http://www.domain.com/logo.jpg and not http://www.domain.com/dir/logo.jpg.  So
   	# ProxyPass has to handle the redirect in this case.  This only really matters if the server-side path is "/",
   	# but since we have the code here we might as well offload all of the redirects that we can (that is whenever
   	# the client path is exactly the client path specified in the data group but not "/").

	if {$orig_uri eq $path_clientside}
	{
      	if {[string index $path_clientside end] ne "/"}
		{
        	set is_https 0
        	if {[PROFILE::exists clientssl] == 1}
			{
        		set is_https 1
        	}
        	# Assumption here is that the browser is hitting http://host/path 
        	# which is a virtual path and we need to do the redirect for them
        	if {$is_https == 1}
			{
            	HTTP::redirect "https://$orig_host$orig_uri/"
         	}
			else
			{
        		HTTP::redirect "http://$orig_host$orig_uri/"
         	}
         	return
      	}
   	}

   	# The following code does the actual rewrite on its way TO 
   	# the backend server. It replaces the URI with the newly 
   	# constructed one and masks the "Host" header with the FQDN 
   	# the backend pool server wants to see. 
   	# 
   	# If a new pool or custom SNAT are to be applied, these are 
   	# done here as well. If a SNAT is used, an X-Forwarded-For 
   	# header is attached to send the original requesting IP 
   	# through to the server. 

   	if {$host_clientside eq $orig_host}
	{
      	if {$orig_uri starts_with $path_clientside}
		{
        	# Do not bypass the iRule in the response
        	set bypass 0
       		# Rewrite the URI
       		HTTP::uri $path_serverside[substr $orig_uri [string length $path_clientside]]
       		# Rewrite the Host header
       		HTTP::header replace Host: $host_serverside
       		# Now alter the Referer header if necessary
       		if { [HTTP::header exists "Referer"] }
			{
       			set protocol [substr [HTTP::header "Referer"] 0 $host_clientside]
       			if {[string length $protocol] > 0}
				{
      				set client_path [findstr [HTTP::header "Referer"] $host_clientside [string length $host_clientside]]
      				if {$client_path starts_with $path_clientside}
					{
           				HTTP::header replace "Referer" "$protocol$host_serverside$path_serverside[substr $client_path [string length $path_clientside]]"
       				}
       			}
      		}
      	}
   	}
   	# If we didn't do any translations above, we can go ahead and skip the rest
   	# of this event.

   	if {$bypass}
	{
    	return
   	}

	if {$static::useBuffering == 1}
	{
		HTTP::header remove "Accept-Encoding"

		# Don't allow data to be chunked
		if { [HTTP::version] eq "1.1" }
		{

			# Force downgrade to HTTP 1.0, but still allow keep-alive connections.
			# Since 1.1 is keep-alive by default, and 1.0 isn't,
			# we need make sure the headers reflect the keep-alive status.

			# Check if this is a keep alive connection
			if { [HTTP::header is_keepalive] }
			{

				# Replace the connection header value with "Keep-Alive"
				HTTP::header replace "Connection" "Keep-Alive"
			}

			# Set server side request version to 1.0
			# This forces the server to respond without chunking
			HTTP::version "1.0"
		}
	}

}

when HTTP_RESPONSE
{
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"
	#log local0. "class name: $replyClassName"
	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}	

   	# Check if we're rewriting the response
   	if {$static::RewriteResponsePayload}
	{
      	# Configure and enable the stream filter to rewrite the response payload
      	# Hide the command from the iRule parser so it won't generate a validation error
      	#   when not using a stream profile

		# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
      	if {$static::RewriteResponsePayload == 1}
		{
			# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
			if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
			{
				# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# ELSE CODE BLOCK FOR USING BUFFER REWRITE
				if {$static::useBuffering == 0}
				{
					set stream_expression_cmd ""
					if {not $redirectToServices}
					{
						foreach rewriteRecord [class get $replyClassName]
						{
							set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
							set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
							set stream_expression_cmd "$stream_expression_cmd @$findRegex@$replaceRegex@"
						}

						regsub -all -nocase "\"" $stream_expression_cmd "\\\"" stream_expression_cmd
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""		
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ $stream_expression_cmd\""	
						}
					}
					else
					{
						if { [virtual name] starts_with "HTTPS" }
						{
							set stream_expression_cmd "STREAM::expression \"@http://@https://@ @HTTP://@https://@ @$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
						else
						{
							set stream_expression_cmd "STREAM::expression \"@$host_serverside$path_serverside@$host_clientside$path_clientside@ \""
						}
					}
					set stream_enable_cmd "STREAM::enable"

					# Execute the STREAM::expression command.  Use catch to handle any errors. Save the result to $result
					if { [catch {eval $stream_expression_cmd} result] }
					{
						# There was an error trying to set the stream expression.
						log local0. " Error setting stream expression ($result). If you enable static::RewriteResponsePayload,then you should add a stream profile to the VIP.  Else, set static::RewriteResponsePayload to 0 in this iRule."
					}
					else
					{
						# No error setting the stream expression, so try to enable the stream filter
						# Execute the STREAM::enable command.  Use catch to handle any errors. Save the result to $result
						if { [catch {eval $stream_enable_cmd} result] }
						{
							# There was an error trying to enable the stream filter.
							log local0. " error enabling stream filter ($result): $result"
						}
					}
				}
				else
				{
					# Trigger collection for up to 1MB of data
					if {[HTTP::header exists "Content-Length"] && [HTTP::header "Content-Length"] <= 1048576}
					{
						set content_length [HTTP::header "Content-Length"]
					}
					else
					{
						set content_length 1048576
					}
					# Check if $content_length has been set and is not set to 0
					if { [info exists content_length] && $content_length > 0}
					{
						HTTP::collect $content_length
					}
				}
				# END ---------------- CODE BLOCK FOR USING STREAM REWRITING
						# END ---------------- CODE BLOCK FOR USING BUFFER REWRITING
			}
			# END ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------	
		}
	}

	# Fix Location, Content-Location, and URI headers
	foreach header {"Location" "Content-Location" "URI"}
	{
		set newHeader [HTTP::header $header]
		set protocol [substr [HTTP::header $header] 0 $host_serverside]
		if {$newHeader ne ""}
		{
			if {$protocol ne ""}
			{
				set server_path [findstr [HTTP::header $header] $host_serverside [string length $host_serverside]]
				if {$server_path starts_with $path_serverside}
				{
					set newHeader "$protocol$host_clientside$path_clientside[substr $server_path [string length $path_serverside]]"
				}
			}
			set hostName_ServerSide [getfield $host_serverside ":" 1]
			set portNumber_ServerSide [getfield $host_serverside ":" 2]

			set	findRegex "$hostName_ServerSide%3A$portNumber_ServerSide"
			set replaceRegex "$orig_host"

			regsub -all -nocase $findRegex $newHeader $replaceRegex newHeader
			if { [virtual name] starts_with "HTTPS"}
			{
				regsub -all -nocase "http://" $newHeader "https://" newHeader
			}
			HTTP::header replace $header: $newHeader
		}
	}
}

when HTTP_RESPONSE_DATA
{
	set debugExtentions 0
	set tempAppend "Reply"
	set replyClassName "$clname$tempAppend"


	if {! [class exists $replyClassName] or $bypass}
	{
		if {not $redirectToServices}
		{
			return
		}
	}

	# START ---------------- CODE BLOCK FOR REQWRITING HTML BODY ----------------
    if {$static::RewriteResponsePayload == 1}
	{
		#set testPayload [HTTP::payload]
		#set payload [HTTP::payload]
		# IF FILE TYPE IS IN THE ALLOW LIST (See rewriteContentTypes grouplist frm the GUI
		if { [matchclass $orig_uri contains $::rewriteExtentions] or $orig_uri  ends_with "/"}
		{
			# START ---------------- CODE BLOCK FOR USING STREAM REWRITING
			if {$static::useBuffering == 1}
			{	
				set payload [HTTP::payload]

				set	findRegex "$host_serverside$path_serverside"
				set replaceRegex "$host_clientside$path_clientside"
				regsub -all -nocase $findRegex $payload $replaceRegex payload

				if {not $redirectToServices}
				{
					foreach rewriteRecord [class get $replyClassName]
					{
						set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]
						set replaceRegex [string trimright [string trimleft [getfield $rewriteRecord " " 2 ] "{" ] "}" ]
						regsub -all -nocase $findRegex $payload $replaceRegex payload
					}
					if { [virtual name] starts_with "HTTPS" }
					{
						regsub -all -nocase "http://" $payload "https://" payload
					}
				}
			}
			HTTP::payload replace 0 [HTTP::payload length] $payload
		}
		else
		{
			if { $debugExtentions == 1}
			{
				# this code will check file extensions that are not set to be rewritten but that actually have matches
				set payload [HTTP::payload]
				if {not $redirectToServices}
				{
				foreach rewriteRecord [class get $replyClassName]
				{
					set findRegex [string trimright [string trimleft [getfield $rewriteRecord " " 1] "{" ] "}" ]

					if { [regexp -all -nocase $findRegex $payload] == 1}
					{
						log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
					}
				}
				}
				set	findRegex "$host_serverside$path_serverside"
				if { [regexp -all -nocase $findRegex $payload] == 1}
				{
					log local0.debug "regex: $findRegex found in $orig_uri but not rewritten"
				}
			}
		}
	}	
}
}
ltm rule /Common/RSA_Self_Service_P {
    when HTTP_REQUEST {
	set orig_uri "[HTTP::uri]"

	if { [string tolower [HTTP::host]] equals "degrsa.dubai.gov.ae" } {
		if { "$orig_uri" equals "/" } {	HTTP::redirect "https://degrsa.dubai.gov.ae/console-selfservice/SelfService.do" }

	}
}

when HTTP_REQUEST_SEND {

	clientside {
		switch [IP::server_addr] {
			213.42.48.165 { set host_header_value "ginrsa.gin.dubai.ae:7004" }
			213.42.48.175 { set host_header_value "ginacs.gin.dubai.ae:7004" }
			default { set host_header_value "" }
		}
		if {$host_header_value ne ""} { 
			# Replace the host header value
			HTTP::header replace Host $host_header_value
			log local0. "[IP::client_addr]:[TCP::client_port]: Replaced Host header with $host_header_value."
        }
		else { reject }
	}
}


when HTTP_RESPONSE
{
	if { [HTTP::is_redirect] } {
		set orig_Location [HTTP::header Location]
		if { $orig_Location contains "ginrsa.gin.dubai.ae:7004" } {
				HTTP::header replace Location [string map {"ginrsa.gin.dubai.ae:7004" "degrsa.dubai.gov.ae"} [HTTP::header Location]]
		}
		elseif { $orig_Location contains "ginacs.gin.dubai.ae:7004" } {
				HTTP::header replace Location [string map {"ginacs.gin.dubai.ae:7004" "degrsa.dubai.gov.ae"} [HTTP::header Location]]
		}

	} 
}
}
ltm rule /Common/Remedy-Testing {
    when HTTP_REQUEST {

set ServiceDesk_GLOBAL_hostName [HTTP::host]	

switch [string tolower [HTTP::host]] { 

    "degservicedesk.dubai.gov.ae" 
	{	
    if  { ([HTTP::uri] equals "/") } {
		HTTP::uri "/arsys/"    
        }
    pool remedy-midtier-8080
	#persist cookie insert REMEDY_DSD "0d 00:00:00"
	HTTP::header replace Host "servicedesk.msg.dubai.gov.ae:8080" 
	}

    "servicedesk.dubai.gov.ae" 
	{
    if  { ([HTTP::uri] equals "/") } {
		HTTP::uri "/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"    
        }
    pool remedy-midtier-8080
	persist cookie insert REMEDY_SD "0d 00:00:00"
	HTTP::header replace Host "servicedesk.msg.dubai.gov.ae:8080" 
	}

    default {
		     drop
		    } 
}

}


when HTTP_RESPONSE {

switch $ServiceDesk_GLOBAL_hostName {

	"degservicedesk.dubai.gov.ae"
	{
	    if { [HTTP::is_redirect] } {
		HTTP::header replace Location [string map {"servicedesk.msg.dubai.gov.ae:8080" "degservicedesk.dubai.gov.ae"} [HTTP::header Location]]
	    }
    }

	"servicedesk.dubai.gov.ae"
	{
	    if { [HTTP::is_redirect] } {
		HTTP::header replace Location [string map {"servicedesk.msg.dubai.gov.ae:8080" "servicedesk.dubai.gov.ae"} [HTTP::header Location]]
	    }
    }

	default {
             drop
		    }
}

}
}
ltm rule /Common/Remedy-sdapp3-Rewrite {
    when HTTP_REQUEST
{
	set orig_uri "[HTTP::uri]"

	switch [string tolower [HTTP::host]] {
		sdreports.dubai.gov.ae { 
			if { "$orig_uri" equals "/" } {	HTTP::redirect "http://sdreports.dubai.gov.ae/BOE/BI" }
			else {
					pool remedy-sdapp3-80
					HTTP::header replace Host "sdapp3.msg.dubai.gov.ae"
				}

		}
		adminreports.dubai.gov.ae { 
			if { "$orig_uri" equals "/" } { HTTP::redirect "http://adminreports.dubai.gov.ae/CmcApp/" }
			else {
					pool remedy-sdapp3-80
					HTTP::header replace Host "sdapp3.msg.dubai.gov.ae"
				}
		}
		#msadmin.dubai.gov.ae { 
		#	pool remedy-sdapp3-8080
		#	HTTP::header replace Host "sdapp3.msg.dubai.gov.ae"
		#	if { "$orig_uri" equals "/" } { HTTP::uri "/awg" }
		#}
		#msd1.dubai.gov.ae { 
		#	pool remedy-sdapp3-8080
		#	HTTP::header replace Host "sdapp3.msg.dubai.gov.ae"
		#	if { "$orig_uri" equals "/" } { HTTP::uri "/cgi-bin/awg" }
		#}
		msd2.dubai.gov.ae { 
			pool remedy-sdapp3-8080
			HTTP::header replace Host "sdapp3.msg.dubai.gov.ae:8080"
			#if { "$orig_uri" equals "/" } { HTTP::uri "/cgi-bin/awg/I" }
		}
		sdkpi.dubai.gov.ae { 
			pool remedy-sdapp3-8090
			HTTP::header replace Host "sdapp3.msg.dubai.gov.ae:8090"
			if { "$orig_uri" equals "/" } { HTTP::uri "/bsmdashboards" }
		}
		adminkpi.dubai.gov.ae { 
			pool remedy-sdapp3-8090
			HTTP::header replace Host "sdapp3.msg.dubai.gov.ae:8090"
				#HTTP::header replace Referer "sdapp3.msg.dubai.gov.ae:8090"
			if { "$orig_uri" equals "/" } { HTTP::uri "/bsmdashboards/admin/" }
			elseif { "$orig_uri" equals "/AC_OETags.js" } { HTTP::uri "/bsmdashboards/AC_OETags.js" }
			elseif { "$orig_uri" equals "/sharedComponents.js" } { HTTP::uri "/bsmdashboards/sharedComponents.js" }
			elseif { "$orig_uri" equals "/Workbench.swf" } { HTTP::uri "/bsmdashboards/Workbench.swf" }
			elseif { "$orig_uri" equals "/admin" } { HTTP::uri "/bsmdashboards/admin" }
			elseif { "$orig_uri" starts_with "/assets/" } { HTTP::uri "/bsmdashboards$orig_uri" }
		}
		default {
			reject
		}
	}
}


when HTTP_RESPONSE
{
	if { [HTTP::is_redirect] } {
		set orig_Location [HTTP::header Location]
		if { $orig_Location contains "sdapp3.msg.dubai.gov.ae:8090" } {
				HTTP::header replace Location [string map {"sdapp3.msg.dubai.gov.ae:8090" "sdkpi.dubai.gov.ae"} [HTTP::header Location]]
		}
		elseif { $orig_Location contains "sdapp3.msg.dubai.gov.ae:8080" } {
				HTTP::header replace Location [string map {"sdapp3.msg.dubai.gov.ae:8080" "msd2.dubai.gov.ae"} [HTTP::header Location]]
			}
		elseif { $orig_Location contains "sdapp3.msg.dubai.gov.ae/InfoViewApp" } {
				HTTP::header replace Location [string map {"sdapp3.msg.dubai.gov.ae" "sdreports.dubai.gov.ae"} [HTTP::header Location]]
			}
	}

}
}
ltm rule /Common/Remedy-sdapp4-HTTP-Rewrite {
    when HTTP_REQUEST
{
	# for BlackBerry devices
	#set orig_uri "[string tolower [HTTP::uri]]"

	if { [string tolower [HTTP::host]] equals "msd.dubai.gov.ae" } {

		#HTTP::header replace Host "sdapp4.msg.dubai.gov.ae"

		pool remedy-sdapp4-8080

		#if { $orig_uri contains "/bbservices" } {
		#	pool remedy-sdapp4-8080
		#}
		#else { pool remedy-sdapp4-80 }

	}
	else {
		drop
	}
}
}
ltm rule /Common/Remedy-sdapp4-Rewrite {
    when HTTP_REQUEST
{
	# for Andriod & iPhone devices
	#set orig_uri "[string tolower [HTTP::uri]]"

	set user_agent ""
	set user_agent [HTTP::header User-Agent]
	# log local0. $user_agent

	if { [string tolower [HTTP::host]] starts_with "msd.dubai.gov.ae" } {

		#if { $user_agent contains "iOS" } {
		#	HTTP::header replace Host "10.22.10.14"
		#	log local0. "iOS"
		#}

		if { $user_agent contains "Android" } {
			HTTP::header replace Host "sdapp4.msg.dubai.gov.ae"
			#	log local0. [HTTP::header "Host"]
			}

		if { [HTTP::uri] starts_with "/ux" } {
			pool "remedy-sdapp4-8181"
		} else {
			pool "remedy-sdapp4-80"
		}

	#	if { $orig_uri contains "/bbservices" } {
	#		pool remedy-sdapp4-8080
	#	}
	#	else { pool remedy-sdapp4-80 }

	}
	else {
		drop
	}

}
}
ltm rule /Common/Rewrites {
    when HTTP_REQUEST
{
	set Response_Rewrite 0
}


when HTTP_RESPONSE
{
	if { $Response_Rewrite } {
		if {[HTTP::is_redirect]} {

			set Orig_Location_str [HTTP::header value Location]
			set String_tobe_Replaced "http://"
			set New_String "https://"
			set New_Location_str ""

			regsub -all $String_tobe_Replaced $Orig_Location_str $New_String New_Location_str

			if { [catch {HTTP::header replace Location $New_Location_str} result] } {
				#	log local0. "fffffffffff $result"
			}
		}
	}
}
}
ltm rule /Common/SFB_PROD_80_Base {
    when HTTP_REQUEST
{
	set SFB_Serv_URI [string tolower [HTTP::uri]]

			if { $SFB_Serv_URI equals "/" or $SFB_Serv_URI starts_with "/?sipuri" or $SFB_Serv_URI starts_with "/autodiscover/autodiscoverservice.svc/root"  } {
				pool "SFB_8080_Pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} else {
				#HTTP::respond 200 content "URL Blocked"
				reject
			}
}
}
ltm rule /Common/SFB_PROD_SSL_Base {
    when HTTP_REQUEST
{
    switch [string tolower [HTTP::host]] {
		"meet.dubai.gov.ae"
		{
			pool "SFB_SSL_Pool"
		}

		"join.dubai.gov.ae"
		{
			pool "SFB_SSL_Pool"
		}
		default
		{
			#log local0. "Access blocked for Host: [HTTP::host]"
			reject
		}
    }
}
}
ltm rule /Common/SIEM_Splunk_HTTP {
    when CLIENT_ACCEPTED {
    set client_address [IP::client_addr]
    set vip [IP::local_addr]
}
when HTTP_REQUEST {
    set http_host [HTTP::host]:[TCP::local_port]
    set http_uri [HTTP::uri]
    set http_url $http_host$http_uri
    set http_method [HTTP::method]
    set http_version [HTTP::version]
    set http_user_agent [HTTP::header "User-Agent"]
    set http_content_type [HTTP::header "Content-Type"]
    set http_referrer [HTTP::header "Referer"]
    set tcp_start_time [clock clicks -milliseconds]
    set req_start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    #set cookie [HTTP::cookie names]
    set user [HTTP::username]
    set virtual_server [LB::server]

    if { [HTTP::header Content-Length] > 0 } then {
        set req_length [HTTP::header "Content-Length"]
    } else {
        set req_length 0
    }
}
when HTTP_RESPONSE {
    set res_start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    set node [IP::server_addr]
    set node_port [TCP::server_port]
    set http_status [HTTP::status]
    set req_elapsed_time [expr {[clock clicks -milliseconds] - $tcp_start_time}]
    if { [HTTP::header Content-Length] > 0 } then {
        set res_length [HTTP::header "Content-Length"]
    } else {
        set res_length 0
    }
	#log 172.18.50.201 local0.info "SIEM Test from F5 LB1 @4.4" 
	#log local0.info "<190>,f5_irule=Splunk-iRule-HTTP,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,user=$user,virtual_server=\"$virtual_server\",bytes_in=$req_length,res_start_time=$res_start_time,node=$node,node_port=$node_port,http_status=$http_status,req_elapsed_time=$req_elapsed_time,bytes_out=$res_length\r\n"
   set hsl [HSL::open -proto TCP -pool Pool-syslog]
   HSL::send $hsl "<190>,f5_irule=Splunk-iRule-HTTP,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,user=$user,virtual_server=\"$virtual_server\",bytes_in=$req_length,res_start_time=$res_start_time,node=$node,node_port=$node_port,http_status=$http_status,req_elapsed_time=$req_elapsed_time,bytes_out=$res_length\r\n"
}
when LB_FAILED {
    set hsl [HSL::open -proto TCP -pool Pool-syslog]
    HSL::send $hsl "<190>,f5_irule=Splunk-iRule-LB_FAILED,src_ip=$client_address,vip=$vip,http_method=$http_method,http_host=$http_host,http_uri=$http_uri,http_url=$http_url,http_method=$http_method,http_version=$http_version,http_user_agent=\"$http_user_agent\",http_content_type=$http_content_type,http_referrer=\"$http_referrer\",req_start_time=$req_start_time,user=$user,virtual_server=\"$virtual_server\",bytes_in=$req_length\r\n"
}
}
ltm rule /Common/SRM_Vitrue_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"srm.dubai.gov.ae"
		{
			HTTP::redirect "https://srm.dubai.gov.ae"
		}
		"cas.dubai.gov.ae" - "tabs.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host]"
		}
		"publisher.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host]"
		}
		"accounts.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host]"
		}
		"workflow.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host]"
		}
		"involver.dubai.gov.ae"
		{
			HTTP::redirect "https://[HTTP::host]"
		}
		default
		{
			drop
		}
	}
}
}
ltm rule /Common/SRM_Vitrue_SSL_Base {
    when HTTP_REQUEST
{
	set SRM_Vitrue_SSL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"srm.dubai.gov.ae"
		{
			pool "SRM_Vitrue_SSL"
		}
		"cas.dubai.gov.ae" - "tabs.dubai.gov.ae"
		{
			pool "CAS_Vitrue_SSL"
		}
		"publisher.dubai.gov.ae"
		{
			pool "PBL_Vitrue_SSL"
		}
		"accounts.dubai.gov.ae"
		{
			pool "ACC_Vitrue_SSL"
		}
		"workflow.dubai.gov.ae"
		{
			pool "WKFL_Vitrue_SSL"
		}
		"involver.dubai.gov.ae"
		{
			pool "INV_Vitrue_SSL"
		}
		default
		{
			drop
		}
	}
}
}
ltm rule /Common/SRM_Vitrue_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SRM_Vitrue_SSL_request_uri
	{
	}
	set static::SRM_Vitrue_SSL_request_host
	{
		"srm.dubai.gov.ae====srm.vitrue.com"
		"cas.dubai.gov.ae====cas.vitrue.com"
		"accounts.dubai.gov.ae====accounts.vitrue.com"
		"publisher.dubai.gov.ae====publisher.vitrue.com"
		"tabs.dubai.gov.ae====tabs.vitrue.com"
		"workflow.dubai.gov.ae====workflow.vitrue.com"
		#"involver.dubai.gov.ae====manage.involver.com"
	} 
	set static::SRM_Vitrue_SSL_request_referer
	{
	}
	set static::SRM_Vitrue_SSL_request_cookie
	{
		".dubai.gov.ae====.vitrue.com"
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SRM_Vitrue_SSL_response_setCookie
	{
		".vitrue.com====.dubai.gov.ae"
	}
	set static::SRM_Vitrue_SSL_response_location
	{
		#"http://srm.vitrue.com====https://srm.dubai.gov.ae"
		"cas.vitrue.com====cas.dubai.gov.ae"
		"srm.vitrue.com====srm.dubai.gov.ae"
		"accounts.vitrue.com====accounts.dubai.gov.ae"
		"publisher.vitrue.com====publisher.dubai.gov.ae"
		"tabs.vitrue.com====tabs.dubai.gov.ae"
		"workflow.vitrue.com====workflow.dubai.gov.ae"
		#"manage.involver.com====involver.dubai.gov.ae"
	}
	set static::SRM_Vitrue_SSL_response_contentLocation
	{
		#"http://srm.vitrue.com====https://srm.dubai.gov.ae"
		"cas.vitrue.com====cas.dubai.gov.ae"
		"srm.vitrue.com====srm.dubai.gov.ae"
		#"accounts.vitrue.com====accounts.dubai.gov.ae"
		"publisher.vitrue.com====publisher.dubai.gov.ae"
		"tabs.vitrue.com====tabs.dubai.gov.ae"
		"workflow.vitrue.com====workflow.dubai.gov.ae"
		#"manage.involver.com====involver.dubai.gov.ae"
	}
	set static::SRM_Vitrue_SSL_response_body
	{
		#"http://srm.vitrue.com====https://srm.dubai.gov.ae"
		"cas.vitrue.com====cas.dubai.gov.ae"
		"srm.vitrue.com====srm.dubai.gov.ae"
		#"accounts.vitrue.com====accounts.dubai.gov.ae"
		"publisher.vitrue.com====publisher.dubai.gov.ae"
		"tabs.vitrue.com====tabs.dubai.gov.ae"
		"workflow.vitrue.com====workflow.dubai.gov.ae"
		#"manage.involver.com====involver.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SRM_Vitrue_SSL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::SRM_Vitrue_SSL_request_uri] > 0}
	{
	set SRM_Vitrue_SSL_request_val [HTTP::uri]
	foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_request_uri
	{
		set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
		set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]
		if {$SRM_Vitrue_SSL_request_replace == "nothing"}
		{
			set SRM_Vitrue_SSL_request_replace ""
		}

		regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
	}
	if { [catch {HTTP::uri $SRM_Vitrue_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SRM_Vitrue_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SRM_Vitrue_SSL_request_val [HTTP::host]
		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_request_host
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]

			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}
			regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $SRM_Vitrue_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SRM_Vitrue_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SRM_Vitrue_SSL_request_val [HTTP::header value Referer]
		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_request_referer
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]

			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}

			regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $SRM_Vitrue_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SRM_Vitrue_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SRM_Vitrue_SSL_request_val [HTTP::header value Cookie]
		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_request_cookie
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]

			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}

			regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $SRM_Vitrue_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SRM_Vitrue_SSL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SRM_Vitrue_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SRM_Vitrue_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_val_list
		{
			foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_response_setCookie
			{
				set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
				set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]

				if {$SRM_Vitrue_SSL_request_replace == "nothing"}
				{
					set SRM_Vitrue_SSL_request_replace ""
				}
				regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SRM_Vitrue_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SRM_Vitrue_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SRM_Vitrue_SSL_request_val [HTTP::header value Location]

		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_response_location
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]
			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}

			regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $SRM_Vitrue_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SRM_Vitrue_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SRM_Vitrue_SSL_request_val [HTTP::header value Content-Location]

		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_response_contentLocation
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]
			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}

			regsub -all $SRM_Vitrue_SSL_request_find $SRM_Vitrue_SSL_request_val $SRM_Vitrue_SSL_request_replace SRM_Vitrue_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SRM_Vitrue_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SRM_Vitrue_SSL_response_body] > 0}
	{
		set SRM_Vitrue_SSL_expression ""
		foreach SRM_Vitrue_SSL_request_rewriteRecord $static::SRM_Vitrue_SSL_response_body
		{
			set SRM_Vitrue_SSL_request_find [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 1]
			set SRM_Vitrue_SSL_request_replace [getfield $SRM_Vitrue_SSL_request_rewriteRecord "====" 2]
			if {$SRM_Vitrue_SSL_request_replace == "nothing"}
			{
				set SRM_Vitrue_SSL_request_replace ""
			}

			set SRM_Vitrue_SSL_expression "$SRM_Vitrue_SSL_expression@$SRM_Vitrue_SSL_request_find@$SRM_Vitrue_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SRM_Vitrue_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}
}
ltm rule /Common/SSO-SIM-STG-Web-Base {
    when HTTP_REQUEST
{
	HTTP::redirect "[HTTP::host][HTTP::uri]"
}
}
ltm rule /Common/SSO_DEMO_vs1_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] {

        "edcpqa.dubai.gov.ae" - "medcpqa.dubai.gov.ae" - "grpdemo.dubai.gov.ae" - "grpsite.dubai.gov.ae" - "jiraqa.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }

		"edcpbiqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

}
}
ltm rule /Common/SSO_DEMO_vs1_Base {
    when RULE_INIT
{
	set static::SSO_DEMO_vs1_grpdemoDmz_Src "ACL_grpdemoDmz_Test"
	set static::SSO_DEMO_vs1_ADFS_HHRC_Src "ACL_SSO_DEMO_ADFS_HHRC"
	set static::SSO_DEMO_vs1_ADFS_GINTest_Src "ACL_SSO_DEMO_ADFS_GINTest"
	set static::SSO_DEMO_vs1_GIN_Range "GIN_Range"
	set static::SSO_DEMO_vs1_Sorry "<html><head></head><body><p>Sorry, Access Denied...!!!</p></body></html>"
}

when HTTP_REQUEST
{
	set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 0
	set SSO_DEMO_vs1_GLOBAL_SSODisable 0
	set SSO_DEMO_vs1_GLOBAL_poolName ""
	set SSO_DEMO_vs1_GLOBAL_Rewrite_Select ""
	set SSO_DEMO_vs1_GLOBAL_URI ""


	#if { not ([HTTP::host] equals "medcpqa.dubai.gov.ae") } {
	#	if { not [class match [IP::client_addr] equals $static::SSO_DEMO_vs1_GIN_Range] } {
	#		set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
	#		HTTP::respond 200 content $static::SSO_DEMO_vs1_Sorry
	#	}
	#}

	switch [string tolower [HTTP::host]] {
		"demoidm.dubai.gov.ae" -
		"grpdemo.dubai.gov.ae" -
		"demowebmail.dubai.gov.ae" -
		"edcpqa.dubai.gov.ae" - "edcpbiqa.dubai.gov.ae" - "grpsite.dubai.gov.ae"  - "jiraqa.dsg.gov.ae"
		{
			if { not [class match [IP::client_addr] equals $static::SSO_DEMO_vs1_GIN_Range] } {
				set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::SSO_DEMO_vs1_Sorry
			}
		}
	}

	switch [string tolower [HTTP::host]] { 
        "demoidp.dubai.gov.ae" - "demoidm.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"demossotoken.dubai.gov.ae"
		{
		}
		"demosp.dubai.gov.ae" - "demosp2.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/xpics/deg.png" } {
				log local0. "Step1 [HTTP::header cookie]"
				set SSO_DEMOSP_Final ""
				set SSO_DEMOSP_CookieNames_Mapping ""
				set SSO_DEMOSP_CookieVal_Mapping ""
		    	set SSO_DEMOSP_CookieNames [HTTP::cookie names]
				#log local0. "$SSO_DEMOSP_CookieNames"
                foreach SSO_DEMOSP_CookieNames_Mapping $SSO_DEMOSP_CookieNames {
					set SSO_DEMOSP_CookieVal_Mapping [HTTP::cookie "$SSO_DEMOSP_CookieNames_Mapping"]
					#log local0. "$SSO_DEMOSP_CookieNames_Mapping"
					#log local0. "$SSO_DEMOSP_CookieVal_Mapping"
                    set SSO_DEMOSP_Final "$SSO_DEMOSP_Final; $SSO_DEMOSP_CookieNames_Mapping=$SSO_DEMOSP_CookieVal_Mapping"
					log local0. "Step2 $SSO_DEMOSP_Final"
					set SSO_DEMOSP_Final_Trim [string range $SSO_DEMOSP_Final 2 end]
					log local0. "Step3 $SSO_DEMOSP_Final_Trim"
                }	

			}

			if { [HTTP::uri] equals "/xxpics/deg.png" } {
				log local0. "Step1 [HTTP::header cookie]"
		    	set SSO_DEMOSP_xCookieFull [HTTP::header cookie]
                foreach SSO_DEMOSP_xCookieFull_Mapping $SSO_DEMOSP_xCookieFull {
					log local0. "$SSO_DEMOSP_xCookieFull_Mapping"
                }		
			}
        }
		"grpdemo.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/OA_HTML/AppsLocalLogin.jsp"} {
				if { [IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.54.56" or [IP::client_addr] equals "213.42.48.180" or ([IP::client_addr] equals "213.42.55.99")} {
					set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
					HTTP::redirect "https://grpdemo.dubai.gov.ae/OA_HTML/LoginSSO.jsp"
				} else {
					HTTP::redirect "https://grpdemo.dubai.gov.ae/OA_HTML/AppsLocalLogin.jsp"
				}
			} elseif { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "grpdemo_SSO_BYPASS"]} {
				set SSO_DEMO_vs1_GLOBAL_SSODisable 1
			}
        }
		"www.grpdemo.dubai.gov.ae" 
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
		}
		"demowebmail.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs1_GLOBAL_SSODisable 1
			}

        }

		"grpsite.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs1_GLOBAL_SSODisable 1
			}

        }

		"demosp-edcp.dubai.gov.ae"
		{
		}

		"edcpqa.dubai.gov.ae" - "medcpqa.dubai.gov.ae" - "edcpbiqa.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
		}
    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }




	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_DEMO_vs1_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_DEMO_vs1_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_DEMO_vs1_host "" SSO_DEMO_vs1_host
		HTTP::respond 302 Location "https://$SSO_DEMO_vs1_host[HTTP::uri]"
		set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/SSO_DEMO_vs1_Pool_SSL_Disable {
    when SERVER_CONNECTED {
	if  { $SSO_DEMO_vs1_GLOBAL_poolName != "SSO_DEMO_webmail" and $SSO_DEMO_vs1_GLOBAL_poolName != "SSO_DEMO_edcp" and $SSO_DEMO_vs1_GLOBAL_poolName != "SSO_DEMO_IDM_SSL" and $SSO_DEMO_vs1_GLOBAL_poolName != "EDCP_QA_Cloud_SSL"} {
			SSL::disable
			#log local0. "SSL disabled for pool: $SSO_DEMO_vs1_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/SSO_DEMO_vs1_Pool_Select {
    when RULE_INIT
{
	#set static::SSO_DEMO_vs1_Sorry3 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0 and $SSO_DEMO_vs1_GLOBAL_SSODisable == 0} {

	set SSO_DEMO_vs1_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]]
  {     
	"demoidp.dubai.gov.ae" 
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_idp"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoidp"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_idp 0
	}
	"demossotoken.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_token"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoidp"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_OTP 0
	}
	"demoidm.dubai.gov.ae" 
	{
		if { [HTTP::uri] starts_with "/ibm/" or [HTTP::uri] equals "/reports" } {
			set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_IDM_SSL"
			set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoidm"
			pool $SSO_DEMO_vs1_GLOBAL_poolName
			persist cookie insert SSO_DEMO_IDM_REP 0
		}
		else {
			set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_sp_dga"
			set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoidm"
			pool $SSO_DEMO_vs1_GLOBAL_poolName
			persist cookie insert SSO_DEMO_idm 0
		}

	}
	"demosp.dubai.gov.ae" 
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_sp_dga"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemospdga"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_sp_dga 0
	}
	"demosp2.dubai.gov.ae" 
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_sp2_dga"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemosp2dga"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_sp2_dga 0
	}
	"demosp-edcp.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_sp_edcp"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemospedcp"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_sp_edcp 0
	}

	"grpdemo.dubai.gov.ae" 
	{
    	if { [class match [IP::client_addr] equals $static::SSO_DEMO_vs1_grpdemoDmz_Src] }
            {
				set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_grpdemo_dmz"
	        	set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemodmz"
	        	pool $SSO_DEMO_vs1_GLOBAL_poolName
	        	persist cookie insert SSO_DEMO_grpdemo_dmz 0
	        } else {
				switch -glob  $SSO_DEMO_vs1_GLOBAL_URI
				{
					"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
					{
						# These URIs are exempted from Rewrite iRule
						set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
	        	        set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_grpdemo"
						set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemo"
	                    pool $SSO_DEMO_vs1_GLOBAL_poolName
	        	        persist cookie insert SSO_DEMO_grpdemo 0
					}
					"/discoverer/*" - "//discoverer/*"
					{
						set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_grpdemo_discov"
						set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemodiscov"
	                    pool $SSO_DEMO_vs1_GLOBAL_poolName
	        	        persist cookie insert SSO_DEMO_grpdemo_discov 0
					}
					"/OA_HTML/glwandproc*"
					{
						set SSO_DEMO_vs1_GLOBAL_poolName "grpdemoWebPool"
	                    pool $SSO_DEMO_vs1_GLOBAL_poolName
	        	        persist cookie insert NoSSO_DEMO_grpdemo_glwand 0
						# This URI does not need Rewrite
						set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
					}
					default
					{
						set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_grpdemo"
						set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemo"
	                    pool $SSO_DEMO_vs1_GLOBAL_poolName
	        	        persist cookie insert SSO_DEMO_grpdemo 0
					}
				}
		    }	
	}
	"demowebmail.dubai.gov.ae" 
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_webmail"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemowebmail"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_webmail 0
	}

	"grpsite.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO1_Jirademo"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemo"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_grpsite 0
	}

	"jiraqa.dsg.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO1_Jirademo"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssogrpdemo"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_jiraqa 0
	}
	"edcpqa.dubai.gov.ae" - "medcpqa.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
		persist cookie insert EDCP_QA_SSO 0
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
	} 
	"edcpbiqa.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_poolName "EDCP_QA_Cloud_SSL"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
		persist cookie insert EDCPQABI_SSO 0
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
		if {[HTTP::uri] equals "/" } {
			HTTP::uri "/Reports_EDCPQADB"
		}
	} 
	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
    set SSO_DEMO_vs1_myCookies [HTTP::cookie names]
    foreach SSO_DEMO_vs1_myCookieVal $SSO_DEMO_vs1_myCookies {
       HTTP::cookie secure $SSO_DEMO_vs1_myCookieVal enable
	    if {$SSO_DEMO_vs1_myCookies == "DEMOIDP-DUBAI-GOV-AE-PD-H-SESSION-ID" } {
		HTTP::cookie domain $SSO_DEMO_vs1_myCookieVal demoidp.dubai.gov.ae 	
	    }   
    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Pool_Select_nosso {
    when RULE_INIT
{
	#set static::SSO_DEMO_vs1_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
	set static::SSO_DEMO_vs1_Sorry2 "<html><head></head><body><p>Webmail Without SSO...!! </p></body></html>"
}

when HTTP_REQUEST {

 if { $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0 and $SSO_DEMO_vs1_GLOBAL_SSODisable == 1} {

	set SSO_DEMO_vs1_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"demowebmail.dubai.gov.ae" 
	{
		#set SSO_DEMO_vs1_GLOBAL_poolName "grpdemoWebPool"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "grpDemoDirect"
		#pool $SSO_DEMO_vs1_GLOBAL_poolName
		HTTP::respond 200 content $static::SSO_DEMO_vs1_Sorry2
		set SSO_DEMO_vs1_GLOBAL_BREAK_ALL 1
	}
	"grpdemo.dubai.gov.ae"
	{
		set SSO_DEMO_vs1_GLOBAL_poolName "grpdemoWebPool"
		set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "grpDemoDirect"
		pool $SSO_DEMO_vs1_GLOBAL_poolName
		persist cookie insert grpdemo_SSO_BYPASS 0
	}
	default
    {
		# No default Pool
	}
  }
} 
}
}
ltm rule /Common/SSO_DEMO_vs1_Pool_xCookie {
    when HTTP_REQUEST {
	switch $SSO_DEMO_vs1_GLOBAL_poolName {

	"SSO_DEMO_sp_dga"
	{
		set SSO_DEMO_ADFS_Selected "YES"
		if {$SSO_DEMO_vs1_GLOBAL_URI starts_with "/STS/sps/spdubaigov/saml20/"} {
	    	if { not([HTTP::cookie exists "IDPChoiceCookie"] or [HTTP::cookie exists "SSO_DEMO_ADFS"]) } {
		       set SSO_DEMO_ADFS_Selected "NO"    
		    }
		}
	}

	"SSO_DEMO_grpdemo"
	{
		if { $SSO_DEMO_vs1_GLOBAL_URI starts_with "/xOA_HTML/glwandproc" } {

			if {[HTTP::cookie exists "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"]} {

				#.......Option1 failed as HTTP::cookie remove is not working as expected....OS Upgrade should fix it.......
				#set DEMOSP_GLWand_Cookie_Val [HTTP::cookie "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"]
				#set DEMOSP_GLWand_Cookie_Val_Decode [decode_uri $DEMOSP_GLWand_Cookie_Val]	
				#set SSODEMO_GLWand_Cookie1 [HTTP::cookie remove "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"]
				#HTTP::cookie remove "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"
				#HTTP::cookie insert name "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID" value $DEMOSP_GLWand_Cookie_Val_Decode

				#.......Option2 failed as string map needs more investigation.......
				#set SSODEMO_GLWand_Cookie [HTTP::header cookie]
				#set SSODEMO_GLWand_Var1 "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID=$DEMOSP_GLWand_Cookie_Val"
				#set SSODEMO_GLWand_Var2 "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID=$DEMOSP_GLWand_Cookie_Val_Decode"
				#set SSODEMO_GLWand_Cookie_Final [string map {$SSODEMO_GLWand_Var1 $SSODEMO_GLWand_Var2} $SSODEMO_GLWand_Cookie]
				#HTTP::header replace "cookie" "$SSODEMO_GLWand_Cookie_Final"
			}	
		}

		if { $SSO_DEMO_vs1_GLOBAL_URI starts_with "/xxOA_HTML/glwandproc"} {

			if {[HTTP::cookie exists "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"]} {

				#.......Option3....though complex...it works............
				set SSO_DEMO_GLWand_Cookie_Build ""
				#log local0. "Step1 [HTTP::header cookie]"
		    	set SSO_DEMO_GLWand_CookieNames [HTTP::cookie names]
                foreach SSO_DEMO_GLWand_CookieNames_Mapping $SSO_DEMO_GLWand_CookieNames {
					set SSO_DEMO_GLWand_CookieVal_Mapping [HTTP::cookie "$SSO_DEMO_GLWand_CookieNames_Mapping"]

					if {$SSO_DEMO_GLWand_CookieNames_Mapping equals "DEMOSP-DUBAI-GOV-AE-PD-H-SESSION-ID"} {
					    set SSO_DEMO_GLWand_CookieVal_Mapping [decode_uri $SSO_DEMO_GLWand_CookieVal_Mapping]
						#log local0. "Step1.1 $SSO_DEMO_GLWand_CookieVal_Mapping"
				    }

                    set SSO_DEMO_GLWand_Cookie_Build "$SSO_DEMO_GLWand_Cookie_Build; $SSO_DEMO_GLWand_CookieNames_Mapping=$SSO_DEMO_GLWand_CookieVal_Mapping"
					#log local0. "Step2 $SSO_DEMO_GLWand_Cookie_Build"
                }

				set SSO_DEMO_GLWand_Cookie [string range $SSO_DEMO_GLWand_Cookie_Build 2 end]
				#log local0. "Step3 $SSO_DEMO_GLWand_Cookie"
				HTTP::header replace "cookie" "$SSO_DEMO_GLWand_Cookie"
				#log local0. "Step4 [HTTP::header cookie]"
			}
		}
	}

	default
        {
		    # No Action
	    }

	} 
}

when HTTP_RESPONSE {
    switch $SSO_DEMO_vs1_GLOBAL_poolName {

	"SSO_DEMO_sp_dga"
	{
		if { $SSO_DEMO_ADFS_Selected == "NO" } {

			set SSO_DEMO_ADFS_Select "NOADFS"
			if {[class match [IP::client_addr] equals $static::SSO_DEMO_vs1_ADFS_HHRC_Src]} {
		    	set SSO_DEMO_ADFS_Select "HHRC" 
		    } elseif {[class match [IP::client_addr] equals $static::SSO_DEMO_vs1_ADFS_GINTest_Src]} {
				set SSO_DEMO_ADFS_Select "HHRC" 
		    }

			HTTP::cookie insert name "SSO_DEMO_ADFS" value $SSO_DEMO_ADFS_Select
		}
	}

	default
        {
		    # No Action
	    }
    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_demowebmail {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demomail_request_uri
	{
	}
	set static::SSO_DEMO_vs1_demomail_request_host
	{
	} 
	set static::SSO_DEMO_vs1_demomail_request_referer
	{
	}
	set static::SSO_DEMO_vs1_demomail_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demomail_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_demomail_response_location
	{
	}
	set static::SSO_DEMO_vs1_demomail_response_contentLocation
	{
	}
	set static::SSO_DEMO_vs1_demomail_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemowebmail" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demomail_request_uri] > 0}
	{
	set SSO_DEMO_vs1_demomail_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_request_uri
	{
		set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_demomail_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_demomail_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demomail_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_demomail_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_request_host
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_demomail_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demomail_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_demomail_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_request_referer
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_demomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demomail_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_demomail_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_request_cookie
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_demomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemowebmail" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demomail_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_demomail_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_val_list
		{
			foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_response_setCookie
			{
				set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_demomail_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_demomail_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demomail_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_demomail_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_response_location
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_demomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demomail_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_demomail_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_response_contentLocation
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demomail_request_find $SSO_DEMO_vs1_demomail_request_val $SSO_DEMO_vs1_demomail_request_replace SSO_DEMO_vs1_demomail_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_demomail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_demomail_response_body] > 0}
	{
		set SSO_DEMO_vs1_demomail_expression ""
		foreach SSO_DEMO_vs1_demomail_request_rewriteRecord $static::SSO_DEMO_vs1_demomail_response_body
		{
			set SSO_DEMO_vs1_demomail_request_find [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demomail_request_replace [getfield $SSO_DEMO_vs1_demomail_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demomail_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demomail_request_replace ""
			}

			set SSO_DEMO_vs1_demomail_expression "$SSO_DEMO_vs1_demomail_expression@$SSO_DEMO_vs1_demomail_request_find@$SSO_DEMO_vs1_demomail_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_demomail_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemowebmail" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_demomail_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_demomail_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_edcpqa {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_edcpqa_request_uri
	{
	}
	set static::SSO_DEMO_vs1_edcpqa_request_host
	{
	} 
	set static::SSO_DEMO_vs1_edcpqa_request_referer
	{
	}
	set static::SSO_DEMO_vs1_edcpqa_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_edcpqa_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_edcpqa_response_location
	{
		#"http://edcpqa.dubai.gov.ae====https://edcpqa.dubai.gov.ae"
		#"http://edcpstorageqa.dubai.gov.ae====https://edcpstorageqa.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_edcpqa_response_contentLocation
	{
		#"http://edcpqa.dubai.gov.ae====https://edcpqa.dubai.gov.ae"
		#"http://edcpstorageqa.dubai.gov.ae====https://edcpstorageqa.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_edcpqa_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		#"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
		"\"http://demosp-edcp.dubai.gov.ae====\"https://demosp-edcp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoedcpqa" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_request_uri] > 0}
	{
	set SSO_DEMO_vs1_edcpqa_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_request_uri
	{
		set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_edcpqa_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_edcpqa_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_request_host
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_edcpqa_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_request_referer
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_edcpqa_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_request_cookie
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_edcpqa_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoedcpqa" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_val_list
		{
			foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_response_setCookie
			{
				set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_edcpqa_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_edcpqa_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_response_location
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_edcpqa_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_edcpqa_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_edcpqa_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_response_contentLocation
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_edcpqa_request_find $SSO_DEMO_vs1_edcpqa_request_val $SSO_DEMO_vs1_edcpqa_request_replace SSO_DEMO_vs1_edcpqa_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_edcpqa_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_edcpqa_response_body] > 0}
	{
		set SSO_DEMO_vs1_edcpqa_expression ""
		foreach SSO_DEMO_vs1_edcpqa_request_rewriteRecord $static::SSO_DEMO_vs1_edcpqa_response_body
		{
			set SSO_DEMO_vs1_edcpqa_request_find [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_edcpqa_request_replace [getfield $SSO_DEMO_vs1_edcpqa_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_edcpqa_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_edcpqa_request_replace ""
			}

			set SSO_DEMO_vs1_edcpqa_expression "$SSO_DEMO_vs1_edcpqa_expression@$SSO_DEMO_vs1_edcpqa_request_find@$SSO_DEMO_vs1_edcpqa_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_edcpqa_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoedcpqa" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_edcpqa_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_edcpqa_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_gdemo_nosso {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_gdnosso_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"/SSO_BYPASS\$====/OA_HTML/AppsLogin"
		"https%3A%2F%2Fgrpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_gdnosso_request_host
	{
	} 
	set static::SSO_DEMO_vs1_gdnosso_request_referer
	{
	}
	set static::SSO_DEMO_vs1_gdnosso_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_gdnosso_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_gdnosso_response_location
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_gdnosso_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_gdnosso_response_body
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_poolName == "grpdemoWebPool" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_request_uri] > 0}
	{
	set SSO_DEMO_vs1_gdnosso_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_request_uri
	{
		set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_gdnosso_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_gdnosso_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_request_host
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_gdnosso_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_request_referer
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_gdnosso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_request_cookie
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_gdnosso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_poolName == "grpdemoWebPool" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_val_list
		{
			foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_response_setCookie
			{
				set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_gdnosso_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_gdnosso_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_response_location
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_gdnosso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_gdnosso_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_gdnosso_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_response_contentLocation
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_gdnosso_request_find $SSO_DEMO_vs1_gdnosso_request_val $SSO_DEMO_vs1_gdnosso_request_replace SSO_DEMO_vs1_gdnosso_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_gdnosso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_gdnosso_response_body] > 0}
	{
		set SSO_DEMO_vs1_gdnosso_expression ""
		foreach SSO_DEMO_vs1_gdnosso_request_rewriteRecord $static::SSO_DEMO_vs1_gdnosso_response_body
		{
			set SSO_DEMO_vs1_gdnosso_request_find [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_gdnosso_request_replace [getfield $SSO_DEMO_vs1_gdnosso_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_gdnosso_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_gdnosso_request_replace ""
			}

			set SSO_DEMO_vs1_gdnosso_expression "$SSO_DEMO_vs1_gdnosso_expression@$SSO_DEMO_vs1_gdnosso_request_find@$SSO_DEMO_vs1_gdnosso_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_gdnosso_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_poolName == "grpdemoWebPool" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_gdnosso_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_gdnosso_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_grpdemo {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_grpdemo_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"https%3A%2F%2Fgrpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae====http://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_grpdemo_request_host
	{
	} 
	set static::SSO_DEMO_vs1_grpdemo_request_referer
	{
	}
	set static::SSO_DEMO_vs1_grpdemo_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_grpdemo_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_grpdemo_response_location
	{
		#"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		#"https://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		"http://grpsite.dubai.gov.ae====https://grpsite.dubai.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
	set static::SSO_DEMO_vs1_grpdemo_response_contentLocation
	{
		#"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		#"https://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		"http://grpsite.dubai.gov.ae====https://grpsite.dubai.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
	set static::SSO_DEMO_vs1_grpdemo_response_body
	{
		#"http://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		#"https://grpdemo.dubai.gov.ae:80====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"https://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
		"http://grpsite.dubai.gov.ae====https://grpsite.dubai.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemo" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_request_uri] > 0}
	{
	set SSO_DEMO_vs1_grpdemo_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_request_uri
	{
		set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_grpdemo_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_grpdemo_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_request_host
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_grpdemo_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_request_referer
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_grpdemo_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_request_cookie
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_grpdemo_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemo" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_val_list
		{
			foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_response_setCookie
			{
				set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_grpdemo_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_grpdemo_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_response_location
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_grpdemo_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_grpdemo_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_grpdemo_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_response_contentLocation
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_grpdemo_request_find $SSO_DEMO_vs1_grpdemo_request_val $SSO_DEMO_vs1_grpdemo_request_replace SSO_DEMO_vs1_grpdemo_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_grpdemo_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_grpdemo_response_body] > 0}
	{
		set SSO_DEMO_vs1_grpdemo_expression ""
		foreach SSO_DEMO_vs1_grpdemo_request_rewriteRecord $static::SSO_DEMO_vs1_grpdemo_response_body
		{
			set SSO_DEMO_vs1_grpdemo_request_find [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_grpdemo_request_replace [getfield $SSO_DEMO_vs1_grpdemo_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_grpdemo_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_grpdemo_request_replace ""
			}

			set SSO_DEMO_vs1_grpdemo_expression "$SSO_DEMO_vs1_grpdemo_expression@$SSO_DEMO_vs1_grpdemo_request_find@$SSO_DEMO_vs1_grpdemo_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_grpdemo_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemo" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_grpdemo_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_grpdemo_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_grpdemo_discov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demodiscov_request_uri
	{
		"^//discoverer/====/discoverer/"
	}
	set static::SSO_DEMO_vs1_demodiscov_request_host
	{
		"grpdemo.dubai.gov.ae====grpdemo.dubai.gov.ae:8090"
	} 
	set static::SSO_DEMO_vs1_demodiscov_request_referer
	{
	}
	set static::SSO_DEMO_vs1_demodiscov_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demodiscov_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_demodiscov_response_location
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_demodiscov_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_demodiscov_response_body
	{
		"http://grpdemo.dubai.gov.ae:8090====https://grpdemo.dubai.gov.ae"
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodiscov" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_request_uri] > 0}
	{
	set SSO_DEMO_vs1_demodiscov_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_request_uri
	{
		set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_demodiscov_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_demodiscov_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_request_host
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_demodiscov_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_request_referer
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_demodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_request_cookie
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_demodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodiscov" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_val_list
		{
			foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_response_setCookie
			{
				set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_demodiscov_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_demodiscov_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_response_location
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_demodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodiscov_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_demodiscov_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_response_contentLocation
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodiscov_request_find $SSO_DEMO_vs1_demodiscov_request_val $SSO_DEMO_vs1_demodiscov_request_replace SSO_DEMO_vs1_demodiscov_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_demodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_demodiscov_response_body] > 0}
	{
		set SSO_DEMO_vs1_demodiscov_expression ""
		foreach SSO_DEMO_vs1_demodiscov_request_rewriteRecord $static::SSO_DEMO_vs1_demodiscov_response_body
		{
			set SSO_DEMO_vs1_demodiscov_request_find [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodiscov_request_replace [getfield $SSO_DEMO_vs1_demodiscov_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodiscov_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodiscov_request_replace ""
			}

			set SSO_DEMO_vs1_demodiscov_expression "$SSO_DEMO_vs1_demodiscov_expression@$SSO_DEMO_vs1_demodiscov_request_find@$SSO_DEMO_vs1_demodiscov_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_demodiscov_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodiscov" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_demodiscov_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_demodiscov_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_grpdemo_dmz {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demodmz_request_uri
	{
	}
	set static::SSO_DEMO_vs1_demodmz_request_host
	{
	} 
	set static::SSO_DEMO_vs1_demodmz_request_referer
	{
	}
	set static::SSO_DEMO_vs1_demodmz_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_demodmz_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_demodmz_response_location
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_demodmz_response_contentLocation
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_demodmz_response_body
	{
		"http://grpdemo.dubai.gov.ae====https://grpdemo.dubai.gov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodmz" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_request_uri] > 0}
	{
	set SSO_DEMO_vs1_demodmz_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_request_uri
	{
		set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_demodmz_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_demodmz_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_demodmz_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_request_host
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_demodmz_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_demodmz_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_request_referer
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_demodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_demodmz_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_request_cookie
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_demodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodmz" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_demodmz_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_val_list
		{
			foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_response_setCookie
			{
				set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_demodmz_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_demodmz_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_demodmz_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_response_location
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_demodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_demodmz_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_demodmz_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_response_contentLocation
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_demodmz_request_find $SSO_DEMO_vs1_demodmz_request_val $SSO_DEMO_vs1_demodmz_request_replace SSO_DEMO_vs1_demodmz_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_demodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_demodmz_response_body] > 0}
	{
		set SSO_DEMO_vs1_demodmz_expression ""
		foreach SSO_DEMO_vs1_demodmz_request_rewriteRecord $static::SSO_DEMO_vs1_demodmz_response_body
		{
			set SSO_DEMO_vs1_demodmz_request_find [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_demodmz_request_replace [getfield $SSO_DEMO_vs1_demodmz_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_demodmz_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_demodmz_request_replace ""
			}

			set SSO_DEMO_vs1_demodmz_expression "$SSO_DEMO_vs1_demodmz_expression@$SSO_DEMO_vs1_demodmz_request_find@$SSO_DEMO_vs1_demodmz_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_demodmz_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssogrpdemodmz" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_demodmz_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_demodmz_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_idm {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_idm_request_uri
	{
		"^/\$====/itim/self"
		"^/admin\$====/itim/console"
		"^/reports\$====/ibm/console/logon.jsp"
		"^/clear\$====/itim/selfhelp/ClearSSOCookie.jsp"
	}
	set static::SSO_DEMO_vs1_idm_request_host
	{
	} 
	set static::SSO_DEMO_vs1_idm_request_referer
	{
	}
	set static::SSO_DEMO_vs1_idm_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_idm_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_idm_response_location
	{
		"http://demoidm.dubai.gov.ae====https://demoidm.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_idm_response_contentLocation
	{
		"http://demoidm.dubai.gov.ae====https://demoidm.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_idm_response_body
	{
		"http://demoidm.dubai.gov.ae====https://demoidm.dubai.gov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidm" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idm_request_uri] > 0}
	{
	set SSO_DEMO_vs1_idm_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_request_uri
	{
		set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_idm_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_idm_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idm_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_idm_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_request_host
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_idm_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idm_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_idm_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_request_referer
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idm_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_idm_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_request_cookie
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidm" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idm_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_idm_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_val_list
		{
			foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_response_setCookie
			{
				set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_idm_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_idm_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idm_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_idm_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_response_location
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idm_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_idm_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_response_contentLocation
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idm_request_find $SSO_DEMO_vs1_idm_request_val $SSO_DEMO_vs1_idm_request_replace SSO_DEMO_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_idm_response_body] > 0}
	{
		set SSO_DEMO_vs1_idm_expression ""
		foreach SSO_DEMO_vs1_idm_request_rewriteRecord $static::SSO_DEMO_vs1_idm_response_body
		{
			set SSO_DEMO_vs1_idm_request_find [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idm_request_replace [getfield $SSO_DEMO_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idm_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idm_request_replace ""
			}

			set SSO_DEMO_vs1_idm_expression "$SSO_DEMO_vs1_idm_expression@$SSO_DEMO_vs1_idm_request_find@$SSO_DEMO_vs1_idm_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_idm_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidm" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_idm_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_idm_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_idp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_idp_request_uri
	{
	}
	set static::SSO_DEMO_vs1_idp_request_host
	{
	} 
	set static::SSO_DEMO_vs1_idp_request_referer
	{
	}
	set static::SSO_DEMO_vs1_idp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_idp_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_idp_response_location
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"http://demossotoken.dubai.gov.ae====https://demossotoken.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_idp_response_contentLocation
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"http://demossotoken.dubai.gov.ae====https://demossotoken.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_idp_response_body
	{
		"http://demosp.dubai.gov.ae====https://demosp.dubai.gov.ae"
		"http://demosp2.dubai.gov.ae====https://demosp2.dubai.gov.ae"
		"http://demosp.dubaigov.ae====https://demosp.dubaigov.ae"
		"http://demosp.pilot.deg.ae====https://demosp.pilot.deg.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idp_request_uri] > 0}
	{
	set SSO_DEMO_vs1_idp_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_request_uri
	{
		set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_idp_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_idp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_idp_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_request_host
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_idp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_idp_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_request_referer
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_idp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_idp_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_request_cookie
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_idp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_val_list
		{
			foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_response_setCookie
			{
				set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_idp_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_idp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_idp_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_response_location
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_idp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_idp_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_response_contentLocation
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_idp_request_find $SSO_DEMO_vs1_idp_request_val $SSO_DEMO_vs1_idp_request_replace SSO_DEMO_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_idp_response_body] > 0}
	{
		set SSO_DEMO_vs1_idp_expression ""
		foreach SSO_DEMO_vs1_idp_request_rewriteRecord $static::SSO_DEMO_vs1_idp_response_body
		{
			set SSO_DEMO_vs1_idp_request_find [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_idp_request_replace [getfield $SSO_DEMO_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_idp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_idp_request_replace ""
			}

			set SSO_DEMO_vs1_idp_expression "$SSO_DEMO_vs1_idp_expression@$SSO_DEMO_vs1_idp_request_find@$SSO_DEMO_vs1_idp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_idp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemoidp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_idp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_idp_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_sp2_dga {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_sp2dga_request_uri
	{
	}
	set static::SSO_DEMO_vs1_sp2dga_request_host
	{
	} 
	set static::SSO_DEMO_vs1_sp2dga_request_referer
	{
	}
	set static::SSO_DEMO_vs1_sp2dga_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_sp2dga_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_sp2dga_response_location
	{
		"http://demosp2.dubai.gov.ae====https://demosp2.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_sp2dga_response_contentLocation
	{
		"http://demosp2.dubai.gov.ae====https://demosp2.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_sp2dga_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemosp2dga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_request_uri] > 0}
	{
	set SSO_DEMO_vs1_sp2dga_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_request_uri
	{
		set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_sp2dga_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_sp2dga_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_request_host
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_sp2dga_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_request_referer
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_request_cookie
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemosp2dga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_val_list
		{
			foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_response_setCookie
			{
				set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_sp2dga_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_sp2dga_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_response_location
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_sp2dga_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_sp2dga_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_response_contentLocation
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_sp2dga_request_find $SSO_DEMO_vs1_sp2dga_request_val $SSO_DEMO_vs1_sp2dga_request_replace SSO_DEMO_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_sp2dga_response_body] > 0}
	{
		set SSO_DEMO_vs1_sp2dga_expression ""
		foreach SSO_DEMO_vs1_sp2dga_request_rewriteRecord $static::SSO_DEMO_vs1_sp2dga_response_body
		{
			set SSO_DEMO_vs1_sp2dga_request_find [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_sp2dga_request_replace [getfield $SSO_DEMO_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_sp2dga_request_replace ""
			}

			set SSO_DEMO_vs1_sp2dga_expression "$SSO_DEMO_vs1_sp2dga_expression@$SSO_DEMO_vs1_sp2dga_request_find@$SSO_DEMO_vs1_sp2dga_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_sp2dga_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemosp2dga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_sp2dga_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_sp2dga_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_sp_dga {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_spdga_request_uri
	{
	}
	set static::SSO_DEMO_vs1_spdga_request_host
	{
		"https://demosp.dubai.gov.ae====http://demosp.dubai.gov.ae"
	} 
	set static::SSO_DEMO_vs1_spdga_request_referer
	{
		"https://demosp.dubai.gov.ae====http://demosp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spdga_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_spdga_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_spdga_response_location
	{
		"http://demosp.dubai.gov.ae====https://demosp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spdga_response_contentLocation
	{
		"http://demosp.dubai.gov.ae====https://demosp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spdga_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospdga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spdga_request_uri] > 0}
	{
	set SSO_DEMO_vs1_spdga_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_request_uri
	{
		set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_spdga_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_spdga_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spdga_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_spdga_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_request_host
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_spdga_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spdga_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_spdga_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_request_referer
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spdga_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_spdga_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_request_cookie
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospdga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spdga_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_spdga_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_val_list
		{
			foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_response_setCookie
			{
				set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_spdga_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_spdga_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spdga_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_spdga_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_response_location
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spdga_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_spdga_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_response_contentLocation
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spdga_request_find $SSO_DEMO_vs1_spdga_request_val $SSO_DEMO_vs1_spdga_request_replace SSO_DEMO_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_spdga_response_body] > 0}
	{
		set SSO_DEMO_vs1_spdga_expression ""
		foreach SSO_DEMO_vs1_spdga_request_rewriteRecord $static::SSO_DEMO_vs1_spdga_response_body
		{
			set SSO_DEMO_vs1_spdga_request_find [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spdga_request_replace [getfield $SSO_DEMO_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spdga_request_replace ""
			}

			set SSO_DEMO_vs1_spdga_expression "$SSO_DEMO_vs1_spdga_expression@$SSO_DEMO_vs1_spdga_request_find@$SSO_DEMO_vs1_spdga_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_spdga_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospdga" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_spdga_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_spdga_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs1_Rewrite_sp_edcp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs1_spedcp_request_uri
	{
	}
	set static::SSO_DEMO_vs1_spedcp_request_host
	{
		"https://demosp-edcp.dubai.gov.ae====http://demosp-edcp.dubai.gov.ae"
	} 
	set static::SSO_DEMO_vs1_spedcp_request_referer
	{
		"https://demosp-edcp.dubai.gov.ae====http://demosp-edcp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spedcp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs1_spedcp_response_setCookie
	{
	}
	set static::SSO_DEMO_vs1_spedcp_response_location
	{
		"http://demosp-edcp.dubai.gov.ae====https://demosp-edcp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spedcp_response_contentLocation
	{
		"http://demosp-edcp.dubai.gov.ae====https://demosp-edcp.dubai.gov.ae"
	}
	set static::SSO_DEMO_vs1_spedcp_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospedcp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_request_uri] > 0}
	{
	set SSO_DEMO_vs1_spedcp_request_val [HTTP::uri]
	foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_request_uri
	{
		set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
		{
			set SSO_DEMO_vs1_spedcp_request_replace ""
		}

		regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs1_spedcp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs1_spedcp_request_val [HTTP::host]
		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_request_host
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}
			regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs1_spedcp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs1_spedcp_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_request_referer
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs1_spedcp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs1_spedcp_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_request_cookie
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs1_spedcp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospedcp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs1_spedcp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_val_list
		{
			foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_response_setCookie
			{
				set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
				{
					set SSO_DEMO_vs1_spedcp_request_replace ""
				}
				regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs1_spedcp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs1_spedcp_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_response_location
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs1_spedcp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs1_spedcp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs1_spedcp_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_response_contentLocation
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs1_spedcp_request_find $SSO_DEMO_vs1_spedcp_request_val $SSO_DEMO_vs1_spedcp_request_replace SSO_DEMO_vs1_spedcp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs1_spedcp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs1_spedcp_response_body] > 0}
	{
		set SSO_DEMO_vs1_spedcp_expression ""
		foreach SSO_DEMO_vs1_spedcp_request_rewriteRecord $static::SSO_DEMO_vs1_spedcp_response_body
		{
			set SSO_DEMO_vs1_spedcp_request_find [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs1_spedcp_request_replace [getfield $SSO_DEMO_vs1_spedcp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs1_spedcp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs1_spedcp_request_replace ""
			}

			set SSO_DEMO_vs1_spedcp_expression "$SSO_DEMO_vs1_spedcp_expression@$SSO_DEMO_vs1_spedcp_request_find@$SSO_DEMO_vs1_spedcp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs1_spedcp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs1_GLOBAL_Rewrite_Select == "ssodemospedcp" and $SSO_DEMO_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs1_spedcp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs1_spedcp_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Base {
    when RULE_INIT
{
	#set static::SSO_DEMO_vs2_Sorry "<html><head></head><body><p>Access Denied...!!! Wrong URL. For assistance contact DSG Support Team.</p></body></html>"
}

when HTTP_REQUEST
{
	set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 0
	set SSO_DEMO_vs2_GLOBAL_SSODisable 0
	set SSO_DEMO_vs2_GLOBAL_poolName ""
	set SSO_DEMO_vs2_GLOBAL_Rewrite_Select ""
	set SSO_DEMO_vs2_GLOBAL_URI ""


	switch [string tolower [HTTP::host]] { 

		"demosp.dubaigov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"servicedesk.dubaigov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::SSO_DEMO_vs2_Sorry2	
			}
        }

		"epaymentqa.dubaigov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
			 #	set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

			if { [HTTP::uri] equals "/" } {
				HTTP::redirect "https://epaymentqa.dubaigov.ae/epay"
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

        }

		"mpayqa.dubaigov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/mPayAdmin" or [HTTP::uri] equals "/mPayAdmin/" } {
		    	HTTP::redirect "https://mpayqa.dubaigov.ae/mPay-Reporter/security/login.do"
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				#log local0. "continue execution for Host: [HTTP::host][HTTP::uri]"
			}
        }

		"mpay.qa.dubai.ae"
		{
		    log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

			if { [HTTP::uri] equals "/" } {
		    	HTTP::redirect "https://mpay.qa.dubai.ae/mPayAdmin"
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				#log local0. "continue execution for Host: [HTTP::host][HTTP::uri]"
			}
        }

		"gess2qa.dubaigov.ae" 
	    {
		    # log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

			if { not([HTTP::uri] equals "/" or [HTTP::uri] starts_with "/gess2" or [HTTP::uri] ends_with "favicon.ico") } {
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				drop
			#	log local0. "Drop because of uri" 
			}

        }

		"syncqa.dubaigov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

			if { not([HTTP::uri] equals "/" or [HTTP::uri] starts_with "/syncadmin" or [HTTP::uri] ends_with "favicon.ico") } {
				set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				drop
			}
        }

		"ecomplainqa.dubaigov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

        }

		"esuggestqa.dubaigov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" } {
				set SSO_DEMO_vs2_GLOBAL_SSODisable 1
				#set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
			}

        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_DEMO_vs2_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_DEMO_vs2_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_DEMO_vs2_host "" SSO_DEMO_vs2_host
		HTTP::respond 302 Location "https://$SSO_DEMO_vs2_host[HTTP::uri]"
		set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/SSO_DEMO_vs2_Pool_Select {
    when RULE_INIT
{

	set static::SSO_DEMO_vs2_ePayQA_URI_Pool_mapping
	{
        "^/epay/images/====SSO_DEMO_epay"
		"^/epay/styles/====SSO_DEMO_epay"
		"^/epay/scripts/====SSO_DEMO_epay"
		"^/epay/Common/====SSO_DEMO_epay"
		"^/epay/ServiceProvider\$====SSO_DEMO_epay"
		"^/epay/ServiceProvider/====SSO_DEMO_epay"
		"^/epay(/.*)?\$====SSO_DEMO_epay"
		#"^/ePayReports/====ssotest_230_80_Pool"
		#"^/\$====SSO_DEMO_mpay"
	}

    set static::SSO_DEMO_vs2_mPayQA_URI_Pool_mapping
	{
		#"^/userPortal(/)?\$====ssotest_230_80_Pool"
		#"^/\$====SSO_DEMO_mpay"
		#"^/mPay-front/====ssotest_230_80_Pool"
		"^/mPayAdmin(/)?\$====SSO_DEMO_mpay"
		"^/mPay-Reporter(/.*)?\$====SSO_DEMO_mpay"
		#"^/search/search.do\$====SSO_DEMO_mpay"
		#"^/mPay-front/====SSO_DEMO_mpay"
		#"/pkmslogin.form(.*)?\$====SSO_DEMO_mpay"
	}
}

when HTTP_REQUEST {

	if { $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0 and $SSO_DEMO_vs2_GLOBAL_SSODisable == 0} {

		set SSO_DEMO_vs2_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

			"demosp.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_sp_da"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemospda"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_sp_da 0
			}

			"servicedesk.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_sdesk"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemosdesk"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_sdesk 0

				#if { [HTTP::uri] contains "/udd.js" } {
				#	set LogString "Client [IP::client_addr]:[TCP::client_port] -> [HTTP::host][HTTP::uri]"
				#	log local0. "============================================="
				#	log local0. "$LogString (request)"
				#	foreach aHeader [HTTP::header names] {
				#		log local0. "$aHeader: [HTTP::header value $aHeader]"
				#	}
				#	log local0. "============================================="


					#	log local0. "URI: [HTTP::uri]"
					#	if { [HTTP::header exists Accept] } {
					#		log local0. "Accept-Encoding exists"
					#		log local0. "Accept: [HTTP::header value Accept]"
					#		HTTP::header remove Accept
					#		HTTP::header insert Accept "*/*"
					#		log local0. "Accept: [HTTP::header value Accept]"
					#	}
				#}
			}

			"gess2qa.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_gess_sync"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemogess"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_gess 0
				#log local0. "Pool selected: $SSO_DEMO_vs2_GLOBAL_poolName" 
			}

			"syncqa.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_gess_sync"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemosync"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_sync 0
			}

			"ecomplainqa.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_ecomp_esugg"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemoecomplain"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_ecomplain 0
			}

			"esuggestqa.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_poolName "SSO_DEMO_ecomp_esugg"
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "ssodemoesuggest"
				pool $SSO_DEMO_vs2_GLOBAL_poolName
				persist cookie insert SSO_DEMO_esuggest 0
			}

			"epaymentqa.dubaigov.ae" 
			{
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "SSOePayQA"
				#..........Pool Selection.........................................................
				foreach SSOePayQA_mappingRecord $static::SSO_DEMO_vs2_ePayQA_URI_Pool_mapping
				{
					set SSOePayQA_mapping_uri [getfield $SSOePayQA_mappingRecord "====" 1]
					set SSOePayQA_mapping_poolName [getfield $SSOePayQA_mappingRecord "====" 2]

					if {[regexp $SSOePayQA_mapping_uri $SSO_DEMO_vs2_GLOBAL_URI] == 1}
					{
						set SSO_DEMO_vs2_GLOBAL_poolName $SSOePayQA_mapping_poolName
						break
					}
				}
				#.................................................................................
				if { $SSO_DEMO_vs2_GLOBAL_poolName equals "" } {
					#HTTP::uri $static::SSO_DEMO_vs2_Sorry
					drop
					set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				} else {
					pool $SSO_DEMO_vs2_GLOBAL_poolName
					persist cookie insert SSO_DEMO_ePayQA_FSSOhttp 0	
				}
			}

			"mpayqa.dubaigov.ae" - "mpay.qa.dubai.ae"
			{
				set SSO_DEMO_vs2_GLOBAL_Rewrite_Select "SSOmPayQA"
				#..........Pool Selection.........................................................
				foreach SSOmPayQA_mappingRecord $static::SSO_DEMO_vs2_mPayQA_URI_Pool_mapping
				{
					set SSOmPayQA_mapping_uri [getfield $SSOmPayQA_mappingRecord "====" 1]
					set SSOmPayQA_mapping_poolName [getfield $SSOmPayQA_mappingRecord "====" 2]

					if {[regexp $SSOmPayQA_mapping_uri $SSO_DEMO_vs2_GLOBAL_URI] == 1}
					{
						set SSO_DEMO_vs2_GLOBAL_poolName $SSOmPayQA_mapping_poolName
						break
					}
				}
				#.................................................................................
				if { $SSO_DEMO_vs2_GLOBAL_poolName equals "" } {
					#HTTP::uri $static::SSO_DEMO_vs2_Sorry
					drop
					set SSO_DEMO_vs2_GLOBAL_BREAK_ALL 1
				} else {
					pool $SSO_DEMO_vs2_GLOBAL_poolName
					log local0. "Pool selected: $SSO_DEMO_vs2_GLOBAL_poolName"
					persist cookie insert SSO_DEMO_mPayQA_FSSOhttp 0
				}
			}

			default
			{
			# No default Pool
			}
		} 

	}

}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_ecomp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_ecomp_request_uri
	{
	}
	set static::SSO_DEMO_vs2_ecomp_request_host
	{
	} 
	set static::SSO_DEMO_vs2_ecomp_request_referer
	{
	}
	set static::SSO_DEMO_vs2_ecomp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_ecomp_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_ecomp_response_location
	{
		"http://ecomplainqa.dubaigov.ae====https://ecomplainqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_ecomp_response_contentLocation
	{
		"http://ecomplainqa.dubaigov.ae====https://ecomplainqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_ecomp_response_body
	{
		"http://ecomplainqa.dubaigov.ae====https://ecomplainqa.dubaigov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoecomplain" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_request_uri] > 0}
	{
	set SSO_DEMO_vs2_ecomp_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_request_uri
	{
		set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_ecomp_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_ecomp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_ecomp_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_request_host
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_ecomp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_ecomp_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_request_referer
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_ecomp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_ecomp_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_request_cookie
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_ecomp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoecomplain" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_ecomp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_val_list
		{
			foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_response_setCookie
			{
				set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_ecomp_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_ecomp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_ecomp_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_response_location
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_ecomp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_ecomp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_ecomp_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_response_contentLocation
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_ecomp_request_find $SSO_DEMO_vs2_ecomp_request_val $SSO_DEMO_vs2_ecomp_request_replace SSO_DEMO_vs2_ecomp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_ecomp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_ecomp_response_body] > 0}
	{
		set SSO_DEMO_vs2_ecomp_expression ""
		foreach SSO_DEMO_vs2_ecomp_request_rewriteRecord $static::SSO_DEMO_vs2_ecomp_response_body
		{
			set SSO_DEMO_vs2_ecomp_request_find [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_ecomp_request_replace [getfield $SSO_DEMO_vs2_ecomp_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_ecomp_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_ecomp_request_replace ""
			}

			set SSO_DEMO_vs2_ecomp_expression "$SSO_DEMO_vs2_ecomp_expression@$SSO_DEMO_vs2_ecomp_request_find@$SSO_DEMO_vs2_ecomp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_ecomp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoecomplain" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_ecomp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_ecomp_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_epay {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_epay_request_uri
	{
	}
	set static::SSO_DEMO_vs2_epay_request_host
	{
	} 
	set static::SSO_DEMO_vs2_epay_request_referer
	{
	}
	set static::SSO_DEMO_vs2_epay_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_epay_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_epay_response_location
	{
		"http://epaymentqa.dubaigov.ae====https://epaymentqa.dubaigov.ae"
		"http://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
		"https://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_epay_response_contentLocation
	{
		"http://epaymentqa.dubaigov.ae====https://epaymentqa.dubaigov.ae"
		"http://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
		"https://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_epay_response_body
	{
		"http://epaymentqa.dubaigov.ae====https://epaymentqa.dubaigov.ae"
		"http://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
		"https://epayment.qa.dubai.ae====https://epaymentqa.dubaigov.ae"
		#"\"http://demosp.dubaigov.ae====\"https://demosp.dubaigov.ae"
		#"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		#"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOePayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_epay_request_uri] > 0}
	{
	set SSO_DEMO_vs2_epay_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_request_uri
	{
		set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_epay_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_epay_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_epay_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_epay_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_request_host
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_epay_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_epay_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_epay_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_request_referer
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_epay_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_epay_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_request_cookie
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOePayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_epay_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_epay_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_val_list
		{
			foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_response_setCookie
			{
				set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_epay_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_epay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_epay_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_epay_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_response_location
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_epay_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_epay_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_response_contentLocation
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_epay_request_find $SSO_DEMO_vs2_epay_request_val $SSO_DEMO_vs2_epay_request_replace SSO_DEMO_vs2_epay_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_epay_response_body] > 0}
	{
		set SSO_DEMO_vs2_epay_expression ""
		foreach SSO_DEMO_vs2_epay_request_rewriteRecord $static::SSO_DEMO_vs2_epay_response_body
		{
			set SSO_DEMO_vs2_epay_request_find [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_epay_request_replace [getfield $SSO_DEMO_vs2_epay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_epay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_epay_request_replace ""
			}

			set SSO_DEMO_vs2_epay_expression "$SSO_DEMO_vs2_epay_expression@$SSO_DEMO_vs2_epay_request_find@$SSO_DEMO_vs2_epay_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_epay_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOePayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_epay_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_epay_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_esugg {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_esugg_request_uri
	{
	}
	set static::SSO_DEMO_vs2_esugg_request_host
	{
	} 
	set static::SSO_DEMO_vs2_esugg_request_referer
	{
	}
	set static::SSO_DEMO_vs2_esugg_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_esugg_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_esugg_response_location
	{
		"http://esuggestqa.dubaigov.ae====https://esuggestqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_esugg_response_contentLocation
	{
		"http://esuggestqa.dubaigov.ae====https://esuggestqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_esugg_response_body
	{
		"http://esuggestqa.dubaigov.ae====https://esuggestqa.dubaigov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoesuggest" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_esugg_request_uri] > 0}
	{
	set SSO_DEMO_vs2_esugg_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_request_uri
	{
		set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_esugg_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_esugg_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_esugg_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_esugg_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_request_host
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_esugg_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_esugg_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_esugg_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_request_referer
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_esugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_esugg_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_esugg_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_request_cookie
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_esugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoesuggest" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_esugg_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_esugg_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_val_list
		{
			foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_response_setCookie
			{
				set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_esugg_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_esugg_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_esugg_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_esugg_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_response_location
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_esugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_esugg_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_esugg_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_response_contentLocation
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_esugg_request_find $SSO_DEMO_vs2_esugg_request_val $SSO_DEMO_vs2_esugg_request_replace SSO_DEMO_vs2_esugg_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_esugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_esugg_response_body] > 0}
	{
		set SSO_DEMO_vs2_esugg_expression ""
		foreach SSO_DEMO_vs2_esugg_request_rewriteRecord $static::SSO_DEMO_vs2_esugg_response_body
		{
			set SSO_DEMO_vs2_esugg_request_find [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_esugg_request_replace [getfield $SSO_DEMO_vs2_esugg_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_esugg_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_esugg_request_replace ""
			}

			set SSO_DEMO_vs2_esugg_expression "$SSO_DEMO_vs2_esugg_expression@$SSO_DEMO_vs2_esugg_request_find@$SSO_DEMO_vs2_esugg_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_esugg_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemoesuggest" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_esugg_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_esugg_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_gess {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_gess_request_uri
	{
	}
	set static::SSO_DEMO_vs2_gess_request_host
	{
	} 
	set static::SSO_DEMO_vs2_gess_request_referer
	{
	}
	set static::SSO_DEMO_vs2_gess_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_gess_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_gess_response_location
	{
		"http://gess2qa.dubaigov.ae====https://gess2qa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_gess_response_contentLocation
	{
		"http://gess2qa.dubaigov.ae====https://gess2qa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_gess_response_body
	{
		"http://gess2qa.dubaigov.ae====https://gess2qa.dubaigov.ae"
		"https://eservices.qa.dubai.ae====https://gess2qa.dubaigov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemogess" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_gess_request_uri] > 0}
	{
	set SSO_DEMO_vs2_gess_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_request_uri
	{
		set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_gess_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_gess_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_gess_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_gess_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_request_host
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_gess_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_gess_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_gess_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_request_referer
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_gess_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_gess_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_request_cookie
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemogess" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_gess_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_gess_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_val_list
		{
			foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_response_setCookie
			{
				set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_gess_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_gess_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_gess_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_gess_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_response_location
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_gess_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_gess_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_response_contentLocation
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_gess_request_find $SSO_DEMO_vs2_gess_request_val $SSO_DEMO_vs2_gess_request_replace SSO_DEMO_vs2_gess_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_gess_response_body] > 0}
	{
		set SSO_DEMO_vs2_gess_expression ""
		foreach SSO_DEMO_vs2_gess_request_rewriteRecord $static::SSO_DEMO_vs2_gess_response_body
		{
			set SSO_DEMO_vs2_gess_request_find [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_gess_request_replace [getfield $SSO_DEMO_vs2_gess_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_gess_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_gess_request_replace ""
			}

			set SSO_DEMO_vs2_gess_expression "$SSO_DEMO_vs2_gess_expression@$SSO_DEMO_vs2_gess_request_find@$SSO_DEMO_vs2_gess_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_gess_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemogess" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_gess_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_gess_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_mpay {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_mpay_request_uri
	{
		#"^/mPayAdmin(/)?\$====/mPay-Reporter/security/login.do"
		#"/search/search.do\$====/mPay-Reporter/search/search.do"
	}
	set static::SSO_DEMO_vs2_mpay_request_host
	{
	} 
	set static::SSO_DEMO_vs2_mpay_request_referer
	{
	}
	set static::SSO_DEMO_vs2_mpay_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_mpay_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_mpay_response_location
	{
		"http://mpayqa.dubaigov.ae====https://mpayqa.dubaigov.ae"
		"http://mpay.qa.dubai.ae====https://mpay.qa.dubai.ae"
	}
	set static::SSO_DEMO_vs2_mpay_response_contentLocation
	{
		"http://mpayqa.dubaigov.ae====https://mpayqa.dubaigov.ae"
		"http://mpay.qa.dubai.ae====https://mpay.qa.dubai.ae"
	}
	set static::SSO_DEMO_vs2_mpay_response_body
	{
		"http://mpayqa.dubaigov.ae====https://mpayqa.dubaigov.ae"
		"http://mpay.qa.dubai.ae====https://mpay.qa.dubai.ae"
		"\"http://demosp.dubaigov.ae====\"https://demosp.dubaigov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOmPayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_mpay_request_uri] > 0}
	{
	set SSO_DEMO_vs2_mpay_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_request_uri
	{
		set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_mpay_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_mpay_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_mpay_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_mpay_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_request_host
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_mpay_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_mpay_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_mpay_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_request_referer
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_mpay_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_mpay_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_request_cookie
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOmPayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_mpay_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_mpay_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_val_list
		{
			foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_response_setCookie
			{
				set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_mpay_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_mpay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_mpay_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_mpay_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_response_location
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_mpay_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_mpay_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_response_contentLocation
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_mpay_request_find $SSO_DEMO_vs2_mpay_request_val $SSO_DEMO_vs2_mpay_request_replace SSO_DEMO_vs2_mpay_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_mpay_response_body] > 0}
	{
		set SSO_DEMO_vs2_mpay_expression ""
		foreach SSO_DEMO_vs2_mpay_request_rewriteRecord $static::SSO_DEMO_vs2_mpay_response_body
		{
			set SSO_DEMO_vs2_mpay_request_find [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_mpay_request_replace [getfield $SSO_DEMO_vs2_mpay_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_mpay_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_mpay_request_replace ""
			}

			set SSO_DEMO_vs2_mpay_expression "$SSO_DEMO_vs2_mpay_expression@$SSO_DEMO_vs2_mpay_request_find@$SSO_DEMO_vs2_mpay_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_mpay_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "SSOmPayQA" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_mpay_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_mpay_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_sdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_sdesk_request_uri
	{
		"^/\$====/arsys"
	}
	set static::SSO_DEMO_vs2_sdesk_request_host
	{
	} 
	set static::SSO_DEMO_vs2_sdesk_request_referer
	{
	}
	set static::SSO_DEMO_vs2_sdesk_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_sdesk_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_sdesk_response_location
	{
		"http://servicedesk.dubaigov.ae====https://servicedesk.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_sdesk_response_contentLocation
	{
		"http://servicedesk.dubaigov.ae====https://servicedesk.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_sdesk_response_body
	{
		"\"http://demosp.dubaigov.ae====\"https://demosp.dubaigov.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosdesk" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


           # if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_request_uri] > 0}
	{
	set SSO_DEMO_vs2_sdesk_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_request_uri
	{
		set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_sdesk_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_sdesk_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_sdesk_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_request_host
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_sdesk_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_sdesk_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_request_referer
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_sdesk_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_request_cookie
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosdesk" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_sdesk_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_val_list
		{
			foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_response_setCookie
			{
				set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_sdesk_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_sdesk_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_sdesk_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_response_location
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sdesk_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_sdesk_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_response_contentLocation
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sdesk_request_find $SSO_DEMO_vs2_sdesk_request_val $SSO_DEMO_vs2_sdesk_request_replace SSO_DEMO_vs2_sdesk_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_sdesk_response_body] > 0}
	{
		set SSO_DEMO_vs2_sdesk_expression ""
		foreach SSO_DEMO_vs2_sdesk_request_rewriteRecord $static::SSO_DEMO_vs2_sdesk_response_body
		{
			set SSO_DEMO_vs2_sdesk_request_find [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sdesk_request_replace [getfield $SSO_DEMO_vs2_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sdesk_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sdesk_request_replace ""
			}

			set SSO_DEMO_vs2_sdesk_expression "$SSO_DEMO_vs2_sdesk_expression@$SSO_DEMO_vs2_sdesk_request_find@$SSO_DEMO_vs2_sdesk_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_sdesk_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosdesk" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_sdesk_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_sdesk_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_sp_da {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_spda_request_uri
	{
	}
	set static::SSO_DEMO_vs2_spda_request_host
	{
	} 
	set static::SSO_DEMO_vs2_spda_request_referer
	{
	}
	set static::SSO_DEMO_vs2_spda_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_spda_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_spda_response_location
	{
		"http://demosp.dubaigov.ae====https://demosp.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_spda_response_contentLocation
	{
		"http://demosp.dubaigov.ae====https://demosp.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_spda_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemospda" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_spda_request_uri] > 0}
	{
	set SSO_DEMO_vs2_spda_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_request_uri
	{
		set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_spda_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_spda_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_spda_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_spda_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_request_host
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_spda_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_spda_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_spda_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_request_referer
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_spda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_spda_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_spda_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_request_cookie
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_spda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemospda" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_spda_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_spda_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_val_list
		{
			foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_response_setCookie
			{
				set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_spda_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_spda_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_spda_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_spda_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_response_location
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_spda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_spda_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_spda_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_response_contentLocation
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_spda_request_find $SSO_DEMO_vs2_spda_request_val $SSO_DEMO_vs2_spda_request_replace SSO_DEMO_vs2_spda_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_spda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_spda_response_body] > 0}
	{
		set SSO_DEMO_vs2_spda_expression ""
		foreach SSO_DEMO_vs2_spda_request_rewriteRecord $static::SSO_DEMO_vs2_spda_response_body
		{
			set SSO_DEMO_vs2_spda_request_find [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_spda_request_replace [getfield $SSO_DEMO_vs2_spda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_spda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_spda_request_replace ""
			}

			set SSO_DEMO_vs2_spda_expression "$SSO_DEMO_vs2_spda_expression@$SSO_DEMO_vs2_spda_request_find@$SSO_DEMO_vs2_spda_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_spda_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemospda" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_spda_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_spda_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs2_Rewrite_sync {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs2_sync_request_uri
	{
	}
	set static::SSO_DEMO_vs2_sync_request_host
	{
	} 
	set static::SSO_DEMO_vs2_sync_request_referer
	{
	}
	set static::SSO_DEMO_vs2_sync_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs2_sync_response_setCookie
	{
	}
	set static::SSO_DEMO_vs2_sync_response_location
	{
		"http://syncqa.dubaigov.ae====https://syncqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_sync_response_contentLocation
	{
		"http://syncqa.dubaigov.ae====https://syncqa.dubaigov.ae"
	}
	set static::SSO_DEMO_vs2_sync_response_body
	{
		"http://syncqa.dubaigov.ae====https://syncqa.dubaigov.ae"
		"https://eservices.qa.dubai.ae====https://syncqa.dubaigov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosync" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sync_request_uri] > 0}
	{
	set SSO_DEMO_vs2_sync_request_val [HTTP::uri]
	foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_request_uri
	{
		set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
		{
			set SSO_DEMO_vs2_sync_request_replace ""
		}

		regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs2_sync_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sync_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs2_sync_request_val [HTTP::host]
		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_request_host
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}
			regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs2_sync_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sync_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs2_sync_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_request_referer
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs2_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs2_sync_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs2_sync_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_request_cookie
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs2_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosync" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sync_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs2_sync_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_val_list
		{
			foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_response_setCookie
			{
				set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
				{
					set SSO_DEMO_vs2_sync_request_replace ""
				}
				regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs2_sync_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sync_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs2_sync_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_response_location
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs2_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs2_sync_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs2_sync_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_response_contentLocation
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}

			regsub -all $SSO_DEMO_vs2_sync_request_find $SSO_DEMO_vs2_sync_request_val $SSO_DEMO_vs2_sync_request_replace SSO_DEMO_vs2_sync_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs2_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs2_sync_response_body] > 0}
	{
		set SSO_DEMO_vs2_sync_expression ""
		foreach SSO_DEMO_vs2_sync_request_rewriteRecord $static::SSO_DEMO_vs2_sync_response_body
		{
			set SSO_DEMO_vs2_sync_request_find [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs2_sync_request_replace [getfield $SSO_DEMO_vs2_sync_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs2_sync_request_replace == "nothing"}
			{
				set SSO_DEMO_vs2_sync_request_replace ""
			}

			set SSO_DEMO_vs2_sync_expression "$SSO_DEMO_vs2_sync_expression@$SSO_DEMO_vs2_sync_request_find@$SSO_DEMO_vs2_sync_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs2_sync_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs2_GLOBAL_Rewrite_Select == "ssodemosync" and $SSO_DEMO_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs2_sync_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs2_sync_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs3_80_Base {
    when RULE_INIT
{

}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] { 

		"grpportal.pilot.deg.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
	    	pool SSO_DEMO_grpportal_8080
			HTTP::header replace Host "grpportal.pilot.deg.ae:8080"
	    	persist cookie insert SSO_DEMO_grpportal 0
        }

		"teams.pilot.deg.ae" - "ibmfim.pilot.deg.ae" - "confluenceqa.dsg.gov.ae" - "demosp.dsg.gov.ae" 
		{
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
		}

		"jiraqa.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
	    	#pool SSO_DEMO_grpportal_8080
			#HTTP::header replace Host "jiraqa.dsg.gov.ae:9090"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
			}
	    	#persist cookie insert SSO_DEMO_grpportal 0
        }


    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/SSO_DEMO_vs3_Base {
    when RULE_INIT
{

}

when HTTP_REQUEST
{
	set SSO_DEMO_vs3_GLOBAL_BREAK_ALL 0
	set SSO_DEMO_vs3_GLOBAL_poolName ""
	set SSO_DEMO_vs3_GLOBAL_Rewrite_Select ""
	set SSO_DEMO_vs3_GLOBAL_URI ""


	switch [string tolower [HTTP::host]] { 

		"demosp.pilot.deg.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"teams.pilot.deg.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"grpportal.pilot.deg.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ibmfim.pilot.deg.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"confluenceqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"jiraqa.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"demosp.dsg.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_DEMO_vs3_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_DEMO_vs3_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_DEMO_vs3_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_DEMO_vs3_host "" SSO_DEMO_vs3_host
		HTTP::respond 302 Location "https://$SSO_DEMO_vs3_host[HTTP::uri]"
		set SSO_DEMO_vs3_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/SSO_DEMO_vs3_Pool_Select {
    when RULE_INIT
{
	#set static::SSO_DEMO_vs3_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {

	set SSO_DEMO_vs3_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"demosp.pilot.deg.ae" - "ibmfim.pilot.deg.ae" 
	{
		set SSO_DEMO_vs3_GLOBAL_poolName "SSO_DEMO_sp_pda"
		set SSO_DEMO_vs3_GLOBAL_Rewrite_Select "ssodemosppda"
		pool $SSO_DEMO_vs3_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_sp_pda 0
	}

	"teams.pilot.deg.ae" 
	{
		set SSO_DEMO_vs3_GLOBAL_poolName "SSO_DEMO_teams"
		set SSO_DEMO_vs3_GLOBAL_Rewrite_Select "ssodemoteams"
		pool $SSO_DEMO_vs3_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_teams 0
		if { not([HTTP::cookie exists "PD-H-TMP-SESSION-ID"]) } {
			HTTP::uri /pkmstempsession?url=[HTTP::uri]
		}
	}

	"grpportal.pilot.deg.ae" 
	{
		set SSO_DEMO_vs3_GLOBAL_poolName "SSO_DEMO_teams"
		set SSO_DEMO_vs3_GLOBAL_Rewrite_Select "ssodemogrpportal"
		pool $SSO_DEMO_vs3_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_grpportal_S 0
	}


	"demosp.dsg.gov.ae" 
	{
		set SSO_DEMO_vs3_GLOBAL_poolName "SSO_DEMO_SP_DSG_Pool"
		set SSO_DEMO_vs3_GLOBAL_Rewrite_Select "ssodemosppda"
		pool $SSO_DEMO_vs3_GLOBAL_poolName
	   	persist cookie insert SSO_DEMO_sp_DSG 0
	}

	"confluenceqa.dsg.gov.ae" - "jiraqa.dsg.gov.ae"
	{
		set SSO_DEMO_vs3_GLOBAL_poolName "SSO_DEMO_JIRA_DSG_Pool"
		set SSO_DEMO_vs3_GLOBAL_Rewrite_Select "ssodemosppda"
		pool $SSO_DEMO_vs3_GLOBAL_poolName
		#HTTP::header replace Host "confluenceqa.dsg.gov.ae:7070"
	   	persist cookie insert SSO_DEMO_SP_Jira_DSG 0
	}

	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
    set SSO_DEMO_vs3_myCookies [HTTP::cookie names]
    foreach SSO_DEMO_vs3_myCookieVal $SSO_DEMO_vs3_myCookies {
       HTTP::cookie secure $SSO_DEMO_vs3_myCookieVal enable
	   if { $SSO_DEMO_vs3_myCookieVal equals "SSO_DEMO_teams" } {
			HTTP::cookie expires SSO_DEMO_teams 900
		}
    }
}
}
ltm rule /Common/SSO_DEMO_vs3_Rewrite_grpportal {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs3_grpportal_request_uri
	{
	}
	set static::SSO_DEMO_vs3_grpportal_request_host
	{
		#"grpportal.pilot.deg.ae====grpportal.pilot.deg.ae:8080"
	} 
	set static::SSO_DEMO_vs3_grpportal_request_referer
	{
	}
	set static::SSO_DEMO_vs3_grpportal_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs3_grpportal_response_setCookie
	{
	}
	set static::SSO_DEMO_vs3_grpportal_response_location
	{
		#"https://grpportal.pilot.deg.ae:8080====https://grpportal.pilot.deg.ae"
		"http://grpportal.pilot.deg.ae====https://grpportal.pilot.deg.ae"
	}
	set static::SSO_DEMO_vs3_grpportal_response_contentLocation
	{
		#"https://grpportal.pilot.deg.ae:8080====https://grpportal.pilot.deg.ae"
		"http://grpportal.pilot.deg.ae====https://grpportal.pilot.deg.ae"
	}
	set static::SSO_DEMO_vs3_grpportal_response_body
	{
		#"https://grpportal.pilot.deg.ae:8080====https://grpportal.pilot.deg.ae"
		"http://grpportal.pilot.deg.ae====https://grpportal.pilot.deg.ae"
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.pilot.deg.ae====\"https://demosp.pilot.deg.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemogrpportal" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_request_uri] > 0}
	{
	set SSO_DEMO_vs3_grpportal_request_val [HTTP::uri]
	foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_request_uri
	{
		set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
		{
			set SSO_DEMO_vs3_grpportal_request_replace ""
		}

		regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs3_grpportal_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs3_grpportal_request_val [HTTP::host]
		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_request_host
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}
			regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs3_grpportal_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs3_grpportal_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_request_referer
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs3_grpportal_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs3_grpportal_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_request_cookie
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs3_grpportal_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemogrpportal" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs3_grpportal_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_val_list
		{
			foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_response_setCookie
			{
				set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
				{
					set SSO_DEMO_vs3_grpportal_request_replace ""
				}
				regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs3_grpportal_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs3_grpportal_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_response_location
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs3_grpportal_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_grpportal_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs3_grpportal_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_response_contentLocation
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_grpportal_request_find $SSO_DEMO_vs3_grpportal_request_val $SSO_DEMO_vs3_grpportal_request_replace SSO_DEMO_vs3_grpportal_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs3_grpportal_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs3_grpportal_response_body] > 0}
	{
		set SSO_DEMO_vs3_grpportal_expression ""
		foreach SSO_DEMO_vs3_grpportal_request_rewriteRecord $static::SSO_DEMO_vs3_grpportal_response_body
		{
			set SSO_DEMO_vs3_grpportal_request_find [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_grpportal_request_replace [getfield $SSO_DEMO_vs3_grpportal_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_grpportal_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_grpportal_request_replace ""
			}

			set SSO_DEMO_vs3_grpportal_expression "$SSO_DEMO_vs3_grpportal_expression@$SSO_DEMO_vs3_grpportal_request_find@$SSO_DEMO_vs3_grpportal_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs3_grpportal_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemogrpportal" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs3_grpportal_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs3_grpportal_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs3_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs3_Rewrite_sp_pda {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs3_sppda_request_uri
	{
	}
	set static::SSO_DEMO_vs3_sppda_request_host
	{
		"confluenceqa.dsg.gov.ae====confluenceqa.dsg.gov.ae:7070"
		#"jiraqa.dsg.gov.ae====jiraqa.dsg.gov.ae:9090"
	} 
	set static::SSO_DEMO_vs3_sppda_request_referer
	{
		"confluenceqa.dsg.gov.ae====confluenceqa.dsg.gov.ae:7070"
		#"jiraqa.dsg.gov.ae====jiraqa.dsg.gov.ae:9090"
	}
	set static::SSO_DEMO_vs3_sppda_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs3_sppda_response_setCookie
	{
	}
	set static::SSO_DEMO_vs3_sppda_response_location
	{
		"http://demosp.pilot.deg.ae====https://demosp.pilot.deg.ae"
		"http://ibmfim.pilot.deg.ae====https://ibmfim.pilot.deg.ae"
		"http://demosp.dsg.gov.ae====https://demosp.dsg.gov.ae"
		"http://confluenceqa.dsg.gov.ae:7070====https://confluenceqa.dsg.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
	set static::SSO_DEMO_vs3_sppda_response_contentLocation
	{
		"http://demosp.pilot.deg.ae====https://demosp.pilot.deg.ae"
		"http://ibmfim.pilot.deg.ae====https://ibmfim.pilot.deg.ae"
		"http://demosp.dsg.gov.ae====https://demosp.dsg.gov.ae"
		"http://confluenceqa.dsg.gov.ae:7070====https://confluenceqa.dsg.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
	set static::SSO_DEMO_vs3_sppda_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"http://ibmfim.pilot.deg.ae====https://ibmfim.pilot.deg.ae"
		"http://demosp.dsg.gov.ae====https://demosp.dsg.gov.ae"
		"http://confluenceqa.dsg.gov.ae:7070====https://confluenceqa.dsg.gov.ae"
		"http://jiraqa.dsg.gov.ae====https://jiraqa.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemosppda" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_sppda_request_uri] > 0}
	{
	set SSO_DEMO_vs3_sppda_request_val [HTTP::uri]
	foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_request_uri
	{
		set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
		{
			set SSO_DEMO_vs3_sppda_request_replace ""
		}

		regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs3_sppda_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_sppda_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs3_sppda_request_val [HTTP::host]
		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_request_host
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}
			regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs3_sppda_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_sppda_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs3_sppda_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_request_referer
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs3_sppda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_sppda_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs3_sppda_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_request_cookie
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs3_sppda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemosppda" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_sppda_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs3_sppda_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_val_list
		{
			foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_response_setCookie
			{
				set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
				{
					set SSO_DEMO_vs3_sppda_request_replace ""
				}
				regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs3_sppda_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_sppda_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs3_sppda_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_response_location
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs3_sppda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_sppda_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs3_sppda_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_response_contentLocation
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_sppda_request_find $SSO_DEMO_vs3_sppda_request_val $SSO_DEMO_vs3_sppda_request_replace SSO_DEMO_vs3_sppda_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs3_sppda_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs3_sppda_response_body] > 0}
	{
		set SSO_DEMO_vs3_sppda_expression ""
		foreach SSO_DEMO_vs3_sppda_request_rewriteRecord $static::SSO_DEMO_vs3_sppda_response_body
		{
			set SSO_DEMO_vs3_sppda_request_find [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_sppda_request_replace [getfield $SSO_DEMO_vs3_sppda_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_sppda_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_sppda_request_replace ""
			}

			set SSO_DEMO_vs3_sppda_expression "$SSO_DEMO_vs3_sppda_expression@$SSO_DEMO_vs3_sppda_request_find@$SSO_DEMO_vs3_sppda_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs3_sppda_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemosppda" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs3_sppda_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs3_sppda_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs3_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_DEMO_vs3_Rewrite_teams {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_DEMO_vs3_teams_request_uri
	{
	}
	set static::SSO_DEMO_vs3_teams_request_host
	{
	} 
	set static::SSO_DEMO_vs3_teams_request_referer
	{
	}
	set static::SSO_DEMO_vs3_teams_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_DEMO_vs3_teams_response_setCookie
	{
	}
	set static::SSO_DEMO_vs3_teams_response_location
	{
	}
	set static::SSO_DEMO_vs3_teams_response_contentLocation
	{
	}
	set static::SSO_DEMO_vs3_teams_response_body
	{
		"http://demoidp.dubai.gov.ae====https://demoidp.dubai.gov.ae"
		"\"http://demosp.pilot.deg.ae====\"https://demosp.pilot.deg.ae"
		"\"http://demosp.dubai.gov.ae====\"https://demosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemoteams" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_teams_request_uri] > 0}
	{
	set SSO_DEMO_vs3_teams_request_val [HTTP::uri]
	foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_request_uri
	{
		set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
		set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]
		if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
		{
			set SSO_DEMO_vs3_teams_request_replace ""
		}

		regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
	}
	if { [catch {HTTP::uri $SSO_DEMO_vs3_teams_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_teams_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_DEMO_vs3_teams_request_val [HTTP::host]
		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_request_host
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}
			regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_DEMO_vs3_teams_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_teams_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_DEMO_vs3_teams_request_val [HTTP::header value Referer]
		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_request_referer
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_DEMO_vs3_teams_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_DEMO_vs3_teams_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_DEMO_vs3_teams_request_val [HTTP::header value Cookie]
		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_request_cookie
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]

			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_DEMO_vs3_teams_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemoteams" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_teams_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_DEMO_vs3_teams_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_val_list
		{
			foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_response_setCookie
			{
				set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
				set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]

				if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
				{
					set SSO_DEMO_vs3_teams_request_replace ""
				}
				regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_DEMO_vs3_teams_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_teams_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_DEMO_vs3_teams_request_val [HTTP::header value Location]

		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_response_location
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_DEMO_vs3_teams_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_DEMO_vs3_teams_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_DEMO_vs3_teams_request_val [HTTP::header value Content-Location]

		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_response_contentLocation
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}

			regsub -all $SSO_DEMO_vs3_teams_request_find $SSO_DEMO_vs3_teams_request_val $SSO_DEMO_vs3_teams_request_replace SSO_DEMO_vs3_teams_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_DEMO_vs3_teams_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_DEMO_vs3_teams_response_body] > 0}
	{
		set SSO_DEMO_vs3_teams_expression ""
		foreach SSO_DEMO_vs3_teams_request_rewriteRecord $static::SSO_DEMO_vs3_teams_response_body
		{
			set SSO_DEMO_vs3_teams_request_find [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 1]
			set SSO_DEMO_vs3_teams_request_replace [getfield $SSO_DEMO_vs3_teams_request_rewriteRecord "====" 2]
			if {$SSO_DEMO_vs3_teams_request_replace == "nothing"}
			{
				set SSO_DEMO_vs3_teams_request_replace ""
			}

			set SSO_DEMO_vs3_teams_expression "$SSO_DEMO_vs3_teams_expression@$SSO_DEMO_vs3_teams_request_find@$SSO_DEMO_vs3_teams_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_DEMO_vs3_teams_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_DEMO_vs3_GLOBAL_Rewrite_Select == "ssodemoteams" and $SSO_DEMO_vs3_GLOBAL_BREAK_ALL == 0} {

		#set SSO_DEMO_vs3_teams_theMatch [STREAM::match]

		#log local0. "match found: $SSO_DEMO_vs3_teams_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs3_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_CompSugg_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] { 
        "ecomplainadmin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://ecomplainadmin.dubai.gov.ae"
		    }
        }

		"esuggestadmin.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://esuggestadmin.dubai.gov.ae"
		    }
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/SSO_PROD_CompSugg_Base {
    when RULE_INIT
{
	# set static::SSO_PROD_CompSugg_GLOBAL_Maint_BypassIPs "ePayPROD_Maint_Bypass"
}

when HTTP_REQUEST
{
	set SSO_PROD_CompSugg_GLOBAL_BREAK_ALL 0
	set SSO_PROD_CompSugg_GLOBAL_SSODisable 0
	set SSO_PROD_CompSugg_GLOBAL_poolName ""
	set SSO_PROD_CompSugg_GLOBAL_Rewrite_Class ""
	set SSO_PROD_CompSugg_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "ecomplainadmin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#set SSO_PROD_CompSugg_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "http://admin.ecomplain.dubai.ae"

	    }
		"esuggestadmin.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#set SSO_PROD_CompSugg_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "http://admin.esuggest.dubai.ae"
        }
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_CompSugg_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }	
}
}
ltm rule /Common/SSO_PROD_CompSugg_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_CompSugg_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::SSO_PROD_CompSugg_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team.</p></body></html>"
}

when HTTP_REQUEST
{
	if { $SSO_PROD_CompSugg_GLOBAL_BREAK_ALL == 0 } {

		#set SSO_PROD_CompSugg_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

			"ecomplainadmin.dubai.gov.ae"
			{
				if { ($static::SSO_PROD_CompSugg_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_CompSugg_GLOBAL_poolName "SSO_PROD_eSugg_eComp"
				} else {
					set SSO_PROD_CompSugg_GLOBAL_poolName "SSO_PROD_eComp_eSugg"
				}

				set SSO_PROD_CompSugg_GLOBAL_Rewrite_Class "SSO_CompSugg"
				pool $SSO_PROD_CompSugg_GLOBAL_poolName
				persist cookie insert SSO_PROD_eComplain 0
			}
			"esuggestadmin.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_CompSugg_SAM8_Enable == 1) and ([IP::client_addr] equals "213.42.50.181") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172") } {
					set SSO_PROD_CompSugg_GLOBAL_poolName "SSO_PROD_eSugg_eComp"
				} else {
					set SSO_PROD_CompSugg_GLOBAL_poolName "SSO_PROD_eComp_eSugg"
				}

				set SSO_PROD_CompSugg_GLOBAL_Rewrite_Class "SSO_CompSugg"
				pool $SSO_PROD_CompSugg_GLOBAL_poolName
				persist cookie insert SSO_PROD_eSuggest 0
			}

			default
			{
				# No default Pool
				#set SSO_PROD_CompSugg_GLOBAL_BREAK_ALL 1
				#HTTP::uri "<html><head></head><body><p>Access Denied...!!! For assistance contact DSG Support Team.</p></body></html>"
			}
		} 	
	}
}

when HTTP_RESPONSE
{
	if { $SSO_PROD_CompSugg_GLOBAL_BREAK_ALL == 0 } {
		set SSO_PROD_CompSugg_myCookies [HTTP::cookie names]
		foreach SSO_PROD_CompSugg_myCookieVal $SSO_PROD_CompSugg_myCookies {
			HTTP::cookie secure $SSO_PROD_CompSugg_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_CompSugg_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_CompSugg_compsugg_request_uri
	{
	}
	set static::SSO_PROD_CompSugg_compsugg_request_host
	{
	} 
	set static::SSO_PROD_CompSugg_compsugg_request_referer
	{
	}
	set static::SSO_PROD_CompSugg_compsugg_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_CompSugg_compsugg_response_setCookie
	{
	}
	set static::SSO_PROD_CompSugg_compsugg_response_location
	{
		"http://ecomplainadmin.dubai.gov.ae====https://ecomplainadmin.dubai.gov.ae"
		"http://esuggestadmin.dubai.gov.ae====https://esuggestadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_CompSugg_compsugg_response_contentLocation
	{
		"http://ecomplainadmin.dubai.gov.ae====https://ecomplainadmin.dubai.gov.ae"
		"http://esuggestadmin.dubai.gov.ae====https://esuggestadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_CompSugg_compsugg_response_body
	{
		"http://ecomplainadmin.dubai.gov.ae====https://ecomplainadmin.dubai.gov.ae"
		"http://esuggestadmin.dubai.gov.ae====https://esuggestadmin.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_CompSugg_GLOBAL_Rewrite_Class == "SSO_CompSugg" and $SSO_PROD_CompSugg_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_request_uri] > 0}
	{
	set SSO_PROD_CompSugg_compsugg_request_val [HTTP::uri]
	foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_request_uri
	{
		set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
		set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]
		if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
		{
			set SSO_PROD_CompSugg_compsugg_request_replace ""
		}

		regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_CompSugg_compsugg_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val [HTTP::host]
		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_request_host
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}
			regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_CompSugg_compsugg_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val [HTTP::header value Referer]
		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_request_referer
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}

			regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_CompSugg_compsugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_request_cookie
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}

			regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_CompSugg_compsugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_CompSugg_GLOBAL_Rewrite_Class == "SSO_CompSugg" and $SSO_PROD_CompSugg_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_val_list
		{
			foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_response_setCookie
			{
				set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
				set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]

				if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
				{
					set SSO_PROD_CompSugg_compsugg_request_replace ""
				}
				regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_CompSugg_compsugg_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val [HTTP::header value Location]

		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_response_location
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}

			regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_CompSugg_compsugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_CompSugg_compsugg_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_CompSugg_compsugg_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_response_contentLocation
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}

			regsub -all $SSO_PROD_CompSugg_compsugg_request_find $SSO_PROD_CompSugg_compsugg_request_val $SSO_PROD_CompSugg_compsugg_request_replace SSO_PROD_CompSugg_compsugg_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_CompSugg_compsugg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_CompSugg_compsugg_response_body] > 0}
	{
		set SSO_PROD_CompSugg_compsugg_expression ""
		foreach SSO_PROD_CompSugg_compsugg_request_rewriteRecord $static::SSO_PROD_CompSugg_compsugg_response_body
		{
			set SSO_PROD_CompSugg_compsugg_request_find [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 1]
			set SSO_PROD_CompSugg_compsugg_request_replace [getfield $SSO_PROD_CompSugg_compsugg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_CompSugg_compsugg_request_replace == "nothing"}
			{
				set SSO_PROD_CompSugg_compsugg_request_replace ""
			}

			set SSO_PROD_CompSugg_compsugg_expression "$SSO_PROD_CompSugg_compsugg_expression@$SSO_PROD_CompSugg_compsugg_request_find@$SSO_PROD_CompSugg_compsugg_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_CompSugg_compsugg_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_CompSugg_GLOBAL_Rewrite_Class == "SSO_CompSugg" and $SSO_PROD_CompSugg_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_CompSugg_compsugg_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_CompSugg_compsugg_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 0
	set SSO_PROD_GRP_80_GLOBAL_poolName ""
	set SSO_PROD_GRP_80_GLOBAL_Rewrite_Class ""
	set SSO_PROD_GRP_80_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "grp.dubai.gov.ae" - "www.grp.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
	        if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::uri] starts_with "/endeca"} { 
				HTTP::redirect "https://grp.dubai.gov.ae[HTTP::uri]"
			} elseif {[HTTP::uri] equals "/xxxdiscoverer/plus"} {
				HTTP::redirect "https://grp.dubai.gov.ae/discoverer/plus"
			} else {
				drop
			}
        }

		"ejob.dubai.gov.ae" - "www.ejob.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
			HTTP::redirect "https://ejob.dubai.gov.ae[HTTP::uri]"
        }
		"isupplier.dubai.gov.ae" - "www.isupplier.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
		    HTTP::redirect "https://isupplier.dubai.gov.ae" 
        }
		"ejob.ae" - "www.ejob.ae" - "ejob.dubai.ae" - "www.ejob.dubai.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "https://ejob.dubai.gov.ae/OA_HTML/IrcVisitor.jsp?L=AR"
			HTTP::redirect "https://ejob.dubai.gov.ae[HTTP::uri]"
        }
		"isupplier.ae" - "www.isupplier.ae" - "isupplier.gov.ae" - "www.isupplier.gov.ae" - "isupplier.dubai.ae" - "www.isupplier.dubai.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
		    HTTP::redirect "https://isupplier.dubai.gov.ae" 
        }
    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

}
}
ltm rule /Common/SSO_PROD_GRP_80_HTTPtoHTTPS {
    when RULE_INIT
{
	set static::SSO_PROD_GRP_80_HTTP_to_HTTPS "ACL_MS_GRP_PROD_HTTP_to_HTTPS"
	#set static::SSO_PROD_GRP_80_Sorry "<html><head></head><body><p> Secure Access URL is https://grp.dubai.gov.ae For assistance contact DeG Support Team."
}


when HTTP_REQUEST
{
	if { [matchclass $static::SSO_PROD_GRP_80_HTTP_to_HTTPS equals [IP::client_addr]] and $SSO_PROD_GRP_80_GLOBAL_BREAK_ALL == 0}
	{
	    if {[HTTP::host] equals "grp.dubai.gov.ae"} {
	    set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1
	    if { ([HTTP::uri] equals "/")  } { 
			HTTP::redirect "https://grp.dubai.gov.ae"
		} elseif {[HTTP::uri] equals "/discoverer/plus"} {
			HTTP::redirect "https://grp.dubai.gov.ae/discoverer/plus"
		} else {
			drop
		}
	    }
	}
}
}
ltm rule /Common/SSO_PROD_GRP_80_Pool_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_GRP_80_flag_maintenance_grpAPP 0
}

when HTTP_REQUEST
{
	set SSO_PROD_GRP_80_flag_goToMaintenance 0

	switch $SSO_PROD_GRP_80_GLOBAL_poolName
	{
		"MS_GRP_PRD_APP_Pool"
		{
			if {not ([matchclass $static::SSO_PROD_GRP_80_ME equals [IP::client_addr]]) and $static::SSO_PROD_GRP_80_flag_maintenance_grpAPP == 1}
			{
				set SSO_PROD_GRP_80_flag_goToMaintenance 1
			}
		}
	}

	if {$SSO_PROD_GRP_80_flag_goToMaintenance == 1 or [IP::client_addr] equals "172.16.3.10" }
	{
		set SSO_PROD_GRP_80_GLOBAL_BREAK_ALL 1

		#HTTP::redirect "http://maintenance.dubai.ae"

		if {[HTTP::uri] ends_with "favicon.ico"} {
			HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
        }
		elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
			HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
		}
		else {
			HTTP::uri "/sites/maintenance/maintenance.aspx"
		}

		HTTP::header replace Host "www.dsg.gov.ae"
		HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		set SSO_PROD_GRP_80_GLOBAL_poolName "grpMaintenance_pool"
		pool $SSO_PROD_GRP_80_GLOBAL_poolName
		persist cookie insert GRP_PROD_Maint 0
	} 

}
}
ltm rule /Common/SSO_PROD_GRP_80_Pool_Select {
    when RULE_INIT
{
	#set static::SSO_PROD_GRP_80_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_PROD_GRP_80_GLOBAL_BREAK_ALL == 0} {

	set SSO_PROD_GRP_80_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"grp.dubai.gov.ae" 
	{
    	if { not [matchclass [IP::client_addr] equals $static::SSO_PROD_GRP_80_GIN_Src]  or [IP::client_addr] equals "172.16.3.12"}
            {
	     	    #Redirecting Non_GIN IPs to access GRP only as HTTPS
	        	set SSO_PROD_GRP_80_GLOBAL_BREAK_All 1
	        	HTTP::redirect "https://[HTTP::host][HTTP::uri]"

	        } else {
	        	set SSO_PROD_GRP_80_GLOBAL_poolName $static::SSO_PROD_GRP_80_APP_Pool
	            pool $SSO_PROD_GRP_80_GLOBAL_poolName
	        	persist cookie insert grpPROD_APP 0

				if  { ([HTTP::uri] equals "/") } {
	             	HTTP::uri "/OA_HTML/AppsLogin"    
                } 
		    }	
	}

	default
    {
		# No default Pool
	}
  }


}

}
}
ltm rule /Common/SSO_PROD_GRP_Base {
    when RULE_INIT
{
	set static::SSO_PROD_GRP_GIN_Src "ACL_MS_GRP_PROD_GIN_Supernet"
	set static::SSO_PROD_GRP_ME "ACL_MS_GRP_PROD_Maint_Exempt" 
	set static::SSO_PROD_GRP_APP_Pool "MS_GRP_PRD_APP_Pool"
	set static::SSO_PROD_GRP_DMZ_Pool "MS_GRP_PRD_DMZ_Pool"
	set static::SSO_PROD_GRP_REP_Pool "MS_GRP_PRD_REP_Pool"
	set static::SSO_PROD_GRP_eJob_for_Dept "PRODeJobRedirect"
	set static::SSO_PROD_GRP_SSOAPP_Pool "SSO_PROD_GRP_APP_Pool"
	set static::SSO_PROD_GRP_SSODMZ_Pool "SSO_PROD_GRP_DMZ_Pool"
	set static::SSO_PROD_GRP_SSOREP_Pool "SSO_PROD_GRP_REP_Pool"
	set static::SSO_PROD_GRP_DMZ_Src "ACL_GRP_PROD_DMZ_IPs"
	set static::SSO_PROD_GRP_SSO_Enable "ACL_GRP_PROD_SSO_Enable"
}

when HTTP_REQUEST
{
	set SSO_PROD_GRP_GLOBAL_BREAK_ALL 0
	set SSO_PROD_GRP_GLOBAL_SSODisable 0
	set SSO_PROD_GRP_GLOBAL_poolName ""
	set SSO_PROD_GRP_GLOBAL_Rewrite_Class ""
	set SSO_PROD_GRP_GLOBAL_URI ""
	set SSO_PROD_GRP_User_Agent [HTTP::header User-Agent]
	set SSO_PROD_GRP_Referer [HTTP::header "Referer"]
	#set SSO_PROD_GRP_SmartPhone 0

	switch [string tolower [HTTP::host]] { 
        "grp.dubai.gov.ae" 
	    {
			if {[class match [IP::client_addr] equals $static::SSO_PROD_GRP_SSO_Enable] or [IP::client_addr] equals "213.42.52.42"} {	
				if { ([HTTP::uri] starts_with "/OA_HTML/RF.jsp?function_id=28599") and not ($SSO_PROD_GRP_Referer contains "https://isupplier.dubai.gov.ae") } {
					set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
					HTTP::redirect "https://idm.dubai.gov.ae/itim/self/PasswordChange.do"
				}			
			}

			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "GRPPROD_APP"] or [HTTP::cookie exists "GRPPROD_REP"] or [HTTP::cookie exists "GRPPROD_DMZ"]} {
				set SSO_PROD_GRP_GLOBAL_SSODisable 1
			}
			if { ($SSO_PROD_GRP_User_Agent contains "Android") or ($SSO_PROD_GRP_User_Agent contains "iPad") or ($SSO_PROD_GRP_User_Agent contains "iOS") } {
				set SSO_PROD_GRP_GLOBAL_SSODisable 1
				#set SSO_PROD_GRP_SmartPhone 1
				#log local0. "Source IP: [IP::client_addr], Browser: $SSO_PROD_GRP_User_Agent"
			}
        }
		"www.grp.dubai.gov.ae"
	    {
			set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
			HTTP::redirect "https://grp.dubai.gov.ae[HTTP::uri]"
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }

		"www.ejob.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
			HTTP::redirect "https://ejob.dubai.gov.ae[HTTP::uri]"
        }
		"ejob.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"

			set SSO_PROD_GRP_URI_GLOBAL_UC [string toupper [HTTP::uri]]
	    	if {[class match $SSO_PROD_GRP_URI_GLOBAL_UC starts_with $static::SSO_PROD_GRP_eJob_for_Dept]} {
	        	set eJob_GRPPage_DeptList [class names $static::SSO_PROD_GRP_eJob_for_Dept]
	            #log local0. "$eJob_GRPPage_DeptList"	
		        foreach eJob_GRPPage_Dept_Select $eJob_GRPPage_DeptList
		        {
		        #log local0. "$eJob_GRPPage_Dept_Select"
		    	set eJob_GRPPage_AR_Dept_Select "${eJob_GRPPage_Dept_Select}_AR"
		    	#log local0. "$eJob_GRPPage_AR_Dept_Select"
		        	if {$SSO_PROD_GRP_URI_GLOBAL_UC equals $eJob_GRPPage_Dept_Select} {
				    	HTTP::uri "/OA_HTML/${eJob_GRPPage_Dept_Select}IrcVisitor.jsp"
				    	break
				    } elseif {$SSO_PROD_GRP_URI_GLOBAL_UC equals $eJob_GRPPage_AR_Dept_Select} {
				     	HTTP::uri "/OA_HTML/${eJob_GRPPage_Dept_Select}IrcVisitor.jsp?L=AR"
				    	break
				    } 
		        }
		    }
        }
		"isupplier.dubai.gov.ae" - "www.isupplier.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ejob.ae" - "www.ejob.ae" - "ejob.dubai.ae" - "www.ejob.dubai.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "https://ejob.dubai.gov.ae/OA_HTML/IrcVisitor.jsp?L=AR"
			HTTP::redirect "https://ejob.dubai.gov.ae[HTTP::uri]"
        }
		"isupplier.ae" - "www.isupplier.ae" - "isupplier.gov.ae" - "www.isupplier.gov.ae" - "isupplier.dubai.ae" - "www.isupplier.dubai.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
		    HTTP::redirect "https://isupplier.dubai.gov.ae" 
        }
    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }
#
	if {$SSO_PROD_GRP_GLOBAL_SSODisable == 0} {
		if {not [class match [IP::client_addr] equals $static::SSO_PROD_GRP_SSO_Enable]} {
			set SSO_PROD_GRP_GLOBAL_SSODisable 1
		} else {
			if {([HTTP::host] equals "grp.dubai.gov.ae") and ([HTTP::uri] equals "/" or [HTTP::uri] equals "/OA_HTML/AppsLocalLogin.jsp")} {
				#log local0. "Client [IP::client_addr] SSODisable $SSO_PROD_GRP_GLOBAL_SSODisable should be redirected"
				set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
				HTTP::redirect "https://grp.dubai.gov.ae/OA_HTML/LoginSSO.jsp"
			}
		}
	}

	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "GRPPROD_APP"] or [HTTP::cookie exists "GRPPROD_REP"] or [HTTP::cookie exists "GRPPROD_DMZ"]) } {
		if { ($SSO_PROD_GRP_GLOBAL_SSODisable == 1) } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "GRPssoPROD_DMZ"] or [HTTP::cookie exists "GRPssoPROD_APP"] or [HTTP::cookie exists "GRPssoPROD_REP"] } {
				set SSO_PROD_GRP_GLOBAL_SSODisable 0	
			}
		}
	}

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_GRP_Pool_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_GRP_flag_maintenance_grpDMZ 0
	set static::SSO_PROD_GRP_flag_maintenance_grpAPP 0
}

when HTTP_REQUEST
{
	set SSO_PROD_GRP_flag_goToMaintenance 0

	#log local0. " SSO_PROD_GRP_GLOBAL_poolName is $SSO_PROD_GRP_GLOBAL_poolName"
	switch $SSO_PROD_GRP_GLOBAL_poolName
	{
		"MS_GRP_PRD_DMZ_Pool" - "SSO_PROD_GRP_DMZ_Pool"
		{
			if {not ([class match [IP::client_addr] equals $static::SSO_PROD_GRP_ME ]) and $static::SSO_PROD_GRP_flag_maintenance_grpDMZ == 1}
			{
				set SSO_PROD_GRP_flag_goToMaintenance 1
			}
		}
		"MS_GRP_PRD_APP_Pool" - "SSO_PROD_GRP_APP_Pool"
		{
			if {not ([class match [IP::client_addr] equals $static::SSO_PROD_GRP_ME ]) and $static::SSO_PROD_GRP_flag_maintenance_grpAPP == 1}
			{
				set SSO_PROD_GRP_flag_goToMaintenance 1
			}
		}
	}

	#log local0. " SSO_PROD_GRP_flag_goToMaintenance is $SSO_PROD_GRP_flag_goToMaintenance"

	if {$SSO_PROD_GRP_flag_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" }
	{
		set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
		#HTTP::redirect "http://www.dsg.gov.ae/sites/maintenance/maintenance.aspx"

		if {[HTTP::uri] ends_with "favicon.ico"} {
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
        }
		elseif { [HTTP::uri] ends_with "SystemMaintenance.jpg"} {
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		}
		else {
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"		HTTP::uri "/sites/maintenance/maintenance.aspx"
		}


		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	} 


}
}
ltm rule /Common/SSO_PROD_GRP_Pool_Select {
    when RULE_INIT
{
	#set static::SSO_PROD_GRP_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DsG Support Team.</p></body></html>"
}

when HTTP_REQUEST {
#and (not([IP::client_addr] equals "213.42.54.56"))
 if { $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_GRP_GLOBAL_SSODisable == 1 } {

	set SSO_PROD_GRP_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"grp.dubai.gov.ae" 
	{
    	if { not [class match [IP::client_addr] equals $static::SSO_PROD_GRP_GIN_Src]  or [class match [IP::client_addr] equals $static::SSO_PROD_GRP_DMZ_Src] } {
			if { [HTTP::uri] equals "/OA_HTML/LoginSSO.jsp" } {
				set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
				drop
			} else {
				set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_DMZ_Pool
				pool $SSO_PROD_GRP_GLOBAL_poolName
				persist cookie insert GRPPROD_DMZ 0	
				set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grpdmz"
			}
		} else {
			switch -glob  $SSO_PROD_GRP_GLOBAL_URI
			{
				"/forms/frmservlet?appletmode*"
				{
					set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_APP_Pool
					pool $SSO_PROD_GRP_GLOBAL_poolName
					persist cookie insert GRPPROD_APP 0
					set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grpapp"
				}
				"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
				{
					# These URIs are exempted from Rewrite iRule
					set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
					set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_APP_Pool
					pool $SSO_PROD_GRP_GLOBAL_poolName
					persist cookie insert GRPPROD_APP 0
					set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grpapp"
				}
				"/discoverer/*" - "//discoverer/*"
				{
					set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_REP_Pool
					pool $SSO_PROD_GRP_GLOBAL_poolName
					persist cookie insert GRPPROD_REP 0
					set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grprep"
				}
				"/endeca*" - "/endeca/*"
				{
					set SSO_PROD_GRP_GLOBAL_poolName "Endeca-PROD-Pool"
					pool $SSO_PROD_GRP_GLOBAL_poolName
					persist cookie insert GRPPROD_Endeca 0
					set SSO_PROD_GRP_GLOBAL_Rewrite_Class "endeca"
				}
				"/OA_HTML/LoginSSO.jsp"
				{
					set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
					drop
				}
				default
				{
					set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_APP_Pool
					pool $SSO_PROD_GRP_GLOBAL_poolName
					persist cookie insert GRPPROD_APP 0
					set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grpapp"
				}
			}
		}	
	}
	"ejob.dubai.gov.ae"
	{
		set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_DMZ_Pool
		pool $SSO_PROD_GRP_GLOBAL_poolName
		persist cookie insert GRPPROD_DMZ_eJob 0
		set SSO_PROD_GRP_GLOBAL_Rewrite_Class "eJob"
	}
	"isupplier.dubai.gov.ae"
	{
		set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_DMZ_Pool
		pool $SSO_PROD_GRP_GLOBAL_poolName
		persist cookie insert GRPPROD_DMZ_iSup 0
		set SSO_PROD_GRP_GLOBAL_Rewrite_Class "iSup"
	}
	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE
{
    if { $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_GRP_GLOBAL_SSODisable == 1} {
		set SSO_PROD_GRP_myCookies [HTTP::cookie names]
		foreach SSO_PROD_GRP_myCookieVal $SSO_PROD_GRP_myCookies {
			HTTP::cookie secure $SSO_PROD_GRP_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_GRP_Pool_Select_sso {
    when RULE_INIT
{
	#set static::SSO_PROD_GRP_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team.</p></body></html>"
	set static::SSO_PROD_GRP_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
}

when HTTP_REQUEST {
#or ([IP::client_addr] equals "213.42.54.56")
 if { ($SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_GRP_GLOBAL_SSODisable == 0)} {

	set SSO_PROD_GRP_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"grp.dubai.gov.ae" 
	{
    	if { not [class match [IP::client_addr] equals $static::SSO_PROD_GRP_GIN_Src]  or [class match [IP::client_addr] equals $static::SSO_PROD_GRP_DMZ_Src] } {
			if { ($static::SSO_PROD_GRP_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
				set SSO_PROD_GRP_GLOBAL_poolName "SSO_PROD_GRP_DMZ"
			} else {
				set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_SSODMZ_Pool
			}
				pool $SSO_PROD_GRP_GLOBAL_poolName
				persist cookie insert GRPssoPROD_DMZ 0	
				set SSO_PROD_GRP_GLOBAL_Rewrite_Class "ssodmz"
	        } else {
				switch -glob  $SSO_PROD_GRP_GLOBAL_URI
				{
					"/forms/frmservlet?appletmode*"
					{
						set SSO_PROD_GRP_GLOBAL_poolName "SSO_PROD_GRP_APP"
						pool $SSO_PROD_GRP_GLOBAL_poolName
	        	        persist cookie insert GRPssoPROD_APP 0
						set SSO_PROD_GRP_GLOBAL_Rewrite_Class "ssoapp"
					}
					"/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*"
					{
						# These URIs are exempted from Rewrite iRule
						set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
						if { ($static::SSO_PROD_GRP_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_GRP_GLOBAL_poolName "SSO_PROD_GRP_APP"
						} else {
							set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_SSOAPP_Pool
						}        	        
	                    pool $SSO_PROD_GRP_GLOBAL_poolName
	        	        persist cookie insert GRPssoPROD_APP 0
						set SSO_PROD_GRP_GLOBAL_Rewrite_Class "ssoapp"
					}
					"/discoverer/*" - "//discoverer/*"
					{
						if { ($static::SSO_PROD_GRP_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_GRP_GLOBAL_poolName "SSO_PROD_GRP_REP"
						} else {
							set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_SSOREP_Pool
						}					
	                    pool $SSO_PROD_GRP_GLOBAL_poolName
	        	        persist cookie insert GRPssoPROD_REP 0
						set SSO_PROD_GRP_GLOBAL_Rewrite_Class "ssorep"
					}
					"/OA_HTML/glwandproc*"
					{
						set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_APP_Pool
	                    pool $SSO_PROD_GRP_GLOBAL_poolName
						# This URI does not need Rewrite & doesn't require persistence cookie, just set the cookie name to avoid default cookie name
						persist cookie insert GRP_GLWAND_PROD_APP 0
						set SSO_PROD_GRP_GLOBAL_BREAK_ALL 1
						set SSO_PROD_GRP_GLOBAL_Rewrite_Class "grpapp"
					}
					default
					{
						if { ($static::SSO_PROD_GRP_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_GRP_GLOBAL_poolName "SSO_PROD_GRP_APP"
						} else {
							set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_SSOAPP_Pool
						}
	                    pool $SSO_PROD_GRP_GLOBAL_poolName
	        	        persist cookie insert GRPssoPROD_APP 0
						set SSO_PROD_GRP_GLOBAL_Rewrite_Class "ssoapp"
					}
				}
		    }	
	}

	"ejob.dubai.gov.ae"
	{
		set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_DMZ_Pool
		pool $SSO_PROD_GRP_GLOBAL_poolName
		persist cookie insert GRPPROD_DMZ_eJob 0
		set SSO_PROD_GRP_GLOBAL_Rewrite_Class "eJob"
	}
	"isupplier.dubai.gov.ae"
	{
		set SSO_PROD_GRP_GLOBAL_poolName $static::SSO_PROD_GRP_DMZ_Pool
		pool $SSO_PROD_GRP_GLOBAL_poolName
		persist cookie insert GRPPROD_DMZ_iSup 0
		set SSO_PROD_GRP_GLOBAL_Rewrite_Class "iSup"
	}
	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE
{
	if { $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_GRP_GLOBAL_SSODisable == 0} {
		set SSO_PROD_GRP_myCookies [HTTP::cookie names]
		foreach SSO_PROD_GRP_myCookieVal $SSO_PROD_GRP_myCookies {
			HTTP::cookie secure $SSO_PROD_GRP_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_discov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_discov_request_uri
	{
		"^//discoverer/====/discoverer/"
	}
	set static::SSO_PROD_GRP_discov_request_host
	{
	} 
	set static::SSO_PROD_GRP_discov_request_referer
	{
	}
	set static::SSO_PROD_GRP_discov_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_discov_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_discov_response_location
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_discov_response_contentLocation
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_discov_response_body
	{
		"http://grp.dubai.gov.ae:65000====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grprep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_discov_request_uri] > 0}
	{
	set SSO_PROD_GRP_discov_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_request_uri
	{
		set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_discov_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_discov_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_discov_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_discov_request_val [HTTP::host]
		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_request_host
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_discov_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_discov_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_discov_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_request_referer
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_discov_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_discov_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_request_cookie
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grprep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_discov_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_discov_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_val_list
		{
			foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_response_setCookie
			{
				set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_discov_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_discov_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_discov_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_discov_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_response_location
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_discov_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_discov_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_response_contentLocation
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_discov_request_find $SSO_PROD_GRP_discov_request_val $SSO_PROD_GRP_discov_request_replace SSO_PROD_GRP_discov_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_discov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_discov_response_body] > 0}
	{
		set SSO_PROD_GRP_discov_expression ""
		foreach SSO_PROD_GRP_discov_request_rewriteRecord $static::SSO_PROD_GRP_discov_response_body
		{
			set SSO_PROD_GRP_discov_request_find [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_discov_request_replace [getfield $SSO_PROD_GRP_discov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_discov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_discov_request_replace ""
			}

			set SSO_PROD_GRP_discov_expression "$SSO_PROD_GRP_discov_expression@$SSO_PROD_GRP_discov_request_find@$SSO_PROD_GRP_discov_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_discov_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grprep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_discov_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_discov_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_eJob {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_eJob_request_uri
	{
		"^/\$====/OA_HTML/IrcVisitor.jsp?L=AR"
	}
	set static::SSO_PROD_GRP_eJob_request_host
	{
	} 
	set static::SSO_PROD_GRP_eJob_request_referer
	{
	}
	set static::SSO_PROD_GRP_eJob_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_eJob_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_eJob_response_location
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"http://ejob.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_eJob_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"http://ejob.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_eJob_response_body
	{
		"http://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://ejob.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "eJob" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_eJob_request_uri] > 0}
	{
	set SSO_PROD_GRP_eJob_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_request_uri
	{
		set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_eJob_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_eJob_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_eJob_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_eJob_request_val [HTTP::host]
		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_request_host
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_eJob_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_eJob_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_eJob_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_request_referer
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_eJob_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_eJob_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_request_cookie
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "eJob" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_eJob_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_eJob_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_val_list
		{
			foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_response_setCookie
			{
				set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_eJob_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_eJob_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_eJob_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_eJob_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_response_location
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_eJob_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_eJob_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_response_contentLocation
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_eJob_request_find $SSO_PROD_GRP_eJob_request_val $SSO_PROD_GRP_eJob_request_replace SSO_PROD_GRP_eJob_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_eJob_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_eJob_response_body] > 0}
	{
		set SSO_PROD_GRP_eJob_expression ""
		foreach SSO_PROD_GRP_eJob_request_rewriteRecord $static::SSO_PROD_GRP_eJob_response_body
		{
			set SSO_PROD_GRP_eJob_request_find [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_eJob_request_replace [getfield $SSO_PROD_GRP_eJob_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_eJob_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_eJob_request_replace ""
			}

			set SSO_PROD_GRP_eJob_expression "$SSO_PROD_GRP_eJob_expression@$SSO_PROD_GRP_eJob_request_find@$SSO_PROD_GRP_eJob_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_eJob_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "eJob" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0}
	{

		#set SSO_PROD_GRP_eJob_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_eJob_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_endeca {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_endeca_request_uri
	{
	}
	set static::SSO_PROD_GRP_endeca_request_host
	{
	} 
	set static::SSO_PROD_GRP_endeca_request_referer
	{
	}
	set static::SSO_PROD_GRP_endeca_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_endeca_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_endeca_response_location
	{
		"https://10.50.2.33:7004====https://grp.dubai.gov.ae"
		"https://10.50.2.34:7004====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_endeca_response_contentLocation
	{
		"https://10.50.2.33:7004====https://grp.dubai.gov.ae"
		"https://10.50.2.34:7004====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_endeca_response_body
	{
		"https://10.50.2.33:7004====https://grp.dubai.gov.ae"
		"https://10.50.2.34:7004====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "endeca" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_endeca_request_uri] > 0}
	{
	set SSO_PROD_GRP_endeca_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_request_uri
	{
		set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_endeca_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_endeca_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_endeca_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_endeca_request_val [HTTP::host]
		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_request_host
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_endeca_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_endeca_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_endeca_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_request_referer
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_endeca_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_endeca_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_endeca_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_request_cookie
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_endeca_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "endeca" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_endeca_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_endeca_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_val_list
		{
			foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_response_setCookie
			{
				set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_endeca_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_endeca_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_endeca_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_endeca_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_response_location
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_endeca_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_endeca_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_endeca_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_response_contentLocation
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_endeca_request_find $SSO_PROD_GRP_endeca_request_val $SSO_PROD_GRP_endeca_request_replace SSO_PROD_GRP_endeca_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_endeca_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_endeca_response_body] > 0}
	{
		set SSO_PROD_GRP_endeca_expression ""
		foreach SSO_PROD_GRP_endeca_request_rewriteRecord $static::SSO_PROD_GRP_endeca_response_body
		{
			set SSO_PROD_GRP_endeca_request_find [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_endeca_request_replace [getfield $SSO_PROD_GRP_endeca_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_endeca_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_endeca_request_replace ""
			}

			set SSO_PROD_GRP_endeca_expression "$SSO_PROD_GRP_endeca_expression@$SSO_PROD_GRP_endeca_request_find@$SSO_PROD_GRP_endeca_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_endeca_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "endeca" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_endeca_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_endeca_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_grp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_grp_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"^/SSO_BYPASS\$====/OA_HTML/AppsLogin"
		"^/SSO_ENABLE\$====/OA_HTML/AppsLogin"
		#"^/sso_bypass\$====/OA_HTML/AppsLogin"
		#"https%3A%2F%2Fgrp.dubai.gov.ae====http://grp.dubai.gov.ae"
		"https://grp.dubai.gov.ae====http://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_grp_request_host
	{
	} 
	set static::SSO_PROD_GRP_grp_request_referer
	{
	}
	set static::SSO_PROD_GRP_grp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_grp_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_grp_response_location
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		#"http%3A%2F%2Fgrp.dubai.gov.ae====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:443====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:8085====https://grp.dubai.gov.ae"
		#"https://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_grp_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		#"http%3A%2F%2Fgrp.dubai.gov.ae====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:443====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:8085====https://grp.dubai.gov.ae"
		#"https://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_grp_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		#"http%3A%2F%2Fgrp.dubai.gov.ae====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:443====https://grp.dubai.gov.ae"
		#"http://grp.dubai.gov.ae:8085====https://grp.dubai.gov.ae"
		#"https://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_grp_request_uri] > 0}
	{
	set SSO_PROD_GRP_grp_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_request_uri
	{
		set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_grp_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_grp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_grp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_grp_request_val [HTTP::host]
		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_request_host
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_grp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_grp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_grp_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_request_referer
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_grp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_grp_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_request_cookie
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_grp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_grp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_val_list
		{
			foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_response_setCookie
			{
				set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_grp_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_grp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_grp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_grp_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_response_location
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_grp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_grp_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_response_contentLocation
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_grp_request_find $SSO_PROD_GRP_grp_request_val $SSO_PROD_GRP_grp_request_replace SSO_PROD_GRP_grp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_grp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_grp_response_body] > 0}
	{
		set SSO_PROD_GRP_grp_expression ""
		foreach SSO_PROD_GRP_grp_request_rewriteRecord $static::SSO_PROD_GRP_grp_response_body
		{
			set SSO_PROD_GRP_grp_request_find [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_grp_request_replace [getfield $SSO_PROD_GRP_grp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_grp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_grp_request_replace ""
			}

			set SSO_PROD_GRP_grp_expression "$SSO_PROD_GRP_grp_expression@$SSO_PROD_GRP_grp_request_find@$SSO_PROD_GRP_grp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_grp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_grp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_grp_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_grpdmz {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_dmz_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::SSO_PROD_GRP_dmz_request_host
	{
	} 
	set static::SSO_PROD_GRP_dmz_request_referer
	{
	}
	set static::SSO_PROD_GRP_dmz_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_dmz_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_dmz_response_location
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_dmz_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_dmz_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpdmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_dmz_request_uri] > 0}
	{
	set SSO_PROD_GRP_dmz_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_request_uri
	{
		set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_dmz_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_dmz_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_dmz_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_dmz_request_val [HTTP::host]
		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_request_host
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_dmz_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_dmz_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_dmz_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_request_referer
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_dmz_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_dmz_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_request_cookie
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpdmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_dmz_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_dmz_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_val_list
		{
			foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_response_setCookie
			{
				set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_dmz_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_dmz_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_dmz_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_dmz_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_response_location
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_dmz_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_dmz_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_response_contentLocation
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_dmz_request_find $SSO_PROD_GRP_dmz_request_val $SSO_PROD_GRP_dmz_request_replace SSO_PROD_GRP_dmz_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_dmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_dmz_response_body] > 0}
	{
		set SSO_PROD_GRP_dmz_expression ""
		foreach SSO_PROD_GRP_dmz_request_rewriteRecord $static::SSO_PROD_GRP_dmz_response_body
		{
			set SSO_PROD_GRP_dmz_request_find [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_dmz_request_replace [getfield $SSO_PROD_GRP_dmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_dmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_dmz_request_replace ""
			}

			set SSO_PROD_GRP_dmz_expression "$SSO_PROD_GRP_dmz_expression@$SSO_PROD_GRP_dmz_request_find@$SSO_PROD_GRP_dmz_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_dmz_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "grpdmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_dmz_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_dmz_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_iSup {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_iSup_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
	}
	set static::SSO_PROD_GRP_iSup_request_host
	{
	} 
	set static::SSO_PROD_GRP_iSup_request_referer
	{
	}
	set static::SSO_PROD_GRP_iSup_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_iSup_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_iSup_response_location
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"http://isupplier.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_iSup_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"http://isupplier.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_iSup_response_body
	{
		"http://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
		"https://grp.dubai.gov.ae====https://isupplier.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "iSup" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_iSup_request_uri] > 0}
	{
	set SSO_PROD_GRP_iSup_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_request_uri
	{
		set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_iSup_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_iSup_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_iSup_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_iSup_request_val [HTTP::host]
		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_request_host
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_iSup_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_iSup_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_iSup_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_request_referer
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_iSup_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_iSup_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_request_cookie
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "iSup" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_iSup_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_iSup_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_val_list
		{
			foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_response_setCookie
			{
				set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_iSup_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_iSup_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_iSup_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_iSup_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_response_location
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_iSup_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_iSup_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_response_contentLocation
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_iSup_request_find $SSO_PROD_GRP_iSup_request_val $SSO_PROD_GRP_iSup_request_replace SSO_PROD_GRP_iSup_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_iSup_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_iSup_response_body] > 0}
	{
		set SSO_PROD_GRP_iSup_expression ""
		foreach SSO_PROD_GRP_iSup_request_rewriteRecord $static::SSO_PROD_GRP_iSup_response_body
		{
			set SSO_PROD_GRP_iSup_request_find [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_iSup_request_replace [getfield $SSO_PROD_GRP_iSup_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_iSup_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_iSup_request_replace ""
			}

			set SSO_PROD_GRP_iSup_expression "$SSO_PROD_GRP_iSup_expression@$SSO_PROD_GRP_iSup_request_find@$SSO_PROD_GRP_iSup_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_iSup_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "iSup" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0}
	{

		#set SSO_PROD_GRP_iSup_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_iSup_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_ssoDiscov {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssodiscov_request_uri
	{
		"^//discoverer/====/discoverer/"
		"^/SSO_ENABLE\$====/"
	}
	set static::SSO_PROD_GRP_ssodiscov_request_host
	{
		"grp.dubai.gov.ae====grp.dubai.gov.ae:8090"
	} 
	set static::SSO_PROD_GRP_ssodiscov_request_referer
	{
	}
	set static::SSO_PROD_GRP_ssodiscov_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssodiscov_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_ssodiscov_response_location
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssodiscov_response_contentLocation
	{
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssodiscov_response_body
	{
		"http://grp.dubai.gov.ae:65000====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8090====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:8888====https://grp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssorep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_request_uri] > 0}
	{
	set SSO_PROD_GRP_ssodiscov_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_request_uri
	{
		set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_ssodiscov_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_ssodiscov_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val [HTTP::host]
		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_request_host
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_ssodiscov_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_request_referer
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_ssodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_request_cookie
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_ssodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssorep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_val_list
		{
			foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_response_setCookie
			{
				set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_ssodiscov_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_ssodiscov_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_response_location
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_ssodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodiscov_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_ssodiscov_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_response_contentLocation
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodiscov_request_find $SSO_PROD_GRP_ssodiscov_request_val $SSO_PROD_GRP_ssodiscov_request_replace SSO_PROD_GRP_ssodiscov_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_ssodiscov_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_ssodiscov_response_body] > 0}
	{
		set SSO_PROD_GRP_ssodiscov_expression ""
		foreach SSO_PROD_GRP_ssodiscov_request_rewriteRecord $static::SSO_PROD_GRP_ssodiscov_response_body
		{
			set SSO_PROD_GRP_ssodiscov_request_find [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodiscov_request_replace [getfield $SSO_PROD_GRP_ssodiscov_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodiscov_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodiscov_request_replace ""
			}

			set SSO_PROD_GRP_ssodiscov_expression "$SSO_PROD_GRP_ssodiscov_expression@$SSO_PROD_GRP_ssodiscov_request_find@$SSO_PROD_GRP_ssodiscov_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_ssodiscov_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssorep" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_ssodiscov_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_ssodiscov_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_ssogrp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssogrp_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		#"https%3A%2F%2Fgrp.dubai.gov.ae====http://grp.dubai.gov.ae"
		"^/SSO_ENABLE\$====/OA_HTML/AppsLogin"
		"https://grp.dubai.gov.ae====http://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssogrp_request_host
	{
	} 
	set static::SSO_PROD_GRP_ssogrp_request_referer
	{
	}
	set static::SSO_PROD_GRP_ssogrp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssogrp_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_ssogrp_response_location
	{
		"https://grp.dubai.gov.ae:65000====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssogrp_response_contentLocation
	{
		"https://grp.dubai.gov.ae:65000====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssogrp_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://grp.dubai.gov.ae:80====https://grp.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssoapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_request_uri] > 0}
	{
	set SSO_PROD_GRP_ssogrp_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_request_uri
	{
		set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_ssogrp_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_ssogrp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_ssogrp_request_val [HTTP::host]
		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_request_host
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_ssogrp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_ssogrp_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_request_referer
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_ssogrp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_ssogrp_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_request_cookie
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_ssogrp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssoapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_ssogrp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_val_list
		{
			foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_response_setCookie
			{
				set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_ssogrp_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_ssogrp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_ssogrp_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_response_location
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_ssogrp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssogrp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_ssogrp_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_response_contentLocation
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssogrp_request_find $SSO_PROD_GRP_ssogrp_request_val $SSO_PROD_GRP_ssogrp_request_replace SSO_PROD_GRP_ssogrp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_ssogrp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_ssogrp_response_body] > 0}
	{
		set SSO_PROD_GRP_ssogrp_expression ""
		foreach SSO_PROD_GRP_ssogrp_request_rewriteRecord $static::SSO_PROD_GRP_ssogrp_response_body
		{
			set SSO_PROD_GRP_ssogrp_request_find [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssogrp_request_replace [getfield $SSO_PROD_GRP_ssogrp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssogrp_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssogrp_request_replace ""
			}

			set SSO_PROD_GRP_ssogrp_expression "$SSO_PROD_GRP_ssogrp_expression@$SSO_PROD_GRP_ssogrp_request_find@$SSO_PROD_GRP_ssogrp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_ssogrp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssoapp" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_ssogrp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_ssogrp_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GRP_Rewrite_ssogrpDmz {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssodmz_request_uri
	{
		"^/\$====/OA_HTML/AppsLogin"
		"^/SSO_ENABLE\$====/OA_HTML/AppsLogin"
	}
	set static::SSO_PROD_GRP_ssodmz_request_host
	{
	} 
	set static::SSO_PROD_GRP_ssodmz_request_referer
	{
	}
	set static::SSO_PROD_GRP_ssodmz_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GRP_ssodmz_response_setCookie
	{
	}
	set static::SSO_PROD_GRP_ssodmz_response_location
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssodmz_response_contentLocation
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
	}
	set static::SSO_PROD_GRP_ssodmz_response_body
	{
		"http://grp.dubai.gov.ae====https://grp.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssodmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_request_uri] > 0}
	{
	set SSO_PROD_GRP_ssodmz_request_val [HTTP::uri]
	foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_request_uri
	{
		set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
		set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
		{
			set SSO_PROD_GRP_ssodmz_request_replace ""
		}

		regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GRP_ssodmz_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GRP_ssodmz_request_val [HTTP::host]
		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_request_host
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}
			regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GRP_ssodmz_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GRP_ssodmz_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_request_referer
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GRP_ssodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GRP_ssodmz_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_request_cookie
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GRP_ssodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssodmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GRP_ssodmz_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_val_list
		{
			foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_response_setCookie
			{
				set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
				set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
				{
					set SSO_PROD_GRP_ssodmz_request_replace ""
				}
				regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GRP_ssodmz_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GRP_ssodmz_request_val [HTTP::header value Location]

		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_response_location
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GRP_ssodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GRP_ssodmz_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GRP_ssodmz_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_response_contentLocation
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}

			regsub -all $SSO_PROD_GRP_ssodmz_request_find $SSO_PROD_GRP_ssodmz_request_val $SSO_PROD_GRP_ssodmz_request_replace SSO_PROD_GRP_ssodmz_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GRP_ssodmz_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GRP_ssodmz_response_body] > 0}
	{
		set SSO_PROD_GRP_ssodmz_expression ""
		foreach SSO_PROD_GRP_ssodmz_request_rewriteRecord $static::SSO_PROD_GRP_ssodmz_response_body
		{
			set SSO_PROD_GRP_ssodmz_request_find [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 1]
			set SSO_PROD_GRP_ssodmz_request_replace [getfield $SSO_PROD_GRP_ssodmz_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GRP_ssodmz_request_replace == "nothing"}
			{
				set SSO_PROD_GRP_ssodmz_request_replace ""
			}

			set SSO_PROD_GRP_ssodmz_expression "$SSO_PROD_GRP_ssodmz_expression@$SSO_PROD_GRP_ssodmz_request_find@$SSO_PROD_GRP_ssodmz_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GRP_ssodmz_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GRP_GLOBAL_Rewrite_Class == "ssodmz" and $SSO_PROD_GRP_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GRP_ssodmz_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GRP_ssodmz_theMatch"
		#log local0. "on URI: $SSO_PROD_GRP_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GessSync_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	#set SSO_PROD_wMail_80_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] { 
        "gess2admin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://gess2admin.dubai.gov.ae/gess2"
		    }
        }

		"syncadmin.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://syncadmin.dubai.gov.ae/syncadmin"
		    }
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/SSO_PROD_GessSync_Base {
    when RULE_INIT
{
	#set static::SSO_PROD_GessSync_GLOBAL_Maint_BypassIPs "ePayPROD_Maint_Bypass"
}

when HTTP_REQUEST
{
	set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 0
	set SSO_PROD_GessSync_GLOBAL_SSODisable 1
	set SSO_PROD_GessSync_GLOBAL_poolName ""
	set SSO_PROD_GessSync_GLOBAL_Rewrite_Class ""
	set SSO_PROD_GessSync_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "gess2admin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://gess2admin.dubai.gov.ae/gess2"
				set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
		    }

			#set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "https://eservices.dubai.ae/gess2"
	    }

		"syncadmin.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://syncadmin.dubai.gov.ae/syncadmin"
				set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
		    }

			#set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
			#HTTP::redirect "https://eservices.dubai.ae/syncadmin"
        }
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }	
}
}
ltm rule /Common/SSO_PROD_GessSync_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_GessSync_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::SSO_PROD_GessSync_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team.</p></body></html>"
}

when HTTP_REQUEST
{
	if { $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0 } {

		#set SSO_PROD_GessSync_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

			"gess2admin.dubai.gov.ae"
			{
				if { ($static::SSO_PROD_GessSync_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_GessSync_GLOBAL_poolName "SSO_PROD_Sync_Gess"
				} else {
					set SSO_PROD_GessSync_GLOBAL_poolName "SSO_PROD_Gess_Sync"
				}

				set SSO_PROD_GessSync_GLOBAL_Rewrite_Class "SSO_PROD_GessAdmin"
				pool $SSO_PROD_GessSync_GLOBAL_poolName
				persist cookie insert SSO_PROD_GessAdmin 0
			}

			"syncadmin.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_GessSync_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_GessSync_GLOBAL_poolName "SSO_PROD_Sync_Gess"
				} else {
					set SSO_PROD_GessSync_GLOBAL_poolName "SSO_PROD_Gess_Sync"
				}

				set SSO_PROD_GessSync_GLOBAL_Rewrite_Class "SSO_PROD_SyncAdmin"
				pool $SSO_PROD_GessSync_GLOBAL_poolName
				persist cookie insert SSO_PROD_SyncAdmin 0
			}

			default
			{
				# No default Pool
				#set SSO_PROD_GessSync_GLOBAL_BREAK_ALL 1
				#HTTP::uri "<html><head></head><body><p>Access Denied...!!! For assistance contact DSG Support Team.</p></body></html>"
			}
		} 	
	}
}

when HTTP_RESPONSE
{
	if { $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0 } {
		set SSO_PROD_GessSync_myCookies [HTTP::cookie names]
		foreach SSO_PROD_GessSync_myCookieVal $SSO_PROD_GessSync_myCookies {
			HTTP::cookie secure $SSO_PROD_GessSync_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_GessSync_Rewrite_gess {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GessSync_gess_request_uri
	{
	}
	set static::SSO_PROD_GessSync_gess_request_host
	{
	} 
	set static::SSO_PROD_GessSync_gess_request_referer
	{
	}
	set static::SSO_PROD_GessSync_gess_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GessSync_gess_response_setCookie
	{
	}
	set static::SSO_PROD_GessSync_gess_response_location
	{
		"http://gess2admin.dubai.gov.ae====https://gess2admin.dubai.gov.ae"
	}
	set static::SSO_PROD_GessSync_gess_response_contentLocation
	{
		"http://gess2admin.dubai.gov.ae====https://gess2admin.dubai.gov.ae"
	}
	set static::SSO_PROD_GessSync_gess_response_body
	{
		"http://gess2admin.dubai.gov.ae====https://gess2admin.dubai.gov.ae"
		"https://eservices.dubai.ae====https://gess2admin.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_GessAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_gess_request_uri] > 0}
	{
	set SSO_PROD_GessSync_gess_request_val [HTTP::uri]
	foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_request_uri
	{
		set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
		set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
		{
			set SSO_PROD_GessSync_gess_request_replace ""
		}

		regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GessSync_gess_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_gess_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GessSync_gess_request_val [HTTP::host]
		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_request_host
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}
			regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GessSync_gess_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_gess_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GessSync_gess_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_request_referer
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GessSync_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_gess_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GessSync_gess_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_request_cookie
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GessSync_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_GessAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_gess_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GessSync_gess_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_val_list
		{
			foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_response_setCookie
			{
				set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
				set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
				{
					set SSO_PROD_GessSync_gess_request_replace ""
				}
				regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GessSync_gess_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_gess_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GessSync_gess_request_val [HTTP::header value Location]

		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_response_location
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GessSync_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_gess_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GessSync_gess_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_response_contentLocation
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_gess_request_find $SSO_PROD_GessSync_gess_request_val $SSO_PROD_GessSync_gess_request_replace SSO_PROD_GessSync_gess_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GessSync_gess_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GessSync_gess_response_body] > 0}
	{
		set SSO_PROD_GessSync_gess_expression ""
		foreach SSO_PROD_GessSync_gess_request_rewriteRecord $static::SSO_PROD_GessSync_gess_response_body
		{
			set SSO_PROD_GessSync_gess_request_find [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_gess_request_replace [getfield $SSO_PROD_GessSync_gess_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_gess_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_gess_request_replace ""
			}

			set SSO_PROD_GessSync_gess_expression "$SSO_PROD_GessSync_gess_expression@$SSO_PROD_GessSync_gess_request_find@$SSO_PROD_GessSync_gess_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GessSync_gess_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_GessAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GessSync_gess_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GessSync_gess_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_GessSync_Rewrite_sync {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_GessSync_sync_request_uri
	{
	}
	set static::SSO_PROD_GessSync_sync_request_host
	{
	} 
	set static::SSO_PROD_GessSync_sync_request_referer
	{
	}
	set static::SSO_PROD_GessSync_sync_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_GessSync_sync_response_setCookie
	{
	}
	set static::SSO_PROD_GessSync_sync_response_location
	{
		"http://syncadmin.dubai.gov.ae====https://syncadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_GessSync_sync_response_contentLocation
	{
		"http://syncadmin.dubai.gov.ae====https://syncadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_GessSync_sync_response_body
	{
		"https://eservices.dubai.ae====https://gess2admin.dubai.gov.ae"
		"http://syncadmin.dubai.gov.ae====https://syncadmin.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_SyncAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_sync_request_uri] > 0}
	{
	set SSO_PROD_GessSync_sync_request_val [HTTP::uri]
	foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_request_uri
	{
		set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
		set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]
		if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
		{
			set SSO_PROD_GessSync_sync_request_replace ""
		}

		regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_GessSync_sync_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_sync_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_GessSync_sync_request_val [HTTP::host]
		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_request_host
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}
			regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_GessSync_sync_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_sync_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_GessSync_sync_request_val [HTTP::header value Referer]
		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_request_referer
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_GessSync_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_GessSync_sync_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_GessSync_sync_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_request_cookie
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]

			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_GessSync_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_SyncAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_sync_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_GessSync_sync_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_val_list
		{
			foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_response_setCookie
			{
				set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
				set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]

				if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
				{
					set SSO_PROD_GessSync_sync_request_replace ""
				}
				regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_GessSync_sync_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_sync_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_GessSync_sync_request_val [HTTP::header value Location]

		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_response_location
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_GessSync_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_GessSync_sync_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_GessSync_sync_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_response_contentLocation
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}

			regsub -all $SSO_PROD_GessSync_sync_request_find $SSO_PROD_GessSync_sync_request_val $SSO_PROD_GessSync_sync_request_replace SSO_PROD_GessSync_sync_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_GessSync_sync_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_GessSync_sync_response_body] > 0}
	{
		set SSO_PROD_GessSync_sync_expression ""
		foreach SSO_PROD_GessSync_sync_request_rewriteRecord $static::SSO_PROD_GessSync_sync_response_body
		{
			set SSO_PROD_GessSync_sync_request_find [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 1]
			set SSO_PROD_GessSync_sync_request_replace [getfield $SSO_PROD_GessSync_sync_request_rewriteRecord "====" 2]
			if {$SSO_PROD_GessSync_sync_request_replace == "nothing"}
			{
				set SSO_PROD_GessSync_sync_request_replace ""
			}

			set SSO_PROD_GessSync_sync_expression "$SSO_PROD_GessSync_sync_expression@$SSO_PROD_GessSync_sync_request_find@$SSO_PROD_GessSync_sync_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_GessSync_sync_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_GessSync_GLOBAL_Rewrite_Class == "SSO_PROD_SyncAdmin" and $SSO_PROD_GessSync_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_GessSync_sync_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_GessSync_sync_theMatch"
		#log local0. "on URI: $SSO_DEMO_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDESK_80_Base {
    when HTTP_REQUEST
{
	set SSO_PROD_SrvcDesk_GLOBAL_BREAK_ALL 0
	set SSO_PROD_SrvcDesk_GLOBAL_poolName ""
	set SSO_PROD_SrvcDesk_GLOBAL_Rewrite_Class ""

	switch [string tolower [HTTP::host]]
	{ 
        "servicedesk.dubai.gov.ae" - "www.servicedesk.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://servicedesk.dubai.gov.ae"
		    } elseif {([HTTP::uri] equals "/arsys/shared/login.jsp?/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser") } {
				HTTP::redirect "https://servicedesk.dubai.gov.ae"
			} elseif {([HTTP::uri] equals "/arsys/shared/login.jsp?/arsys/forms/sdhbwsapp1/SRS%3AServiceRequestConsole/DOF/?cacheid=482e855c&mode=CREATE") } {
				HTTP::redirect "https://servicedesk.dubai.gov.ae/arsys/shared/login.jsp?/arsys/forms/sdhbwsapp1/SRS%3AServiceRequestConsole/DOF/?cacheid=482e855c&mode=CREATE"
			}
        }

		"dsgservicedesk.dubai.gov.ae" - "www.dsgservicedesk.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://dsgservicedesk.dubai.gov.ae"
		    }
        }

		"degservicedesk.dubai.gov.ae" - "www.degservicedesk.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://dsgservicedesk.dubai.gov.ae"
		    } elseif { ([HTTP::uri] equals "/arsys/shared/login.jsp?/arsys") } {
				HTTP::redirect "https://dsgservicedesk.dubai.gov.ae"
			} elseif { ([HTTP::uri] equals "/arsys/shared/login.jsp?/arsys/") } {
				HTTP::redirect "https://dsgservicedesk.dubai.gov.ae"
			}
        }

		"servicedeskstg.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    #HTTP::redirect "https://dsgservicedeskqa.dubai.gov.ae/arsys/"
		    #}
			if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.48.180") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {
				set SSO_PROD_SrvcDesk_GLOBAL_poolName "SDESK_STG_Cloud"
				#persist cookie insert SrvcDESK_STG 0
				#set SSO_PROD_SrvcDesk_GLOBAL_Rewrite_Class "sdskvmstg"
				pool $SSO_PROD_SrvcDesk_GLOBAL_poolName
			} else {
				HTTP::respond 200 content $static::SSO_PROD_SDesk_Sorry
			}
        }

		"servicedeskqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_SrvcDesk_GLOBAL_poolName "SDESK_STG_Cloud"
			pool $SSO_PROD_SrvcDesk_GLOBAL_poolName

        }

		"dofsupport.dubai.gov.ae" 
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
				HTTP::redirect "https://dofsupport.dubai.gov.ae" 
			}
		}
		
		"slcsupport.dubai.gov.ae" - "helpdesk.slc.dubai.gov.ae" - "it.slc.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
				HTTP::redirect "https://slcsupport.dubai.gov.ae" 
			}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_SDesk_Base {
    when RULE_INIT
{
	set static::SSO_PROD_SDesk_SSO_Enable "ACL_SDESK_PROD_SSO_Enable"
}

when HTTP_REQUEST
{
	set SSO_PROD_SDesk_GLOBAL_BREAK_ALL 0
	set SSO_PROD_SDesk_GLOBAL_SSODisable 0
	set SSO_PROD_SDesk_GLOBAL_poolName ""
	set SSO_PROD_SDesk_GLOBAL_Rewrite_Class ""
	set SSO_PROD_SDesk_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "servicedesk.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "Remedy_PROD_SDesk"] or [HTTP::cookie exists "Remedy_PROD_DOF"] or [HTTP::cookie exists "Remedy_PROD_SLC"]} {
				set SSO_PROD_SDesk_GLOBAL_SSODisable 1
			}
        }

		"www.servicedesk.dubai.gov.ae" - "www.dsgservicedesk.dubai.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"
        }

		"dsgservicedesk.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "Remedy_PROD_dsgSDesk"] } {
				set SSO_PROD_SDesk_GLOBAL_SSODisable 1
			}
        }

		"dofsupport.dubai.gov.ae" 
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://servicedesk.dubai.gov.ae/arsys/forms/sdapp/SRS%3AServiceRequestConsole/DOF/" 
			}
		}
		
		"slcsupport.dubai.gov.ae" - "helpdesk.slc.dubai.gov.ae" - "it.slc.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://servicedesk.dubai.gov.ae/arsys/forms/sdapp/SRS%3AServiceRequestConsole/SLC/"				
			}
		}

		"degservicedesk.dubai.gov.ae" - "www.degservicedesk.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			HTTP::redirect "https://dsgservicedesk.dubai.gov.ae"
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_SDesk_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	if {$SSO_PROD_SDesk_GLOBAL_SSODisable == 0} {
		if {not [class match [IP::client_addr] equals $static::SSO_PROD_SDesk_SSO_Enable]} {
			set SSO_PROD_SDesk_GLOBAL_SSODisable 1
		}
	}

	# if "Go Direct" is not selected
	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "Remedy_PROD_SDesk"] or [HTTP::cookie exists "Remedy_PROD_dsgSDesk"] or [HTTP::cookie exists "Remedy_PROD_SDRep"]) } {
		if { $SSO_PROD_SDesk_GLOBAL_SSODisable == 1 } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "SSO_PROD_SDesk"] or [HTTP::cookie exists "SSO_PROD_dsgSDesk"] or [HTTP::cookie exists "SSO_PROD_SDRep"] } {
				set SSO_PROD_SDesk_GLOBAL_SSODisable 0
				#log local0. "SSO_PROD_wMail_GLOBAL_SSODisable: $SSO_PROD_wMail_GLOBAL_SSODisable"
			}
		}
	}

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_SDesk_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_PROD_SDesk_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_PROD_SDesk_host "" SSO_PROD_SDesk_host
		HTTP::respond 302 Location "https://$SSO_PROD_SDesk_host[HTTP::uri]"
		set SSO_PROD_SDesk_GLOBAL_BREAK_ALL 1
	}	
}
}
ltm rule /Common/SSO_PROD_SDesk_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_SDesk_Sorry "<html><head></head><body><p>Access Denied...!!!</p></body></html>"
}

when HTTP_REQUEST
{
	if { $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_SDesk_GLOBAL_SSODisable == 1} {

		set SSO_PROD_SDesk_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

		"servicedesk.dubai.gov.ae"
		{
			set SSO_PROD_SDesk_GLOBAL_poolName "SDESK_PROD_Cloud"

			if { $SSO_PROD_SDesk_GLOBAL_URI contains "/DOF/" or [HTTP::cookie exists "SSO_PROD_DOFSD"] or [HTTP::cookie exists "Remedy_PROD_DOF"]} {
				#log local0. "$SSO_PROD_SDesk_GLOBAL_URI"
				persist cookie insert Remedy_PROD_DOF 0
				set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "dofdesk"
			} elseif { $SSO_PROD_SDesk_GLOBAL_URI contains "/SLC/" or [HTTP::cookie exists "SSO_PROD_SLCSD"] or [HTTP::cookie exists "Remedy_PROD_SLC"]} {
				#log local0. "$SSO_PROD_SDesk_GLOBAL_URI"
				persist cookie insert Remedy_PROD_SLC 0
				set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "slcdesk"
			} else {
				persist cookie insert Remedy_PROD_SDesk 0
				set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "sdesk"
			}
			pool $SSO_PROD_SDesk_GLOBAL_poolName	
		}
		"dsgservicedesk.dubai.gov.ae"
		{
			set SSO_PROD_SDesk_GLOBAL_poolName "SDESK_PROD_Cloud"
			persist cookie insert Remedy_PROD_dsgSDesk 0
			set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "dsgdesk"
			pool $SSO_PROD_SDesk_GLOBAL_poolName
		}
		default
		{
			# No default Pool
		}
	  } 

	}
}

when HTTP_RESPONSE
{
	if { $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_SDesk_GLOBAL_SSODisable == 1} {
		set SSO_PROD_SDesk_myCookies [HTTP::cookie names]
		foreach SSO_PROD_SDesk_myCookieVal $SSO_PROD_SDesk_myCookies {
			HTTP::cookie secure $SSO_PROD_SDesk_myCookieVal enable
		}	
	}	
}
}
ltm rule /Common/SSO_PROD_SDesk_Pool_Select_sso {
    when RULE_INIT
{
	#set static::SSO_PROD_SDesk_SAM8_Enable 1
	#set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::SSO_PROD_SDesk_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_SDesk_GLOBAL_SSODisable == 0} {

	set SSO_PROD_SDesk_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"servicedesk.dubai.gov.ae"
	{
		set SSO_PROD_SDesk_GLOBAL_poolName "SSO_PROD_SrvcDsk"
		pool $SSO_PROD_SDesk_GLOBAL_poolName
		set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "sdesksso"
		if { $SSO_PROD_SDesk_GLOBAL_URI contains "/DOF/" } {
			#log local0. "URI: [HTTP::uri] , DOF URI exist"
			persist cookie insert SSO_PROD_DOFSD 0
		} elseif { $SSO_PROD_SDesk_GLOBAL_URI contains "/SLC/" } {
			#log local0. "URI: [HTTP::uri] , SLC URI exist"
			persist cookie insert SSO_PROD_SLCSD 0
		} else  {
			persist cookie insert SSO_PROD_SDesk 0
		}
	}
	"dsgservicedesk.dubai.gov.ae"
	{
		set SSO_PROD_SDesk_GLOBAL_poolName "SSO_PROD_SrvcDsk"
		pool $SSO_PROD_SDesk_GLOBAL_poolName
		persist cookie insert SSO_PROD_dsgSDesk 0
		set SSO_PROD_SDesk_GLOBAL_Rewrite_Class "dsgdesksso"
	}
	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
	if { $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_SDesk_GLOBAL_SSODisable == 0} {
		set SSO_PROD_SDesk_myCookies [HTTP::cookie names]
		foreach SSO_PROD_SDesk_myCookieVal $SSO_PROD_SDesk_myCookies {
			HTTP::cookie secure $SSO_PROD_SDesk_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_dofdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dof_request_uri
	{
		#"^/\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/enduser"
		#"^/SSO_BYPASS\$====/arsys/shared/login.jsp?/arsys/forms/sdapp/SRS%3AServiceRequestConsole/DOF/?cacheid=482e855c&mode=CREATE"
		"^/SSO_BYPASS\$====/arsys/forms/sdapp/SRS%3AServiceRequestConsole/DOF/"
		#"^/\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
		#"^/\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/Default+Administrator+View"
		#"^/SSO_BYPASS\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
	}
	set static::SSO_PROD_SDesk_dof_request_host
	{
		#"servicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::SSO_PROD_SDesk_dof_request_referer
	{
	}
	set static::SSO_PROD_SDesk_dof_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dof_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_dof_response_location
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dof_response_contentLocation
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dof_response_body
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dofdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dof_request_uri] > 0}
	{
	set SSO_PROD_SDesk_dof_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_request_uri
	{
		set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_dof_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_dof_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dof_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_dof_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_request_host
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_dof_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dof_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_dof_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_request_referer
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_dof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dof_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_dof_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_request_cookie
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_dof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dofdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dof_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_dof_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_val_list
		{
			foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_response_setCookie
			{
				set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_dof_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_dof_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dof_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_dof_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_response_location
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_dof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dof_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_dof_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_response_contentLocation
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dof_request_find $SSO_PROD_SDesk_dof_request_val $SSO_PROD_SDesk_dof_request_replace SSO_PROD_SDesk_dof_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_dof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_dof_response_body] > 0}
	{
		set SSO_PROD_SDesk_dof_expression ""
		foreach SSO_PROD_SDesk_dof_request_rewriteRecord $static::SSO_PROD_SDesk_dof_response_body
		{
			set SSO_PROD_SDesk_dof_request_find [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dof_request_replace [getfield $SSO_PROD_SDesk_dof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dof_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dof_request_replace ""
			}

			set SSO_PROD_SDesk_dof_expression "$SSO_PROD_SDesk_dof_expression@$SSO_PROD_SDesk_dof_request_find@$SSO_PROD_SDesk_dof_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_dof_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dofdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_dof_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_dof_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_dsgdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dsgdesk_request_uri
	{
		"^/\$====/arsys/"
		"^/SSO_BYPASS\$====/arsys/"
	}
	set static::SSO_PROD_SDesk_dsgdesk_request_host
	{
		"dsgservicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::SSO_PROD_SDesk_dsgdesk_request_referer
	{
	}
	set static::SSO_PROD_SDesk_dsgdesk_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dsgdesk_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_dsgdesk_response_location
	{
		#"http://====https://"
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dsgdesk_response_contentLocation
	{
		#"http://====https://"
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dsgdesk_response_body
	{
		#"http://====https://"
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_request_uri] > 0}
	{
	set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_request_uri
	{
		set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_dsgdesk_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_dsgdesk_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_request_host
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_dsgdesk_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_request_referer
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_dsgdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_request_cookie
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_dsgdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_val_list
		{
			foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_response_setCookie
			{
				set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_dsgdesk_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_dsgdesk_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_response_location
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_dsgdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgdesk_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_dsgdesk_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_response_contentLocation
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgdesk_request_find $SSO_PROD_SDesk_dsgdesk_request_val $SSO_PROD_SDesk_dsgdesk_request_replace SSO_PROD_SDesk_dsgdesk_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_dsgdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_dsgdesk_response_body] > 0}
	{
		set SSO_PROD_SDesk_dsgdesk_expression ""
		foreach SSO_PROD_SDesk_dsgdesk_request_rewriteRecord $static::SSO_PROD_SDesk_dsgdesk_response_body
		{
			set SSO_PROD_SDesk_dsgdesk_request_find [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgdesk_request_replace [getfield $SSO_PROD_SDesk_dsgdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgdesk_request_replace ""
			}

			set SSO_PROD_SDesk_dsgdesk_expression "$SSO_PROD_SDesk_dsgdesk_expression@$SSO_PROD_SDesk_dsgdesk_request_find@$SSO_PROD_SDesk_dsgdesk_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_dsgdesk_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_dsgdesk_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_dsgdesk_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_dsgdsso {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dsgsso_request_uri
	{
		"^/\$====/arsys/"
		"^/SSO_ENABLE\$====/arsys/"
	}
	set static::SSO_PROD_SDesk_dsgsso_request_host
	{
		"dsgservicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::SSO_PROD_SDesk_dsgsso_request_referer
	{
	}
	set static::SSO_PROD_SDesk_dsgsso_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_dsgsso_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_dsgsso_response_location
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dsgsso_response_contentLocation
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_dsgsso_response_body
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://dsgservicedesk.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_request_uri] > 0}
	{
	set SSO_PROD_SDesk_dsgsso_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_request_uri
	{
		set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_dsgsso_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_dsgsso_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_request_host
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_dsgsso_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_request_referer
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_dsgsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_request_cookie
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_dsgsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_val_list
		{
			foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_response_setCookie
			{
				set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_dsgsso_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_dsgsso_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_response_location
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_dsgsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_dsgsso_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_dsgsso_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_response_contentLocation
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_dsgsso_request_find $SSO_PROD_SDesk_dsgsso_request_val $SSO_PROD_SDesk_dsgsso_request_replace SSO_PROD_SDesk_dsgsso_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_dsgsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_dsgsso_response_body] > 0}
	{
		set SSO_PROD_SDesk_dsgsso_expression ""
		foreach SSO_PROD_SDesk_dsgsso_request_rewriteRecord $static::SSO_PROD_SDesk_dsgsso_response_body
		{
			set SSO_PROD_SDesk_dsgsso_request_find [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_dsgsso_request_replace [getfield $SSO_PROD_SDesk_dsgsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_dsgsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_dsgsso_request_replace ""
			}

			set SSO_PROD_SDesk_dsgsso_expression "$SSO_PROD_SDesk_dsgsso_expression@$SSO_PROD_SDesk_dsgsso_request_find@$SSO_PROD_SDesk_dsgsso_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_dsgsso_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "dsgdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_dsgsso_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_dsgsso_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_sdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_sdesk_request_uri
	{
		"^/\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/enduser"
		"^/SSO_BYPASS\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/enduser"
		#"^/\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
		#"^/\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/Default+Administrator+View"
		#"^/SSO_BYPASS\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
	}
	set static::SSO_PROD_SDesk_sdesk_request_host
	{
		#"servicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::SSO_PROD_SDesk_sdesk_request_referer
	{
	}
	set static::SSO_PROD_SDesk_sdesk_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_sdesk_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_sdesk_response_location
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_sdesk_response_contentLocation
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_sdesk_response_body
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_request_uri] > 0}
	{
	set SSO_PROD_SDesk_sdesk_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_request_uri
	{
		set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_sdesk_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_sdesk_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_sdesk_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_request_host
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_sdesk_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_sdesk_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_request_referer
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_sdesk_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_request_cookie
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_sdesk_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_val_list
		{
			foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_response_setCookie
			{
				set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_sdesk_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_sdesk_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_sdesk_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_response_location
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdesk_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_sdesk_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_response_contentLocation
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdesk_request_find $SSO_PROD_SDesk_sdesk_request_val $SSO_PROD_SDesk_sdesk_request_replace SSO_PROD_SDesk_sdesk_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_sdesk_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_sdesk_response_body] > 0}
	{
		set SSO_PROD_SDesk_sdesk_expression ""
		foreach SSO_PROD_SDesk_sdesk_request_rewriteRecord $static::SSO_PROD_SDesk_sdesk_response_body
		{
			set SSO_PROD_SDesk_sdesk_request_find [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdesk_request_replace [getfield $SSO_PROD_SDesk_sdesk_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdesk_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdesk_request_replace ""
			}

			set SSO_PROD_SDesk_sdesk_expression "$SSO_PROD_SDesk_sdesk_expression@$SSO_PROD_SDesk_sdesk_request_find@$SSO_PROD_SDesk_sdesk_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_sdesk_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_sdesk_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_sdesk_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_sdesksso {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_sdsso_request_uri
	{
		"^/\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/enduser"
		"^/SSO_ENABLE\$====/arsys/forms/sdapp/SRS:ServiceRequestConsole/enduser"
		#"^/\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
		#"^/SSO_ENABLE\$====/arsys/forms/sditsm/SRS:ServiceRequestConsole/enduser"
	}
	set static::SSO_PROD_SDesk_sdsso_request_host
	{
		"servicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	} 
	set static::SSO_PROD_SDesk_sdsso_request_referer
	{
		"servicedesk.dubai.gov.ae====servicedesk.msg.dubai.gov.ae:8080"
	}
	set static::SSO_PROD_SDesk_sdsso_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_sdsso_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_sdsso_response_location
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_sdsso_response_contentLocation
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_sdsso_response_body
	{
		"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_request_uri] > 0}
	{
	set SSO_PROD_SDesk_sdsso_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_request_uri
	{
		set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_sdsso_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_sdsso_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_sdsso_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_request_host
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_sdsso_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_sdsso_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_request_referer
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_sdsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_sdsso_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_request_cookie
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_sdsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_sdsso_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_val_list
		{
			foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_response_setCookie
			{
				set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_sdsso_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_sdsso_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_sdsso_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_response_location
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_sdsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_sdsso_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_sdsso_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_response_contentLocation
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_sdsso_request_find $SSO_PROD_SDesk_sdsso_request_val $SSO_PROD_SDesk_sdsso_request_replace SSO_PROD_SDesk_sdsso_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_sdsso_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_sdsso_response_body] > 0}
	{
		set SSO_PROD_SDesk_sdsso_expression ""
		foreach SSO_PROD_SDesk_sdsso_request_rewriteRecord $static::SSO_PROD_SDesk_sdsso_response_body
		{
			set SSO_PROD_SDesk_sdsso_request_find [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_sdsso_request_replace [getfield $SSO_PROD_SDesk_sdsso_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_sdsso_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_sdsso_request_replace ""
			}

			set SSO_PROD_SDesk_sdsso_expression "$SSO_PROD_SDesk_sdsso_expression@$SSO_PROD_SDesk_sdsso_request_find@$SSO_PROD_SDesk_sdsso_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_sdsso_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "sdesksso" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_sdsso_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_sdsso_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_SDesk_Rewrite_slcdesk {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_SDesk_slc_request_uri
	{
		"^/SSO_BYPASS\$====/arsys/forms/sdapp/SRS%3AServiceRequestConsole/SLC/"
	}
	set static::SSO_PROD_SDesk_slc_request_host
	{
	} 
	set static::SSO_PROD_SDesk_slc_request_referer
	{
	}
	set static::SSO_PROD_SDesk_slc_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_SDesk_slc_response_setCookie
	{
	}
	set static::SSO_PROD_SDesk_slc_response_location
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_slc_response_contentLocation
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
	set static::SSO_PROD_SDesk_slc_response_body
	{
		"http://====https://"
		#"http://servicedesk.msg.dubai.gov.ae:8080====https://servicedesk.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "slcdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {


            #if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        #}

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_slc_request_uri] > 0}
	{
	set SSO_PROD_SDesk_slc_request_val [HTTP::uri]
	foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_request_uri
	{
		set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
		set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]
		if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
		{
			set SSO_PROD_SDesk_slc_request_replace ""
		}

		regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_SDesk_slc_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_slc_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_SDesk_slc_request_val [HTTP::host]
		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_request_host
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}
			regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_SDesk_slc_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_slc_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_SDesk_slc_request_val [HTTP::header value Referer]
		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_request_referer
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_SDesk_slc_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_SDesk_slc_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_SDesk_slc_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_request_cookie
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]

			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_SDesk_slc_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "slcdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_slc_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_SDesk_slc_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_val_list
		{
			foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_response_setCookie
			{
				set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
				set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]

				if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
				{
					set SSO_PROD_SDesk_slc_request_replace ""
				}
				regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_SDesk_slc_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_slc_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_SDesk_slc_request_val [HTTP::header value Location]

		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_response_location
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_SDesk_slc_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_SDesk_slc_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_SDesk_slc_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_response_contentLocation
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}

			regsub -all $SSO_PROD_SDesk_slc_request_find $SSO_PROD_SDesk_slc_request_val $SSO_PROD_SDesk_slc_request_replace SSO_PROD_SDesk_slc_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_SDesk_slc_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_SDesk_slc_response_body] > 0}
	{
		set SSO_PROD_SDesk_slc_expression ""
		foreach SSO_PROD_SDesk_slc_request_rewriteRecord $static::SSO_PROD_SDesk_slc_response_body
		{
			set SSO_PROD_SDesk_slc_request_find [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 1]
			set SSO_PROD_SDesk_slc_request_replace [getfield $SSO_PROD_SDesk_slc_request_rewriteRecord "====" 2]
			if {$SSO_PROD_SDesk_slc_request_replace == "nothing"}
			{
				set SSO_PROD_SDesk_slc_request_replace ""
			}

			set SSO_PROD_SDesk_slc_expression "$SSO_PROD_SDesk_slc_expression@$SSO_PROD_SDesk_slc_request_find@$SSO_PROD_SDesk_slc_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_SDesk_slc_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_SDesk_GLOBAL_Rewrite_Class == "slcdesk" and $SSO_PROD_SDesk_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_SDesk_slc_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_SDesk_slc_theMatch"
		#log local0. "on URI: $SSO_PROD_SDesk_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_ShPnt2016_Base {
    when RULE_INIT
{
	#set static::SSO_PROD_ShPnt_SSO_Bypass "ACL_PROD_SSO_Bypass"
	set static::SSO_PROD_ShPnt_SSO_Enable "ACL_ShPnt_PROD_SSO_Enable"
	set static::SSO_PROD_ShPnt_MP_BypassIPs "SSO_PROD_ShPnt_MP_BypassIPs"
}

when HTTP_REQUEST
{
	set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 0
	set SSO_PROD_ShPnt_GLOBAL_SSODisable 0
	set SSO_PROD_ShPnt_GLOBAL_poolName ""
	set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class ""
	set SSO_PROD_ShPnt_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "teams.dsg.gov.ae" - "teams.dubaigov.local"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "ShPnt_DSG_Teams"]} {
				set SSO_PROD_ShPnt_GLOBAL_SSODisable 1
			}
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1
	    	#drop
        }
    }

	# Disable SSO if Source IP doesn't belog to SSO-Enabled IPs
	if { $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0 } {
		if {not [class match [IP::client_addr] equals $static::SSO_PROD_ShPnt_SSO_Enable]} {
			set SSO_PROD_ShPnt_GLOBAL_SSODisable 1
		}
	}

	# Enable SSO if "/SSO_ENABLE" is used. 
	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "ShPnt_DSG_Teams"] or [HTTP::cookie exists "GRPsecPortal"]) } {
		if { $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1 } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "SSO_PROD_ShPnt_Teams"] or [HTTP::cookie exists "SSO_GRPsecPortal"]} {
				set SSO_PROD_ShPnt_GLOBAL_SSODisable 0
				#log local0. "SSO_PROD_wMail_GLOBAL_SSODisable: $SSO_PROD_wMail_GLOBAL_SSODisable"
			}
		}
	}

	#STREAM::disable
}

when HTTP_RESPONSE
{
	#STREAM::disable
}
}
ltm rule /Common/SSO_PROD_ShPnt2016_Pool_Select_sso {
    when RULE_INIT
{
	#set static::SSO_PROD_ShPnt_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
	set static::SSO_PROD_ShPnt_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
}

when HTTP_REQUEST {

 if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0} {

	set SSO_PROD_ShPnt_GLOBAL_URI [HTTP::uri]

	switch [string tolower [HTTP::host]] {

		"teams.dsg.gov.ae"
		{
			if { ($static::SSO_PROD_ShPnt_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_SharePoint"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_PROD_SharePoint 0
			} else {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_ShPnt"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_PROD_ShPnt_Teams 0
			}			
			set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"
			if { not([HTTP::cookie exists "SP-DSG-GOV-AE-PD-H-TMP-SESSION-ID"]) } {
				HTTP::uri /pkmstempsession?url=[HTTP::uri]
			}
		}


		default
		{
			# No default Pool
		}
	}

 }

}

when HTTP_RESPONSE {
	if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0} {
		set SSO_PROD_ShPnt_myCookies [HTTP::cookie names]
		foreach SSO_PROD_ShPnt_myCookieVal $SSO_PROD_ShPnt_myCookies {
			HTTP::cookie secure $SSO_PROD_ShPnt_myCookieVal enable
			if { $SSO_PROD_ShPnt_myCookieVal equals "SSO_PROD_ShPnt_Teams" } {
				HTTP::cookie expires SSO_PROD_ShPnt_Teams 21600
			}
		}   
    }
}
}
ltm rule /Common/SSO_PROD_ShPnt2016_rewrite_ssoteams {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_ShPnt_ssotms_request_uri
	{
		"^/SSO_ENABLE\$====/"
	}
	set static::SSO_PROD_ShPnt_ssotms_request_host
	{
	} 
	set static::SSO_PROD_ShPnt_ssotms_request_referer
	{
	}
	set static::SSO_PROD_ShPnt_ssotms_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_ShPnt_ssotms_response_setCookie
	{
	}
	set static::SSO_PROD_ShPnt_ssotms_response_location
	{
		"http://teams.dsg.gov.ae====https://teams.dsg.gov.ae"

	}
	set static::SSO_PROD_ShPnt_ssotms_response_contentLocation
	{
		"http://teams.dsg.gov.ae====https://teams.dsg.gov.ae"

	}
	set static::SSO_PROD_ShPnt_ssotms_response_body
	{
		"http://grpportalsecure.dubai.gov.ae====https://grpportalsecure.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
		"\"http://ssosp.dsg.gov.ae====\"https://ssosp.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_uri] > 0}
	{
	set SSO_PROD_ShPnt_ssotms_request_val [HTTP::uri]
	foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_uri
	{
		set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
		set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
		if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
		{
			set SSO_PROD_ShPnt_ssotms_request_replace ""
		}

		regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_ShPnt_ssotms_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::host]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_host
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}
			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_ShPnt_ssotms_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Referer]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_referer
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_cookie
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_val_list
		{
			foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_setCookie
			{
				set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
				set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
				{
					set SSO_PROD_ShPnt_ssotms_request_replace ""
				}
				regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_ShPnt_ssotms_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Location]

		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_location
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_contentLocation
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_body] > 0}
	{
		set SSO_PROD_ShPnt_ssotms_expression ""
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_body
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			set SSO_PROD_ShPnt_ssotms_expression "$SSO_PROD_ShPnt_ssotms_expression@$SSO_PROD_ShPnt_ssotms_request_find@$SSO_PROD_ShPnt_ssotms_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_ShPnt_ssotms_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_ShPnt_ssotms_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_ShPnt_ssotms_theMatch"
		#log local0. "on URI: $SSO_PROD_ShPnt_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_ShPnt_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	#set SSO_PROD_ShPnt_80_GLOBAL_BREAK_ALL 0
	#set SSO_PROD_ShPnt_GLOBAL_poolName ""

	switch [string tolower [HTTP::host]] { 
        "teams.dsg.gov.ae" - "www.teams.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://teams.dsg.gov.ae[HTTP::uri]"
		    }
        }
		"innovation.dubaigov.local" - "innovation" 
        {
            #log local0. "Access allowed for Host: [HTTP::host]"
            if { [HTTP::uri] equals "/" } {
                HTTP::redirect "https://teams.dsg.gov.ae/innovation"
            }
        }
		"awards.dubaigov.local" - "awards" 
        {
            #log local0. "Access allowed for Host: [HTTP::host]"
            if { [HTTP::uri] equals "/" } {
                HTTP::redirect "https://teams.dsg.gov.ae/awards"
            }
        }
		"strategy.dubaigov.local" - "strategy" 
        {
            #log local0. "Access allowed for Host: [HTTP::host]"
            if { [HTTP::uri] equals "/" } {
                HTTP::redirect "https://teams.dsg.gov.ae/Strategy%20Communication"
            }
        }
		"strategy.dsg.gov.ae" - "www.strategy.dsg.gov.ae" 
        {
            #log local0. "Access allowed for Host: [HTTP::host]"
            if { [HTTP::uri] equals "/" } {
                HTTP::redirect "https://teams.dsg.gov.ae/Strategy%20Communication/Forms/AllItems.aspx"
            }
        }

		"mysite.dsg.gov.ae" - "www.mysite.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 

		    	HTTP::redirect "https://mysite.dsg.gov.ae[HTTP::uri]"

        }
		"teams.deg.gov.ae" - "www.teams.deg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/") or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://teams.dsg.gov.ae[HTTP::uri]"
		    }
        }
		"mysite.deg.gov.ae" - "www.mysite.deg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://mysite.dsg.gov.ae[HTTP::uri]"
		    }
        }

		"customer360.dsg.gov.ae" - "www.customer360.dsg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://customer360.dsg.gov.ae[HTTP::uri]"
		    }
        }

		"intranet.deg.gov.ae" - "www.intranet.deg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://intranet.deg.gov.ae[HTTP::uri]"
		    }
        }

		"intranet.dsg.gov.ae" - "www.intranet.dsg.gov.ae"  - "sdgintranet" - "intranet.sdg.gov.ae" - "mysite.dsg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		   	HTTP::redirect "https://[HTTP::host][HTTP::uri]"

        }

		"intranet.dghr.gov.ae" - "www.intranet.dghr.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://intranet.dghr.gov.ae[HTTP::uri]"
		    }
        }

		"teams.dof.gov.ae" - "www.teams.dof.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://teams.dof.gov.ae[HTTP::uri]"
        }

		"teams.protocol.dubai.ae" - "www.teams.protocol.dubai.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://teams.protocol.dubai.ae[HTTP::uri]"
        }

		"teams.fad.gov.ae" - "www.teams.fad.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    HTTP::redirect "https://teams.fad.gov.ae[HTTP::uri]"
        }

		"teams.legal.dubai.gov.ae" - "teams.slc.dubai.gov.ae"
		{
		    HTTP::redirect "https://[HTTP::host][HTTP::uri]"
        }

		"teams.cxlab.ae"
		{
		    HTTP::redirect "https://[HTTP::host][HTTP::uri]"
        }

		"teams.daw.ae" - "teams.dwe.gov.ae"
		{
		    HTTP::redirect "https://[HTTP::host][HTTP::uri]"
        }

		"smartapps.dubai.ae" - "pm.dsg.gov.ae" - "smartservices.dubai.ae" - "smartcity.dubai.ae"
		{
			#Smartapps- for http to https
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    }
        }

		"grpportalsecure.dubai.gov.ae"
		{
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    }
		}

		"teams.dubailadiesclub.com" - "teams.dwe.gov.ae" - "teams.dghr.gov.ae" - "pmo.sdg.gov.ae" - "pmo.smartdubai.ae"
		{
		    HTTP::redirect "https://[HTTP::host][HTTP::uri]"
        }

		"teams.dubaigov.local" - "mysite.dubaigov.local" - "mysite" - "teams" 
		{
		#using SharePoint 2013 serverfarm
		#set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
		pool ShPnt_PROD_Pool
		#persist cookie insert ShPnt_DSG_Teams 0		
		}

		"dofapp.dubai.gov.ae"
		{
		    #HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			HTTP::redirect "https://dofapp.dubai.gov.ae[HTTP::uri]"
        }

		"dofws.dubaigov.local"
		{
			#if {[IP::client_addr] equals "213.42.56.190"}
			pool ShPnt_PROD_Pool
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

}
}
ltm rule /Common/SSO_PROD_ShPnt_Base {
    when RULE_INIT
{
	#set static::SSO_PROD_ShPnt_SSO_Bypass "ACL_PROD_SSO_Bypass"
	set static::SSO_PROD_ShPnt_SSO_Enable "ACL_ShPnt_PROD_SSO_Enable"
	set static::SSO_PROD_ShPnt_MP_BypassIPs "SSO_PROD_ShPnt_MP_BypassIPs"
}

when HTTP_REQUEST
{
	set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 0
	set SSO_PROD_ShPnt_GLOBAL_SSODisable 0
	set SSO_PROD_ShPnt_GLOBAL_poolName ""
	set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class ""
	set SSO_PROD_ShPnt_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "teams.dsg.gov.ae" - "teams.dubaigov.local"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "ShPnt_DSG_Teams"]} {
				set SSO_PROD_ShPnt_GLOBAL_SSODisable 1
			}
        }
		"grpportalsecure.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "GRPsecPortal"]} {
				set SSO_PROD_ShPnt_GLOBAL_SSODisable 1
			}
        }
		"mysite.dsg.gov.ae" - "customer360.dsg.gov.ae" - "intranet.deg.gov.ae" - "intranet.dghr.gov.ae" -
		"teams.dof.gov.ae" - "teams.protocol.dubai.ae" - "teams.slc.dubai.gov.ae" -
		"teams.dubailadiesclub.com" - "teams.dwe.gov.ae" - "teams.dghr.gov.ae" - "teams.cxlab.ae" - "dofapp.dubai.gov.ae" - "teams.dwe.gov.ae" - "teams.daw.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 

			set SSO_PROD_ShPnt_GLOBAL_SSODisable 1

        }
		"teams.fad.gov.ae" - "smartcity.dubai.ae" - "teams.legal.dubai.gov.ae" - "smartapps.dubai.ae" - "pmo.sdg.gov.ae" -
		"pm.dsg.gov.ae" - "admin.tst.dubai.gov.ae" - "tst.dubai.gov.ae" - "smartservices.dubai.ae" - "teams.dwe.ae" - "pmo.smartdubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 

			set SSO_PROD_ShPnt_GLOBAL_SSODisable 1

        }
		"www.teams.dsg.gov.ae" - "www.mysite.dsg.gov.ae" - "www.customer360.dsg.gov.ae" - "www.intranet.deg.gov.ae" -
		"www.intranet.dghr.gov.ae" - "www.teams.dof.gov.ae" - "www.teams.protocol.dubai.ae" - "www.teams.fad.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			set SSO_PROD_ShPnt_host [HTTP::host]
			regsub -all -nocase "www\." $SSO_PROD_ShPnt_host "" SSO_PROD_ShPnt_host
			HTTP::respond 302 Location "https://$SSO_PROD_ShPnt_host[HTTP::uri]"
			set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1

        }
		"teams.deg.gov.ae" - "www.teams.deg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1
			if { ([HTTP::uri] equals "/") or [HTTP::uri] equals "/SSO_ENABLE" } {
		    	HTTP::redirect "https://teams.dsg.gov.ae[HTTP::uri]"
		    }
        }
		"mysite.deg.gov.ae" - "www.mysite.deg.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://mysite.dsg.gov.ae"
		    }
        }
		"intranet.dsg.gov.ae" - "www.intranet.dsg.gov.ae" - "sdgintranet" - "intranet.sdg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" } {
		    	HTTP::redirect "https://intranet.deg.gov.ae[HTTP::uri]"
		    }
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1
	    	#drop
        }
    }

	# Disable SSO if Source IP doesn't belog to SSO-Enabled IPs
	if { $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0 } {
		if {not [class match [IP::client_addr] equals $static::SSO_PROD_ShPnt_SSO_Enable]} {
			set SSO_PROD_ShPnt_GLOBAL_SSODisable 1
		}
	}

	# Enable SSO if "/SSO_ENABLE" is used. 
	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "ShPnt_DSG_Teams"] or [HTTP::cookie exists "GRPsecPortal"]) } {
		if { $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1 } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "SSO_PROD_ShPnt_Teams"] or [HTTP::cookie exists "SSO_GRPsecPortal"]} {
				set SSO_PROD_ShPnt_GLOBAL_SSODisable 0
				#log local0. "SSO_PROD_wMail_GLOBAL_SSODisable: $SSO_PROD_wMail_GLOBAL_SSODisable"
			}
		}
	}

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_ShPnt_Pool_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_ShPnt_flag_maintenance 0
}

when HTTP_REQUEST {

	set SSO_PROD_ShPnt_goToMaintenance 0

    switch [string tolower [HTTP::host]] { 

		"teams.cxlab.ae" - "teams.protocol.dubai.ae" - "teams.legal.dubai.gov.ae" - "teams.slc.dubai.gov.ae" - "teams.fad.gov.ae" - "teams.dof.gov.ae" - "teams.dubailadiesclub.com" - "teams.dwe.gov.ae" - "pmo.smartdubai.ae"
		{
			if {not ([class match [IP::client_addr] equals $static::SSO_PROD_ShPnt_MP_BypassIPs]) and $static::SSO_PROD_ShPnt_flag_maintenance == 1} {
				set SSO_PROD_ShPnt_goToMaintenance 1
				#log local0. "SSO_PROD_ShPnt_goToMaintenance = $SSO_PROD_ShPnt_goToMaintenance"
			}

			if {$SSO_PROD_ShPnt_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" } {

				set SSO_PROD_ShPnt_GLOBAL_BREAK_ALL 1

				# Enable the below command & disable all others ONLY when 213.42.85.27 is down !!
				#HTTP::redirect "http://maintenance.dubai.ae"

				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			} 		
		}
	}
}
}
ltm rule /Common/SSO_PROD_ShPnt_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $SSO_PROD_ShPnt_GLOBAL_poolName != "EDCP_PROD_SSL_Pool" and $SSO_PROD_ShPnt_GLOBAL_poolName != "ShPnt2016_PROD_SSL"} {
	    SSL::disable
	}
}
}
ltm rule /Common/SSO_PROD_ShPnt_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_ShPnt_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team."
	set static::SSO_PROD_ShPnt_Intranet "DSG_Intranet_ACL"
}

when HTTP_REQUEST {

 if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1} {

	set SSO_PROD_ShPnt_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"teams.dsg.gov.ae" - "mysite.dsg.gov.ae" - "teams.daw.ae"  - "teams.dghr.gov.ae"
	{
		#using SharePoint 2013 serverfarm
		#set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt2016_PROD_Pool"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert ShPnt_DSG_Teams 0

		if { [HTTP::uri] equals "/SSO_BYPASS" } {
			HTTP::uri "/"
		}
	}

	"grpportalsecure.dubai.gov.ae"
	{
		#using SharePoint 2013 serverfarm
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert GRPsecPortal 0
		set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"

		if { [HTTP::uri] equals "/SSO_BYPASS" } {
			HTTP::uri "/ar"
		}
	}
	"teams.legal.dubai.gov.ae" - "teams.slc.dubai.gov.ae" -
	"teams.dof.gov.ae" - "teams.protocol.dubai.ae" - "teams.fad.gov.ae" -
	"teams.dubailadiesclub.com" - "teams.cxlab.ae" - "teams.dwe.gov.ae"  - "teams.dghr.gov.ae"
	{
		#These are using SharePoint 2016 serverfarm
		#set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt2016_PROD_Pool"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert ShPnt16_Sites 0
	}
	"pmo.sdg.gov.ae" - "pmo.smartdubai.ae"
	{
		#These are using SharePoint 2016 SSL serverfarm
		#set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt2016_PROD_SSL"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert PMO_SDG 0
	}
	"smartcity.dubai.ae" - "mysite.dsg.gov.ae" -
	"customer360.dsg.gov.ae" - "smartapps.dubai.ae" - "smartservices.dubai.ae" - "dofapp.dubai.gov.ae"
	{
		#These are using SharePoint 2013 serverfarm
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert ShPnt_Sites 0
	}

	"intranet.dghr.gov.ae" - "teams.dof.gov.ae" - "teams.protocol.dubai.ae" - "teams.fad.gov.ae"
	{
		#These are using SharePoint 2010 serverfarm
		set SSO_PROD_ShPnt_GLOBAL_poolName "HMC_PROD_ShPnt"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert ShPnt_Sites 0
	}

	"intranet.deg.gov.ae"
	{
		# allowed only for DSG users & HHRC VPN users
		if { [class match [IP::client_addr] equals $static::SSO_PROD_ShPnt_Intranet] } {
			set SSO_PROD_ShPnt_GLOBAL_poolName "EDCP_PROD_SSL_Pool"
			pool $SSO_PROD_ShPnt_GLOBAL_poolName
			persist cookie insert ShPnt_Intranet 0
		}
		else {
			HTTP::respond 200 content $static::SSO_PROD_ShPnt_Sorry
		}
	}

	"pm.dsg.gov.ae"
	{
		# allowed only for DSG users & HHRC VPN users & SS-DBs-VPN-Pool
		if { [IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.50.180" or [IP::client_addr] equals "213.42.48.180" or [IP::client_addr] equals "213.42.48.183" or ([IP::client_addr] equals "213.42.50.172") or ([IP::client_addr] equals "213.42.55.99")} {
			set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
			pool $SSO_PROD_ShPnt_GLOBAL_poolName
			persist cookie insert ShPnt_PM 0
		}
		else {
			HTTP::respond 200 content $static::SSO_PROD_ShPnt_Sorry
		}
	}

	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
	if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1} {
		set SSO_PROD_ShPnt_myCookies [HTTP::cookie names]
		foreach SSO_PROD_ShPnt_myCookieVal $SSO_PROD_ShPnt_myCookies {
			HTTP::cookie secure $SSO_PROD_ShPnt_myCookieVal enable
			if { $SSO_PROD_ShPnt_myCookieVal equals "ShPnt_DSG_Teams" } {
				HTTP::cookie expires HMC_PROD_ShPnt_Teams 21600
			}
		}
    }
}
}
ltm rule /Common/SSO_PROD_ShPnt_Pool_Select_sso {
    when RULE_INIT
{
	#set static::SSO_PROD_ShPnt_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
	set static::SSO_PROD_ShPnt_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
}

when HTTP_REQUEST {

 if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0} {

	set SSO_PROD_ShPnt_GLOBAL_URI [HTTP::uri]

	switch [string tolower [HTTP::host]] {

		"teams.dsg.gov.ae"
		{
			if { ($static::SSO_PROD_ShPnt_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_SharePoint"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_PROD_SharePoint 0
			} else {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_ShPnt"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_PROD_ShPnt_Teams 0
			}			
			set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"
			if { not([HTTP::cookie exists "SP-DSG-GOV-AE-PD-H-TMP-SESSION-ID"]) } {
				HTTP::uri /pkmstempsession?url=[HTTP::uri]
			}
		}

		"grpportalsecure.dubai.gov.ae"
		{
			if { ($static::SSO_PROD_ShPnt_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_GRPSec"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_GRPsecPort 0
			} else {
				set SSO_PROD_ShPnt_GLOBAL_poolName "SSO_PROD_ShPnt_GPortal80"
				pool $SSO_PROD_ShPnt_GLOBAL_poolName
				persist cookie insert SSO_GRPsecPortal 0
			}
			set SSO_PROD_ShPnt_GLOBAL_Rewrite_Class "ssoteams"
		}

		default
		{
			# No default Pool
		}
	}

 }

}

when HTTP_RESPONSE {
	if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 0} {
		set SSO_PROD_ShPnt_myCookies [HTTP::cookie names]
		foreach SSO_PROD_ShPnt_myCookieVal $SSO_PROD_ShPnt_myCookies {
			HTTP::cookie secure $SSO_PROD_ShPnt_myCookieVal enable
			if { $SSO_PROD_ShPnt_myCookieVal equals "SSO_PROD_ShPnt_Teams" } {
				HTTP::cookie expires SSO_PROD_ShPnt_Teams 21600
			}
		}   
    }
}
}
ltm rule /Common/SSO_PROD_ShPnt_Rewrite_ssoteams {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_ShPnt_ssotms_request_uri
	{
		"^/SSO_ENABLE\$====/"
	}
	set static::SSO_PROD_ShPnt_ssotms_request_host
	{
	} 
	set static::SSO_PROD_ShPnt_ssotms_request_referer
	{
	}
	set static::SSO_PROD_ShPnt_ssotms_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_ShPnt_ssotms_response_setCookie
	{
	}
	set static::SSO_PROD_ShPnt_ssotms_response_location
	{
		"http://teams.dsg.gov.ae====https://teams.dsg.gov.ae"
		"http://teams.dof.gov.ae====https://teams.dof.gov.ae"
		"http://teams.fad.gov.ae====https://teams.fad.gov.ae"
		"http://teams.protocol.gov.ae====https://teams.protocol.gov.ae"
		"http://teams.legal.dubai.gov.ae====https://teams.legal.dubai.gov.ae"
		"http://teams.slc.dubai.gov.ae====https://teams.slc.dubai.gov.ae"
		"http://grpportalsecure.dubai.gov.ae====https://grpportalsecure.dubai.gov.ae"
	}
	set static::SSO_PROD_ShPnt_ssotms_response_contentLocation
	{
		"http://teams.dsg.gov.ae====https://teams.dsg.gov.ae"
		"http://teams.dof.gov.ae====https://teams.dof.gov.ae"
		"http://teams.fad.gov.ae====https://teams.fad.gov.ae"
		"http://teams.protocol.gov.ae====https://teams.protocol.gov.ae"
		"http://teams.legal.dubai.gov.ae====https://teams.legal.dubai.gov.ae"
		"http://teams.slc.dubai.gov.ae====https://teams.slc.dubai.gov.ae"
		"http://grpportalsecure.dubai.gov.ae====https://grpportalsecure.dubai.gov.ae"
	}
	set static::SSO_PROD_ShPnt_ssotms_response_body
	{
		"http://grpportalsecure.dubai.gov.ae====https://grpportalsecure.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"http://teams.dof.gov.ae====https://teams.dof.gov.ae"
		"http://teams.fad.gov.ae====https://teams.fad.gov.ae"
		"http://teams.protocol.gov.ae====https://teams.protocol.gov.ae"
		"http://teams.legal.dubai.gov.ae====https://teams.legal.dubai.gov.ae"
		"http://teams.slc.dubai.gov.ae====https://teams.slc.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
		"\"http://ssosp.dsg.gov.ae====\"https://ssosp.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_uri] > 0}
	{
	set SSO_PROD_ShPnt_ssotms_request_val [HTTP::uri]
	foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_uri
	{
		set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
		set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
		if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
		{
			set SSO_PROD_ShPnt_ssotms_request_replace ""
		}

		regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_ShPnt_ssotms_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::host]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_host
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}
			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_ShPnt_ssotms_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Referer]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_referer
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_request_cookie
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_val_list
		{
			foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_setCookie
			{
				set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
				set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
				{
					set SSO_PROD_ShPnt_ssotms_request_replace ""
				}
				regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_ShPnt_ssotms_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Location]

		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_location
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_ShPnt_ssotms_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_contentLocation
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			regsub -all $SSO_PROD_ShPnt_ssotms_request_find $SSO_PROD_ShPnt_ssotms_request_val $SSO_PROD_ShPnt_ssotms_request_replace SSO_PROD_ShPnt_ssotms_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_ShPnt_ssotms_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_ShPnt_ssotms_response_body] > 0}
	{
		set SSO_PROD_ShPnt_ssotms_expression ""
		foreach SSO_PROD_ShPnt_ssotms_request_rewriteRecord $static::SSO_PROD_ShPnt_ssotms_response_body
		{
			set SSO_PROD_ShPnt_ssotms_request_find [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 1]
			set SSO_PROD_ShPnt_ssotms_request_replace [getfield $SSO_PROD_ShPnt_ssotms_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ShPnt_ssotms_request_replace == "nothing"}
			{
				set SSO_PROD_ShPnt_ssotms_request_replace ""
			}

			set SSO_PROD_ShPnt_ssotms_expression "$SSO_PROD_ShPnt_ssotms_expression@$SSO_PROD_ShPnt_ssotms_request_find@$SSO_PROD_ShPnt_ssotms_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_ShPnt_ssotms_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_ShPnt_GLOBAL_Rewrite_Class == "ssoteams" and $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_ShPnt_ssotms_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_ShPnt_ssotms_theMatch"
		#log local0. "on URI: $SSO_PROD_ShPnt_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_ePaymPay_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	#set SSO_PROD_wMail_80_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] { 
        "epayadmin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://epayadmin.dubai.gov.ae/epay"
		    }
        }

		"mpayadmin.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://mpayadmin.dubai.gov.ae/mPayAdmin"
		    }
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/SSO_PROD_ePaymPay_Base {
    when RULE_INIT
{
	set static::SSO_PROD_ePaymPay_GLOBAL_Maint_BypassIPs "ePayPROD_Maint_Bypass"
	set static::SSO_PROD_ePaymPay_GLOBAL_ePay_AllowedIPs "ePayAdmin_Allowed_IPs"
}

when HTTP_REQUEST
{
	set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 0
	set SSO_PROD_ePaymPay_GLOBAL_SSODisable 0
	set SSO_PROD_ePaymPay_GLOBAL_poolName ""
	set SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class ""
	set SSO_PROD_ePaymPay_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "epayadmin.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"		
			if { [HTTP::uri] equals "/" } {
				HTTP::redirect "https://epayadmin.dubai.gov.ae/epay"
				set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
			}

			#HTTP::redirect "https://epayment.dubai.ae/epay"
			#set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
	    }

		"mpayadmin.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/mPayAdmin" or [HTTP::uri] equals "/mPayAdmin/" } {
		    	HTTP::redirect "https://mpayadmin.dubai.gov.ae/mPay-Reporter/security/login.do"
				set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
		    }

			#HTTP::redirect "https://mpay.dubai.ae/mPayAdmin"
			#set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
        }
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	#set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
	    	#drop
        }
    }	
}
}
ltm rule /Common/SSO_PROD_ePaymPay_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_ePaymPay_flag_maintenance 0
}

when HTTP_REQUEST
{
	#if { $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0 } {



		set SSO_PROD_ePaymPay_goToMaintenance 0

		if {not ([class match [IP::client_addr] equals $static::SSO_PROD_ePaymPay_GLOBAL_Maint_BypassIPs]) and $static::SSO_PROD_ePaymPay_flag_maintenance == 1} {
			set SSO_PROD_ePaymPay_goToMaintenance 1
		}

		if {$SSO_PROD_ePaymPay_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" } {

			set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1


			if {[HTTP::uri] ends_with "favicon.ico"} {		
				HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
			} elseif {[HTTP::uri] ends_with "ePay-MaintenancePage.jpg"} {
				HTTP::uri "/sites/maintenance/epay/images/ePay-MaintenancePage.jpg"
			} else {
				HTTP::uri "/sites/maintenance/epay/default.aspx"
			}

			HTTP::header replace Host "www.dsg.gov.ae"
			HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
			HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

			set SSO_PROD_ePaymPay_GLOBAL_poolName "grpMaintenance_pool"
			pool $SSO_PROD_ePaymPay_GLOBAL_poolName
			persist cookie insert SSO_PROD_ePaymPay_Maint 0
			#log local0. "Host: [HTTP::host] Client-IP: [IP::client_addr] Pool: $SSO_PROD_ePaymPay_GLOBAL_poolName"
		}
	#}
}
}
ltm rule /Common/SSO_PROD_ePaymPay_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_ePaymPay_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	set static::SSO_PROD_ePaymPay_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team.</p></body></html>"
	set static::SSO_PROD_ePay_URI_Pool_Map
	{
        "^/epay/images/====SSO_PROD_ePayAdmin"
		"^/epay/styles/====SSO_PROD_ePayAdmin"
		"^/epay/scripts/====SSO_PROD_ePayAdmin"
		"^/epay/Common/====SSO_PROD_ePayAdmin"
		"^/epay/ServiceProvider\$====SSO_PROD_ePayAdmin"
		"^/epay/ServiceProvider/====SSO_PROD_ePayAdmin"
		"^/epay(/.*)?\$====SSO_PROD_ePayAdmin"
	}

    set static::SSO_PROD_mPay_URI_Pool_Map
	{
		"^/mPayAdmin(/)?\$====SSO_PROD_mPayAdmin"
		"^/mPay-Reporter(/.*)?\$====SSO_PROD_mPayAdmin"
	}
}

when HTTP_REQUEST {

	if { $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0 } {

		set SSO_PROD_ePaymPay_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] {    
			"epayadmin.dubai.gov.ae" 
			{
				#if {not [class match [IP::client_addr] equals $static::SSO_PROD_ePaymPay_GLOBAL_ePay_AllowedIPs]} {
				#	set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1

				#	HTTP::respond 200 content $static::SSO_PROD_ePaymPay_Sorry

					#HTTP::uri "/sites/maintenance/epay/iperror.aspx"
					#HTTP::header replace "host:" "www.dsg.gov.ae"
					#HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
					#HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"
					#pool "grpMaintenance_pool"
					#persist cookie insert ePayAdmin_AuxPool
				#}

				set SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class "SSO_PROD_ePayAdmin"		
				#..........Pool Selection.........................................................
				foreach SSOePayAdmin_mappingRecord $static::SSO_PROD_ePay_URI_Pool_Map
				{
					set SSOePayAdmin_mapping_uri [getfield $SSOePayAdmin_mappingRecord "====" 1]
					set SSOePayAdmin_mapping_poolName [getfield $SSOePayAdmin_mappingRecord "====" 2]

					if {[regexp $SSOePayAdmin_mapping_uri $SSO_PROD_ePaymPay_GLOBAL_URI] == 1}
					{
						set SSO_PROD_ePaymPay_GLOBAL_poolName $SSOePayAdmin_mapping_poolName
						break
					}
				}
				#.................................................................................
				if { $SSO_PROD_ePaymPay_GLOBAL_poolName equals "SSO_PROD_ePayAdmin" } {
					if { ($static::SSO_PROD_ePaymPay_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
						set SSO_PROD_ePaymPay_GLOBAL_poolName "SSO_PROD_ePay_Admin"
					}
					pool $SSO_PROD_ePaymPay_GLOBAL_poolName
					persist cookie insert SSO_PROD_ePayAdmin 0
				} else {
					drop
				}			
			}

			"mpayadmin.dubai.gov.ae" 
			{
				set SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class "SSO_PROD_mPayAdmin"		
				#..........Pool Selection.........................................................
				foreach SSOmPayAdmin_mappingRecord $static::SSO_PROD_mPay_URI_Pool_Map
				{
					set SSOmPayAdmin_mapping_uri [getfield $SSOmPayAdmin_mappingRecord "====" 1]
					set SSOmPayAdmin_mapping_poolName [getfield $SSOmPayAdmin_mappingRecord "====" 2]

					if {[regexp $SSOmPayAdmin_mapping_uri $SSO_PROD_ePaymPay_GLOBAL_URI] == 1}
					{
						set SSO_PROD_ePaymPay_GLOBAL_poolName $SSOmPayAdmin_mapping_poolName
						break
					}
				}
				#.................................................................................
				if { $SSO_PROD_ePaymPay_GLOBAL_poolName equals "SSO_PROD_mPayAdmin" } {
					if { ($static::SSO_PROD_ePaymPay_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
						set SSO_PROD_ePaymPay_GLOBAL_poolName "SSO_PROD_mPay_Admin"
					}
					pool $SSO_PROD_ePaymPay_GLOBAL_poolName
					persist cookie insert SSO_PROD_mPayAdmin 0
				} else {
					drop
				}
			}


			default
			{
				# No default Pool
				set SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL 1
				#HTTP::uri "<html><head></head><body><p>Access Denied...!!! For assistance contact DSG Support Team.</p></body></html>"	
			}
		} 	
	}
}

when HTTP_RESPONSE {
	if { $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0 } {
		set SSO_PROD_ePaymPay_myCookies [HTTP::cookie names]
		foreach SSO_PROD_ePaymPay_myCookieVal $SSO_PROD_ePaymPay_myCookies {
			HTTP::cookie secure $SSO_PROD_ePaymPay_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_ePaymPay_Rewrite_epay {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_ePaymPay_epay_request_uri
	{
	}
	set static::SSO_PROD_ePaymPay_epay_request_host
	{
	} 
	set static::SSO_PROD_ePaymPay_epay_request_referer
	{
	}
	set static::SSO_PROD_ePaymPay_epay_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_ePaymPay_epay_response_setCookie
	{
	}
	set static::SSO_PROD_ePaymPay_epay_response_location
	{
		"http://epayadmin.dubai.gov.ae====https://epayadmin.dubai.gov.ae"
		"http://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
		"https://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_ePaymPay_epay_response_contentLocation
	{
		"http://epayadmin.dubai.gov.ae====https://epayadmin.dubai.gov.ae"
		"http://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
		"https://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_ePaymPay_epay_response_body
	{
		"http://epayadmin.dubai.gov.ae====https://epayadmin.dubai.gov.ae"
		"http://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
		"https://epayment.dubai.ae====https://epayadmin.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_ePayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {

        if { [catch {HTTP::header remove Accept-Encoding } result] } {
	        #log local0. "fffffffffff $result"
	    }

		#-----------------
		#URI
		#-----------------
		if {[llength $static::SSO_PROD_ePaymPay_epay_request_uri] > 0}
		{
		set SSO_PROD_ePaymPay_epay_request_val [HTTP::uri]
		foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_request_uri
		{
			set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_epay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
		}
		if { [catch {HTTP::uri $SSO_PROD_ePaymPay_epay_request_val	} result] }
		{
		#	log local0. "fffffffffff $result"
		}

		}
		#-----------------
		#Host
		#-----------------
		if {[llength $static::SSO_PROD_ePaymPay_epay_request_host] > 0}
		{
		if {[HTTP::header exists Host]}
		{
			set SSO_PROD_ePaymPay_epay_request_val [HTTP::host]
			foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_request_host
			{
				set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
				set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
				{
					set SSO_PROD_ePaymPay_epay_request_replace ""
				}
				regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
			}
			if { [catch {HTTP::header replace Host $SSO_PROD_ePaymPay_epay_request_val	} result] }
			{
				#	log local0. "fffffffffff $result"
			}


		}
		}
		#-----------------
		#Referer
		#-----------------
		if {[llength $static::SSO_PROD_ePaymPay_epay_request_referer] > 0}
		{
		if {[HTTP::header exists Referer]}
		{
			set SSO_PROD_ePaymPay_epay_request_val [HTTP::header value Referer]
			foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_request_referer
			{
				set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
				set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
				{
					set SSO_PROD_ePaymPay_epay_request_replace ""
				}

				regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
			}

			if { [catch {HTTP::header replace Referer $SSO_PROD_ePaymPay_epay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
		}
		#-----------------
		#cookies
		#-----------------
		if {[llength $static::SSO_PROD_ePaymPay_epay_request_cookie] > 0}
		{
		if {[HTTP::header exists Cookie]}
		{
			set SSO_PROD_ePaymPay_epay_request_val [HTTP::header value Cookie]
			foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_request_cookie
			{
				set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
				set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
				{
					set SSO_PROD_ePaymPay_epay_request_replace ""
				}

				regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
			}
			if { [catch {HTTP::header replace Cookie $SSO_PROD_ePaymPay_epay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
		}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_ePayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_epay_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_ePaymPay_epay_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_val_list
		{
			foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_response_setCookie
			{
				set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
				set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
				{
					set SSO_PROD_ePaymPay_epay_request_replace ""
				}
				regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_ePaymPay_epay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_epay_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_ePaymPay_epay_request_val [HTTP::header value Location]

		foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_response_location
		{
			set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_epay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_ePaymPay_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_epay_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_ePaymPay_epay_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_response_contentLocation
		{
			set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_epay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_epay_request_find $SSO_PROD_ePaymPay_epay_request_val $SSO_PROD_ePaymPay_epay_request_replace SSO_PROD_ePaymPay_epay_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_ePaymPay_epay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_ePaymPay_epay_response_body] > 0}
	{
		set SSO_PROD_ePaymPay_epay_expression ""
		foreach SSO_PROD_ePaymPay_epay_request_rewriteRecord $static::SSO_PROD_ePaymPay_epay_response_body
		{
			set SSO_PROD_ePaymPay_epay_request_find [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_epay_request_replace [getfield $SSO_PROD_ePaymPay_epay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_epay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_epay_request_replace ""
			}

			set SSO_PROD_ePaymPay_epay_expression "$SSO_PROD_ePaymPay_epay_expression@$SSO_PROD_ePaymPay_epay_request_find@$SSO_PROD_ePaymPay_epay_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_ePaymPay_epay_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_ePayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_ePaymPay_epay_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_ePaymPay_epay_theMatch"
		#log local0. "on URI: $SSO_PROD_ePaymPay_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_ePaymPay_Rewrite_mpay {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_ePaymPay_mpay_request_uri
	{
		#"^/mPayAdmin(/)?\$====/mPay-Reporter/security/login.do"
	}
	set static::SSO_PROD_ePaymPay_mpay_request_host
	{
	} 
	set static::SSO_PROD_ePaymPay_mpay_request_referer
	{
	}
	set static::SSO_PROD_ePaymPay_mpay_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_ePaymPay_mpay_response_setCookie
	{
	}
	set static::SSO_PROD_ePaymPay_mpay_response_location
	{
		"http://mpayadmin.dubai.gov.ae====https://mpayadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_ePaymPay_mpay_response_contentLocation
	{
		"http://mpayadmin.dubai.gov.ae====https://mpayadmin.dubai.gov.ae"
	}
	set static::SSO_PROD_ePaymPay_mpay_response_body
	{
		"http://mpayadmin.dubai.gov.ae====https://mpayadmin.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_mPayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_request_uri] > 0}
	{
	set SSO_PROD_ePaymPay_mpay_request_val [HTTP::uri]
	foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_request_uri
	{
		set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
		set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]
		if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
		{
			set SSO_PROD_ePaymPay_mpay_request_replace ""
		}

		regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_ePaymPay_mpay_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val [HTTP::host]
		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_request_host
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}
			regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_ePaymPay_mpay_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val [HTTP::header value Referer]
		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_request_referer
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_ePaymPay_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_request_cookie
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]

			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_ePaymPay_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_mPayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_val_list
		{
			foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_response_setCookie
			{
				set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
				set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]

				if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
				{
					set SSO_PROD_ePaymPay_mpay_request_replace ""
				}
				regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_ePaymPay_mpay_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val [HTTP::header value Location]

		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_response_location
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_ePaymPay_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_ePaymPay_mpay_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_ePaymPay_mpay_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_response_contentLocation
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}

			regsub -all $SSO_PROD_ePaymPay_mpay_request_find $SSO_PROD_ePaymPay_mpay_request_val $SSO_PROD_ePaymPay_mpay_request_replace SSO_PROD_ePaymPay_mpay_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_ePaymPay_mpay_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_ePaymPay_mpay_response_body] > 0}
	{
		set SSO_PROD_ePaymPay_mpay_expression ""
		foreach SSO_PROD_ePaymPay_mpay_request_rewriteRecord $static::SSO_PROD_ePaymPay_mpay_response_body
		{
			set SSO_PROD_ePaymPay_mpay_request_find [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 1]
			set SSO_PROD_ePaymPay_mpay_request_replace [getfield $SSO_PROD_ePaymPay_mpay_request_rewriteRecord "====" 2]
			if {$SSO_PROD_ePaymPay_mpay_request_replace == "nothing"}
			{
				set SSO_PROD_ePaymPay_mpay_request_replace ""
			}

			set SSO_PROD_ePaymPay_mpay_expression "$SSO_PROD_ePaymPay_mpay_expression@$SSO_PROD_ePaymPay_mpay_request_find@$SSO_PROD_ePaymPay_mpay_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_ePaymPay_mpay_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_ePaymPay_GLOBAL_Rewrite_Class == "SSO_PROD_mPayAdmin" and $SSO_PROD_ePaymPay_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_ePaymPay_mpay_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_ePaymPay_mpay_theMatch"
		#log local0. "on URI: $SSO_PROD_ePaymPay_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs1_80_Base {
    when RULE_INIT
{

}

when HTTP_REQUEST
{
	#set SSO_PROD_vs1_80_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] { 
        "sso.dubai.gov.ae" - "www.sso.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"  
		    if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    } 
        }
		"idm.dubai.gov.ae" - "www.idm.dubai.gov.ae"
		{
		    #log local0. "Access allowed for Host: [HTTP::host]"  
		    if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/clear" or [HTTP::uri] equals "/reports" or [HTTP::uri] equals "/admin" } {
		    	HTTP::redirect "https://idm.dubai.gov.ae[HTTP::uri]"
		    } 
        }
		"ssosp.dubai.gov.ae" - "ssosp1.dubai.gov.ae" - "ssosp2.dubai.gov.ae"
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

}
}
ltm rule /Common/SSO_PROD_vs1_Base {
    when RULE_INIT
{
    set static::SSO_PROD_vs1_ADFS_GIN_Src "ACL_SSO_PROD_GINSupernet"
    set static::SSO_PROD_vs1_ADFS_HHRC_Src "ACL_SSO_PROD_ADFS_HHRC"
	set static::SSO_PROD_vs1_ADFS_DSG_Src "ACL_SSO_PROD_ADFS_DSG"
	set static::SSO_PROD_vs1_ADFS_GINMGT_Src "ACL_SSO_PROD_ADFS_GINMGT"
	set static::SSO_PROD_vs1_ADFS_GINTest_Src "ACL_SSO_PROD_ADFS_GINTest"
}

when HTTP_REQUEST
{
	set SSO_PROD_vs1_GLOBAL_BREAK_ALL 0
	set SSO_PROD_vs1_GLOBAL_poolName ""
	set SSO_PROD_vs1_GLOBAL_Rewrite_Select ""
	set SSO_PROD_vs1_GLOBAL_URI ""


	switch [string tolower [HTTP::host]] { 
        "sso.dubai.gov.ae" - "www.sso.dubai.gov.ae" - "idm.dubai.gov.ae" - "www.idm.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ssosp.dubai.gov.ae" - "ssosp1.dubai.gov.ae" - "ssosp2.dubai.gov.ae" - "ssotoken.dubai.gov.ae"
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_vs1_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_vs1_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_PROD_vs1_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_PROD_vs1_host "" SSO_PROD_vs1_host
		HTTP::respond 302 Location "https://$SSO_PROD_vs1_host[HTTP::uri]"
		set SSO_PROD_vs1_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/SSO_PROD_vs1_Pool_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_vs1_flag_maintenance 0
}

when HTTP_REQUEST
{
	set SSO_PROD_vs1_goToMaintenance 0

	switch [string tolower [HTTP::host]] { 
        "idm.dubai.gov.ae" - "ssotoken.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"

			if { ($static::SSO_PROD_vs1_flag_maintenance == 1 and (not ([IP::client_addr] equals "213.42.50.181" ))) or ([IP::client_addr] equals "maintenance-IP") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {

				set SSO_PROD_vs1_GLOBAL_BREAK_ALL 1

				# Enable the below command & disable all others ONLY when 213.42.85.27 is down !!
				#HTTP::redirect "http://maintenance.dubai.ae"

				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
        }
    }
}
}
ltm rule /Common/SSO_PROD_vs1_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $SSO_PROD_vs1_GLOBAL_poolName != "SSO_PROD_IDM_SSL" and $SSO_PROD_vs1_GLOBAL_poolName != "SSO_PROD_idm_rep"} {
			SSL::disable
			#log local0. "SSL disabled for pool: $SSO_PROD_vs1_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/SSO_PROD_vs1_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_vs1_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	set static::SSO_PROD_vs1_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed.</p></body></html>"
}

when HTTP_REQUEST
{
	if { $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		set SSO_PROD_vs1_GLOBAL_URI [HTTP::uri]

		switch [string tolower [HTTP::host]] { 

			"sso.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					#log local0. "Access allowed for Client-IP: [IP::client_addr]"
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sso_idp"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_IDP 0
				} else {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_idp"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_idp 0
				}
				set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodidp"
			}
			"idm.dubai.gov.ae" 
			{
				if { [HTTP::uri] starts_with "/itim/console" or [HTTP::uri] starts_with "/admin" } {
					if { not [class match [IP::client_addr] equals $static::SSO_PROD_vs1_ADFS_GIN_Src]  or [IP::client_addr] equals "172.16.3.10" } {
						set SSO_PROD_vs1_GLOBAL_BREAK_ALL 1
						HTTP::respond 200 content $static::SSO_PROD_vs1_Sorry
					} else {
						if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_dga_sp"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_IDM 0
						} else {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sp_dga"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_idm 0
						}
						set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodidm"
					}
				}
				elseif { [HTTP::uri] starts_with "/ibm/" or [HTTP::uri] equals "/reports" } {
					if { not [class match [IP::client_addr] equals $static::SSO_PROD_vs1_ADFS_GIN_Src]  or [IP::client_addr] equals "172.16.3.10" } {
						set SSO_PROD_vs1_GLOBAL_BREAK_ALL 1
						drop
					} else {
						if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_idm_rep"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_IDM_REP 0
						} else {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_IDM_SSL"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_IDM_SSL 0
						}
						set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodidm"				
					}
				}
				else {	
						if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_dga_sp"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_IDM 0
						} else {
							set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sp_dga"
							pool $SSO_PROD_vs1_GLOBAL_poolName
							persist cookie insert SSO_PROD_idm 0
						}
						set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodidm"
					}
			}
			"ssosp.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_dga_sp"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_IDM 0
				} else {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sp_dga"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_idm 0
				}
				set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodspdga"
			}
			"ssosp2.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_dga_sp2"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_dga_sp2 0
				} else {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sp2_dga"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_sp2_dga 0
				}
				set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodsp2dga"	
			}
			"ssosp1.dubai.gov.ae" 
			{
				if { ($static::SSO_PROD_vs1_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_dga_sp1"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_dga_sp1 0
				} else {
					set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sp1_dga"
					pool $SSO_PROD_vs1_GLOBAL_poolName
					persist cookie insert SSO_PROD_sp1_dga 0
				}
				set SSO_PROD_vs1_GLOBAL_Rewrite_Select "SSO_PROD_sp1_dga"		
			}
			"ssotoken.dubai.gov.ae" 
			{
				set SSO_PROD_vs1_GLOBAL_poolName "SSO_PROD_sso_token"
				set SSO_PROD_vs1_GLOBAL_Rewrite_Select "ssoprodidp"
				pool $SSO_PROD_vs1_GLOBAL_poolName
				persist cookie insert SSO_PROD_OTP 0
			}
			default
			{
				# No default Pool
			}
		} 
	}

}

when HTTP_RESPONSE {
	if { $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
		set SSO_PROD_vs1_myCookies [HTTP::cookie names]
		foreach SSO_PROD_vs1_myCookieVal $SSO_PROD_vs1_myCookies {
		   HTTP::cookie secure $SSO_PROD_vs1_myCookieVal enable
			if {$SSO_PROD_vs1_myCookies == "IDP-DUBAI-GOV-AE-PD-H-SESSION-ID" } {
				HTTP::cookie domain $SSO_PROD_vs1_myCookieVal sso.dubai.gov.ae
			}
	    }   
    }
}
}
ltm rule /Common/SSO_PROD_vs1_Pool_xCookie {
    when HTTP_REQUEST {
	switch $SSO_PROD_vs1_GLOBAL_poolName {

	"SSO_PROD_sp_dga" - "SSO_PROD_dga_sp"
	{
		set SSO_PROD_ADFS_Selected "YES"
		if {$SSO_PROD_vs1_GLOBAL_URI starts_with "/STS/sps/ssospdubaigov/saml20/"} {
	    	if { not([HTTP::cookie exists "SSOChoiceCookie"] or [HTTP::cookie exists "SSO_PROD_ADFS"]) } {
		       set SSO_PROD_ADFS_Selected "NO"    
		    }
		}
	}

	default
        {
		    # No Action
	    }

	} 
}

when HTTP_RESPONSE {
    switch $SSO_PROD_vs1_GLOBAL_poolName {

	"SSO_PROD_sp_dga" - "SSO_PROD_dga_sp"
	{
		if { $SSO_PROD_ADFS_Selected == "NO" } {

			set SSO_PROD_ADFS_Select "NOADFS"
			if {[class match [IP::client_addr] equals $static::SSO_PROD_vs1_ADFS_HHRC_Src]} {
		    	set SSO_PROD_ADFS_Select "HHRC" 
		    } elseif {[class match [IP::client_addr] equals $static::SSO_PROD_vs1_ADFS_DSG_Src]} {
				set SSO_PROD_ADFS_Select "DSG" 
		    } elseif {[class match [IP::client_addr] equals $static::SSO_PROD_vs1_ADFS_GINMGT_Src]} {
				set SSO_PROD_ADFS_Select "GINMGT" 
		    }

			HTTP::cookie insert name "SSO_PROD_ADFS" value $SSO_PROD_ADFS_Select 
			HTTP::cookie secure "SSO_PROD_ADFS" enable
		}
	}

	default
        {
		    # No Action
	    }
    }
}
}
ltm rule /Common/SSO_PROD_vs1_Rewrite_idm {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs1_idm_request_uri
	{
		"^/\$====/itim/self"
		"^/admin\$====/itim/console"
		"^/clear\$====/itim/selfhelp/ClearSSOCookie.jsp"
		"^/reports\$====/ibm/console/logon.jsp"
	}
	set static::SSO_PROD_vs1_idm_request_host
	{
	} 
	set static::SSO_PROD_vs1_idm_request_referer
	{
	}
	set static::SSO_PROD_vs1_idm_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs1_idm_response_setCookie
	{
	}
	set static::SSO_PROD_vs1_idm_response_location
	{
		"http://idm.dubai.gov.ae====https://idm.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_idm_response_contentLocation
	{
		"http://idm.dubai.gov.ae====https://idm.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_idm_response_body
	{
		"http://idm.dubai.gov.ae====https://idm.dubai.gov.ae"
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidm" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idm_request_uri] > 0}
	{
	set SSO_PROD_vs1_idm_request_val [HTTP::uri]
	foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_request_uri
	{
		set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
		set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
		{
			set SSO_PROD_vs1_idm_request_replace ""
		}

		regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs1_idm_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idm_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs1_idm_request_val [HTTP::host]
		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_request_host
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}
			regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs1_idm_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idm_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs1_idm_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_request_referer
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idm_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs1_idm_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_request_cookie
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidm" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idm_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs1_idm_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_val_list
		{
			foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_response_setCookie
			{
				set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
				set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
				{
					set SSO_PROD_vs1_idm_request_replace ""
				}
				regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs1_idm_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idm_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs1_idm_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_response_location
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idm_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs1_idm_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_response_contentLocation
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idm_request_find $SSO_PROD_vs1_idm_request_val $SSO_PROD_vs1_idm_request_replace SSO_PROD_vs1_idm_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs1_idm_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs1_idm_response_body] > 0}
	{
		set SSO_PROD_vs1_idm_expression ""
		foreach SSO_PROD_vs1_idm_request_rewriteRecord $static::SSO_PROD_vs1_idm_response_body
		{
			set SSO_PROD_vs1_idm_request_find [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idm_request_replace [getfield $SSO_PROD_vs1_idm_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idm_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idm_request_replace ""
			}

			set SSO_PROD_vs1_idm_expression "$SSO_PROD_vs1_idm_expression@$SSO_PROD_vs1_idm_request_find@$SSO_PROD_vs1_idm_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs1_idm_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidm" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs1_idm_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs1_idm_theMatch"
		#log local0. "on URI: $SSO_PROD_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs1_Rewrite_idp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs1_idp_request_uri
	{
	}
	set static::SSO_PROD_vs1_idp_request_host
	{
	} 
	set static::SSO_PROD_vs1_idp_request_referer
	{
	}
	set static::SSO_PROD_vs1_idp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs1_idp_response_setCookie
	{
	}
	set static::SSO_PROD_vs1_idp_response_location
	{

		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"http://ssotoken.dubai.gov.ae====https://ssotoken.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_idp_response_contentLocation
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"http://ssotoken.dubai.gov.ae====https://ssotoken.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_idp_response_body
	{
		"http://ssosp.dubai.gov.ae====https://ssosp.dubai.gov.ae"
		"http://ssosp2.dubai.gov.ae====https://ssosp2.dubai.gov.ae"
		"http://ssosp.dsg.gov.ae====https://ssosp.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidp" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idp_request_uri] > 0}
	{
	set SSO_PROD_vs1_idp_request_val [HTTP::uri]
	foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_request_uri
	{
		set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
		set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
		{
			set SSO_PROD_vs1_idp_request_replace ""
		}

		regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs1_idp_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs1_idp_request_val [HTTP::host]
		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_request_host
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}
			regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs1_idp_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs1_idp_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_request_referer
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs1_idp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs1_idp_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_request_cookie
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidp" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs1_idp_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_val_list
		{
			foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_response_setCookie
			{
				set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
				set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
				{
					set SSO_PROD_vs1_idp_request_replace ""
				}
				regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs1_idp_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs1_idp_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_response_location
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_idp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs1_idp_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_response_contentLocation
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_idp_request_find $SSO_PROD_vs1_idp_request_val $SSO_PROD_vs1_idp_request_replace SSO_PROD_vs1_idp_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs1_idp_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs1_idp_response_body] > 0}
	{
		set SSO_PROD_vs1_idp_expression ""
		foreach SSO_PROD_vs1_idp_request_rewriteRecord $static::SSO_PROD_vs1_idp_response_body
		{
			set SSO_PROD_vs1_idp_request_find [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_idp_request_replace [getfield $SSO_PROD_vs1_idp_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_idp_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_idp_request_replace ""
			}

			set SSO_PROD_vs1_idp_expression "$SSO_PROD_vs1_idp_expression@$SSO_PROD_vs1_idp_request_find@$SSO_PROD_vs1_idp_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs1_idp_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodidp" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs1_idp_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs1_idp_theMatch"
		#log local0. "on URI: $SSO_PROD_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs1_Rewrite_sp1_dga {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs1_sp1dga_request_uri
	{
	}
	set static::SSO_PROD_vs1_sp1dga_request_host
	{
	} 
	set static::SSO_PROD_vs1_sp1dga_request_referer
	{
	}
	set static::SSO_PROD_vs1_sp1dga_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs1_sp1dga_response_setCookie
	{
	}
	set static::SSO_PROD_vs1_sp1dga_response_location
	{
		"http://ssosp1.dubai.gov.ae====https://ssosp1.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_sp1dga_response_contentLocation
	{
		"http://ssosp1.dubai.gov.ae====https://ssosp1.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_sp1dga_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "SSO_PROD_sp1_dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_request_uri] > 0}
	{
	set SSO_PROD_vs1_sp1dga_request_val [HTTP::uri]
	foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_request_uri
	{
		set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
		set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
		{
			set SSO_PROD_vs1_sp1dga_request_replace ""
		}

		regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs1_sp1dga_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs1_sp1dga_request_val [HTTP::host]
		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_request_host
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}
			regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs1_sp1dga_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs1_sp1dga_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_request_referer
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs1_sp1dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs1_sp1dga_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_request_cookie
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs1_sp1dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "SSO_PROD_sp1_dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs1_sp1dga_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_val_list
		{
			foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_response_setCookie
			{
				set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
				set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
				{
					set SSO_PROD_vs1_sp1dga_request_replace ""
				}
				regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs1_sp1dga_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs1_sp1dga_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_response_location
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs1_sp1dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp1dga_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs1_sp1dga_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_response_contentLocation
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp1dga_request_find $SSO_PROD_vs1_sp1dga_request_val $SSO_PROD_vs1_sp1dga_request_replace SSO_PROD_vs1_sp1dga_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs1_sp1dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs1_sp1dga_response_body] > 0}
	{
		set SSO_PROD_vs1_sp1dga_expression ""
		foreach SSO_PROD_vs1_sp1dga_request_rewriteRecord $static::SSO_PROD_vs1_sp1dga_response_body
		{
			set SSO_PROD_vs1_sp1dga_request_find [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp1dga_request_replace [getfield $SSO_PROD_vs1_sp1dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp1dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp1dga_request_replace ""
			}

			set SSO_PROD_vs1_sp1dga_expression "$SSO_PROD_vs1_sp1dga_expression@$SSO_PROD_vs1_sp1dga_request_find@$SSO_PROD_vs1_sp1dga_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs1_sp1dga_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "SSO_PROD_sp1_dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs1_sp1dga_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs1_sp1dga_theMatch"
		#log local0. "on URI: $SSO_PROD_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs1_Rewrite_sp2_dga {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs1_sp2dga_request_uri
	{
	}
	set static::SSO_PROD_vs1_sp2dga_request_host
	{
	} 
	set static::SSO_PROD_vs1_sp2dga_request_referer
	{
	}
	set static::SSO_PROD_vs1_sp2dga_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs1_sp2dga_response_setCookie
	{
	}
	set static::SSO_PROD_vs1_sp2dga_response_location
	{
		"http://ssosp2.dubai.gov.ae====https://ssosp2.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_sp2dga_response_contentLocation
	{
		"http://ssosp2.dubai.gov.ae====https://ssosp2.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_sp2dga_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodsp2dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_request_uri] > 0}
	{
	set SSO_PROD_vs1_sp2dga_request_val [HTTP::uri]
	foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_request_uri
	{
		set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
		set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
		{
			set SSO_PROD_vs1_sp2dga_request_replace ""
		}

		regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs1_sp2dga_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs1_sp2dga_request_val [HTTP::host]
		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_request_host
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}
			regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs1_sp2dga_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs1_sp2dga_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_request_referer
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs1_sp2dga_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_request_cookie
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodsp2dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs1_sp2dga_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_val_list
		{
			foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_response_setCookie
			{
				set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
				set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
				{
					set SSO_PROD_vs1_sp2dga_request_replace ""
				}
				regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs1_sp2dga_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs1_sp2dga_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_response_location
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_sp2dga_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs1_sp2dga_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_response_contentLocation
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_sp2dga_request_find $SSO_PROD_vs1_sp2dga_request_val $SSO_PROD_vs1_sp2dga_request_replace SSO_PROD_vs1_sp2dga_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs1_sp2dga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs1_sp2dga_response_body] > 0}
	{
		set SSO_PROD_vs1_sp2dga_expression ""
		foreach SSO_PROD_vs1_sp2dga_request_rewriteRecord $static::SSO_PROD_vs1_sp2dga_response_body
		{
			set SSO_PROD_vs1_sp2dga_request_find [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_sp2dga_request_replace [getfield $SSO_PROD_vs1_sp2dga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_sp2dga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_sp2dga_request_replace ""
			}

			set SSO_PROD_vs1_sp2dga_expression "$SSO_PROD_vs1_sp2dga_expression@$SSO_PROD_vs1_sp2dga_request_find@$SSO_PROD_vs1_sp2dga_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs1_sp2dga_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodsp2dga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs1_sp2dga_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs1_sp2dga_theMatch"
		#log local0. "on URI: $SSO_PROD_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs1_Rewrite_sp_dga {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs1_spdga_request_uri
	{
	}
	set static::SSO_PROD_vs1_spdga_request_host
	{
	} 
	set static::SSO_PROD_vs1_spdga_request_referer
	{
	}
	set static::SSO_PROD_vs1_spdga_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs1_spdga_response_setCookie
	{
	}
	set static::SSO_PROD_vs1_spdga_response_location
	{
		"http://ssosp.dubai.gov.ae====https://ssosp.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_spdga_response_contentLocation
	{
		"http://ssosp.dubai.gov.ae====https://ssosp.dubai.gov.ae"
	}
	set static::SSO_PROD_vs1_spdga_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodspdga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs1_spdga_request_uri] > 0}
	{
	set SSO_PROD_vs1_spdga_request_val [HTTP::uri]
	foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_request_uri
	{
		set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
		set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
		{
			set SSO_PROD_vs1_spdga_request_replace ""
		}

		regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs1_spdga_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs1_spdga_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs1_spdga_request_val [HTTP::host]
		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_request_host
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}
			regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs1_spdga_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs1_spdga_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs1_spdga_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_request_referer
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs1_spdga_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs1_spdga_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_request_cookie
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodspdga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_spdga_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs1_spdga_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_val_list
		{
			foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_response_setCookie
			{
				set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
				set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
				{
					set SSO_PROD_vs1_spdga_request_replace ""
				}
				regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs1_spdga_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_spdga_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs1_spdga_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_response_location
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs1_spdga_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs1_spdga_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_response_contentLocation
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}

			regsub -all $SSO_PROD_vs1_spdga_request_find $SSO_PROD_vs1_spdga_request_val $SSO_PROD_vs1_spdga_request_replace SSO_PROD_vs1_spdga_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs1_spdga_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs1_spdga_response_body] > 0}
	{
		set SSO_PROD_vs1_spdga_expression ""
		foreach SSO_PROD_vs1_spdga_request_rewriteRecord $static::SSO_PROD_vs1_spdga_response_body
		{
			set SSO_PROD_vs1_spdga_request_find [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 1]
			set SSO_PROD_vs1_spdga_request_replace [getfield $SSO_PROD_vs1_spdga_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs1_spdga_request_replace == "nothing"}
			{
				set SSO_PROD_vs1_spdga_request_replace ""
			}

			set SSO_PROD_vs1_spdga_expression "$SSO_PROD_vs1_spdga_expression@$SSO_PROD_vs1_spdga_request_find@$SSO_PROD_vs1_spdga_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs1_spdga_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs1_GLOBAL_Rewrite_Select == "ssoprodspdga" and $SSO_PROD_vs1_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs1_spdga_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs1_spdga_theMatch"
		#log local0. "on URI: $SSO_PROD_vs1_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	#set SSO_PROD_vs2_80_GLOBAL_BREAK_ALL 0


	switch [string tolower [HTTP::host]] { 

        "ssosp.dsg.gov.ae" - "ssosp.deg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }
		"ssosp.dubai.ae" 
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }
		"ssosp.dghr.gov.ae" - "ssosp.dof.gov.ae" - "ssosp.fad.gov.ae" 
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    }
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }

}
}
ltm rule /Common/SSO_PROD_vs2_Base {
    when RULE_INIT
{
	set static::SSO_PROD_vs2_ADFS_HHRC_Src "ACL_SSO_PROD_ADFS_HHRC"
	set static::SSO_PROD_vs2_ADFS_GINTest_Src "ACL_SSO_PROD_ADFS_GINTest"
}

when HTTP_REQUEST
{
	set SSO_PROD_vs2_GLOBAL_BREAK_ALL 0
	set SSO_PROD_vs2_GLOBAL_poolName ""
	set SSO_PROD_vs2_GLOBAL_Rewrite_Select ""
	set SSO_PROD_vs2_GLOBAL_URI ""


	switch [string tolower [HTTP::host]] { 
        "ssosp.dsg.gov.ae" - "ssosp.deg.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]" 
        }
		"ssosp.dubai.ae" 
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
        }
		"ssosp.dghr.gov.ae" - "ssosp.dof.gov.ae" - "ssosp.fad.gov.ae" 
	    {
	        #log local0. "Access allowed for Host: [HTTP::host]"
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_vs2_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_vs2_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_PROD_vs2_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_PROD_vs2_host "" SSO_PROD_vs2_host
		HTTP::respond 302 Location "https://$SSO_PROD_vs2_host[HTTP::uri]"
		set SSO_PROD_vs2_GLOBAL_BREAK_ALL 1
	}

}
}
ltm rule /Common/SSO_PROD_vs2_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_vs2_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::SSO_PROD_vs2_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

	set SSO_PROD_vs2_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"ssosp.dsg.gov.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_dsg_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_dsg"
		}
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspdsg"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_dsg 0
	}
	"ssosp.deg.gov.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_deg_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_deg"
		}	
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspdeg"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_deg 0
	}
	"ssosp.dubai.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_dubai_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_dubai"
		}		
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspdubai"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_dubai 0
	}
	"ssosp.dghr.gov.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_dghr_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_dghr"
		}		
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspdghr"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_dghr 0
	}
	"ssosp.dof.gov.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_dof_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_dof"
		}
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspdof"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_dof 0
	}
	"ssosp.fad.gov.ae" 
	{
		if { ($static::SSO_PROD_vs2_SAM8_Enable == 1) and ([class match [IP::client_addr] equals $static::HHRC_Public_IPs]) } {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_fad_sp"
		} else {
			set SSO_PROD_vs2_GLOBAL_poolName "SSO_PROD_sp_fad"
		}
		set SSO_PROD_vs2_GLOBAL_Rewrite_Select "ssoprodspfad"
		pool $SSO_PROD_vs2_GLOBAL_poolName
	   	persist cookie insert SSO_PROD_sp_fad 0
	}

	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
	if { $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
		set SSO_PROD_vs2_myCookies [HTTP::cookie names]
		foreach SSO_PROD_vs2_myCookieVal $SSO_PROD_vs2_myCookies {
			HTTP::cookie secure $SSO_PROD_vs2_myCookieVal enable
		}
    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_deg {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdeg_request_uri
	{
	}
	set static::SSO_PROD_vs2_spdeg_request_host
	{
	} 
	set static::SSO_PROD_vs2_spdeg_request_referer
	{
	}
	set static::SSO_PROD_vs2_spdeg_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdeg_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spdeg_response_location
	{
		"http://ssosp.deg.gov.ae====https://ssosp.deg.gov.ae"
	}
	set static::SSO_PROD_vs2_spdeg_response_contentLocation
	{
		"http://ssosp.deg.gov.ae====https://ssosp.deg.gov.ae"
	}
	set static::SSO_PROD_vs2_spdeg_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdeg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdeg_request_uri] > 0}
	{
	set SSO_PROD_vs2_spdeg_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_request_uri
	{
		set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spdeg_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spdeg_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdeg_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spdeg_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_request_host
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spdeg_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdeg_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spdeg_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_request_referer
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spdeg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdeg_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spdeg_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_request_cookie
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spdeg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdeg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdeg_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spdeg_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_val_list
		{
			foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_response_setCookie
			{
				set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spdeg_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spdeg_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdeg_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spdeg_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_response_location
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spdeg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdeg_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spdeg_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_response_contentLocation
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdeg_request_find $SSO_PROD_vs2_spdeg_request_val $SSO_PROD_vs2_spdeg_request_replace SSO_PROD_vs2_spdeg_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spdeg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spdeg_response_body] > 0}
	{
		set SSO_PROD_vs2_spdeg_expression ""
		foreach SSO_PROD_vs2_spdeg_request_rewriteRecord $static::SSO_PROD_vs2_spdeg_response_body
		{
			set SSO_PROD_vs2_spdeg_request_find [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdeg_request_replace [getfield $SSO_PROD_vs2_spdeg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdeg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdeg_request_replace ""
			}

			set SSO_PROD_vs2_spdeg_expression "$SSO_PROD_vs2_spdeg_expression@$SSO_PROD_vs2_spdeg_request_find@$SSO_PROD_vs2_spdeg_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spdeg_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdeg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spdeg_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spdeg_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_dghr {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdghr_request_uri
	{
	}
	set static::SSO_PROD_vs2_spdghr_request_host
	{
	} 
	set static::SSO_PROD_vs2_spdghr_request_referer
	{
	}
	set static::SSO_PROD_vs2_spdghr_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdghr_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spdghr_response_location
	{
		"http://ssosp.dghr.gov.ae====https://ssosp.dghr.gov.ae"
	}
	set static::SSO_PROD_vs2_spdghr_response_contentLocation
	{
		"http://ssosp.dghr.gov.ae====https://ssosp.dghr.gov.ae"
	}
	set static::SSO_PROD_vs2_spdghr_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdghr" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdghr_request_uri] > 0}
	{
	set SSO_PROD_vs2_spdghr_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_request_uri
	{
		set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spdghr_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spdghr_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdghr_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spdghr_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_request_host
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spdghr_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdghr_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spdghr_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_request_referer
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spdghr_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdghr_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spdghr_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_request_cookie
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spdghr_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdghr" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdghr_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spdghr_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_val_list
		{
			foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_response_setCookie
			{
				set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spdghr_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spdghr_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdghr_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spdghr_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_response_location
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spdghr_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdghr_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spdghr_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_response_contentLocation
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdghr_request_find $SSO_PROD_vs2_spdghr_request_val $SSO_PROD_vs2_spdghr_request_replace SSO_PROD_vs2_spdghr_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spdghr_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spdghr_response_body] > 0}
	{
		set SSO_PROD_vs2_spdghr_expression ""
		foreach SSO_PROD_vs2_spdghr_request_rewriteRecord $static::SSO_PROD_vs2_spdghr_response_body
		{
			set SSO_PROD_vs2_spdghr_request_find [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdghr_request_replace [getfield $SSO_PROD_vs2_spdghr_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdghr_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdghr_request_replace ""
			}

			set SSO_PROD_vs2_spdghr_expression "$SSO_PROD_vs2_spdghr_expression@$SSO_PROD_vs2_spdghr_request_find@$SSO_PROD_vs2_spdghr_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spdghr_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdghr" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spdghr_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spdghr_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_dof {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdof_request_uri
	{
	}
	set static::SSO_PROD_vs2_spdof_request_host
	{
	} 
	set static::SSO_PROD_vs2_spdof_request_referer
	{
	}
	set static::SSO_PROD_vs2_spdof_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdof_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spdof_response_location
	{
		"http://ssosp.dof.gov.ae====https://ssosp.dof.gov.ae"
	}
	set static::SSO_PROD_vs2_spdof_response_contentLocation
	{
		"http://ssosp.dof.gov.ae====https://ssosp.dof.gov.ae"
	}
	set static::SSO_PROD_vs2_spdof_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdof" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdof_request_uri] > 0}
	{
	set SSO_PROD_vs2_spdof_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_request_uri
	{
		set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spdof_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spdof_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdof_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spdof_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_request_host
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spdof_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdof_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spdof_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_request_referer
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spdof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdof_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spdof_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_request_cookie
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spdof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdof" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdof_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spdof_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_val_list
		{
			foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_response_setCookie
			{
				set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spdof_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spdof_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdof_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spdof_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_response_location
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spdof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdof_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spdof_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_response_contentLocation
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdof_request_find $SSO_PROD_vs2_spdof_request_val $SSO_PROD_vs2_spdof_request_replace SSO_PROD_vs2_spdof_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spdof_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spdof_response_body] > 0}
	{
		set SSO_PROD_vs2_spdof_expression ""
		foreach SSO_PROD_vs2_spdof_request_rewriteRecord $static::SSO_PROD_vs2_spdof_response_body
		{
			set SSO_PROD_vs2_spdof_request_find [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdof_request_replace [getfield $SSO_PROD_vs2_spdof_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdof_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdof_request_replace ""
			}

			set SSO_PROD_vs2_spdof_expression "$SSO_PROD_vs2_spdof_expression@$SSO_PROD_vs2_spdof_request_find@$SSO_PROD_vs2_spdof_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spdof_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdof" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spdof_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spdof_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_dsg {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdsg_request_uri
	{
	}
	set static::SSO_PROD_vs2_spdsg_request_host
	{
	} 
	set static::SSO_PROD_vs2_spdsg_request_referer
	{
	}
	set static::SSO_PROD_vs2_spdsg_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdsg_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spdsg_response_location
	{
		"http://ssosp.dsg.gov.ae====https://ssosp.dsg.gov.ae"
	}
	set static::SSO_PROD_vs2_spdsg_response_contentLocation
	{
		"http://ssosp.dsg.gov.ae====https://ssosp.dsg.gov.ae"
	}
	set static::SSO_PROD_vs2_spdsg_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdsg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdsg_request_uri] > 0}
	{
	set SSO_PROD_vs2_spdsg_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_request_uri
	{
		set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spdsg_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spdsg_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdsg_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spdsg_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_request_host
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spdsg_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdsg_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spdsg_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_request_referer
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spdsg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdsg_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spdsg_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_request_cookie
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spdsg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdsg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdsg_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spdsg_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_val_list
		{
			foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_response_setCookie
			{
				set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spdsg_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spdsg_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdsg_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spdsg_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_response_location
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spdsg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdsg_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spdsg_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_response_contentLocation
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdsg_request_find $SSO_PROD_vs2_spdsg_request_val $SSO_PROD_vs2_spdsg_request_replace SSO_PROD_vs2_spdsg_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spdsg_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spdsg_response_body] > 0}
	{
		set SSO_PROD_vs2_spdsg_expression ""
		foreach SSO_PROD_vs2_spdsg_request_rewriteRecord $static::SSO_PROD_vs2_spdsg_response_body
		{
			set SSO_PROD_vs2_spdsg_request_find [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdsg_request_replace [getfield $SSO_PROD_vs2_spdsg_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdsg_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdsg_request_replace ""
			}

			set SSO_PROD_vs2_spdsg_expression "$SSO_PROD_vs2_spdsg_expression@$SSO_PROD_vs2_spdsg_request_find@$SSO_PROD_vs2_spdsg_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spdsg_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdsg" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spdsg_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spdsg_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_dubai {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdubai_request_uri
	{
	}
	set static::SSO_PROD_vs2_spdubai_request_host
	{
	} 
	set static::SSO_PROD_vs2_spdubai_request_referer
	{
	}
	set static::SSO_PROD_vs2_spdubai_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spdubai_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spdubai_response_location
	{
		"http://ssosp.dubai.ae====https://ssosp.dubai.ae"
	}
	set static::SSO_PROD_vs2_spdubai_response_contentLocation
	{
		"http://ssosp.dubai.ae====https://ssosp.dubai.ae"
	}
	set static::SSO_PROD_vs2_spdubai_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdubai" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdubai_request_uri] > 0}
	{
	set SSO_PROD_vs2_spdubai_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_request_uri
	{
		set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spdubai_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spdubai_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdubai_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spdubai_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_request_host
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spdubai_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdubai_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spdubai_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_request_referer
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spdubai_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spdubai_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spdubai_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_request_cookie
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spdubai_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdubai" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdubai_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spdubai_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_val_list
		{
			foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_response_setCookie
			{
				set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spdubai_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spdubai_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdubai_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spdubai_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_response_location
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spdubai_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spdubai_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spdubai_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_response_contentLocation
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spdubai_request_find $SSO_PROD_vs2_spdubai_request_val $SSO_PROD_vs2_spdubai_request_replace SSO_PROD_vs2_spdubai_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spdubai_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spdubai_response_body] > 0}
	{
		set SSO_PROD_vs2_spdubai_expression ""
		foreach SSO_PROD_vs2_spdubai_request_rewriteRecord $static::SSO_PROD_vs2_spdubai_response_body
		{
			set SSO_PROD_vs2_spdubai_request_find [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spdubai_request_replace [getfield $SSO_PROD_vs2_spdubai_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spdubai_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spdubai_request_replace ""
			}

			set SSO_PROD_vs2_spdubai_expression "$SSO_PROD_vs2_spdubai_expression@$SSO_PROD_vs2_spdubai_request_find@$SSO_PROD_vs2_spdubai_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spdubai_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspdubai" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spdubai_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spdubai_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_vs2_Rewrite_sp_fad {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_vs2_spfad_request_uri
	{
	}
	set static::SSO_PROD_vs2_spfad_request_host
	{
	} 
	set static::SSO_PROD_vs2_spfad_request_referer
	{
	}
	set static::SSO_PROD_vs2_spfad_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_vs2_spfad_response_setCookie
	{
	}
	set static::SSO_PROD_vs2_spfad_response_location
	{
		"http://ssosp.fad.gov.ae====https://ssosp.fad.gov.ae"
	}
	set static::SSO_PROD_vs2_spfad_response_contentLocation
	{
		"http://ssosp.fad.gov.ae====https://ssosp.fad.gov.ae"
	}
	set static::SSO_PROD_vs2_spfad_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspfad" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spfad_request_uri] > 0}
	{
	set SSO_PROD_vs2_spfad_request_val [HTTP::uri]
	foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_request_uri
	{
		set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
		set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]
		if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
		{
			set SSO_PROD_vs2_spfad_request_replace ""
		}

		regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_vs2_spfad_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spfad_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_vs2_spfad_request_val [HTTP::host]
		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_request_host
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}
			regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_vs2_spfad_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spfad_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_vs2_spfad_request_val [HTTP::header value Referer]
		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_request_referer
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_vs2_spfad_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_vs2_spfad_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_vs2_spfad_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_request_cookie
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]

			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_vs2_spfad_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspfad" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spfad_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_vs2_spfad_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_val_list
		{
			foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_response_setCookie
			{
				set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
				set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]

				if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
				{
					set SSO_PROD_vs2_spfad_request_replace ""
				}
				regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_vs2_spfad_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spfad_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_vs2_spfad_request_val [HTTP::header value Location]

		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_response_location
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_vs2_spfad_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_vs2_spfad_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_vs2_spfad_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_response_contentLocation
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}

			regsub -all $SSO_PROD_vs2_spfad_request_find $SSO_PROD_vs2_spfad_request_val $SSO_PROD_vs2_spfad_request_replace SSO_PROD_vs2_spfad_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_vs2_spfad_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_vs2_spfad_response_body] > 0}
	{
		set SSO_PROD_vs2_spfad_expression ""
		foreach SSO_PROD_vs2_spfad_request_rewriteRecord $static::SSO_PROD_vs2_spfad_response_body
		{
			set SSO_PROD_vs2_spfad_request_find [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 1]
			set SSO_PROD_vs2_spfad_request_replace [getfield $SSO_PROD_vs2_spfad_request_rewriteRecord "====" 2]
			if {$SSO_PROD_vs2_spfad_request_replace == "nothing"}
			{
				set SSO_PROD_vs2_spfad_request_replace ""
			}

			set SSO_PROD_vs2_spfad_expression "$SSO_PROD_vs2_spfad_expression@$SSO_PROD_vs2_spfad_request_find@$SSO_PROD_vs2_spfad_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_vs2_spfad_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_vs2_GLOBAL_Rewrite_Select == "ssoprodspfad" and $SSO_PROD_vs2_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_vs2_spfad_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_vs2_spfad_theMatch"
		#log local0. "on URI: $SSO_PROD_vs2_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_PROD_wMail_80_Base {
    when HTTP_REQUEST
{
	#set SSO_PROD_wMail_80_GLOBAL_BREAK_ALL 0
	set Exch_wMail_Host [string tolower [HTTP::host]]

	if { $Exch_wMail_Host equals "webmail.dubai.gov.ae" or $Exch_wMail_Host equals "www.webmail.dubai.gov.ae" } {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		if { [HTTP::uri] equals "/" } {
			HTTP::redirect "https://webmail.dubai.gov.ae/"
		} elseif { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::uri] equals "/SSO_DISABLE" } {
			#log local0. "Access allowed for URI: [HTTP::uri]"
			HTTP::redirect "https://webmail.dubai.gov.ae[HTTP::uri]"
		} else {
			reject
		}
	} elseif { ($Exch_wMail_Host starts_with "webmail" or $Exch_wMail_Host starts_with "mail") and ([HTTP::uri] equals "/") } {
			HTTP::redirect "https://webmail.dubai.gov.ae/"
	} else {
		#log local0. "Access blocked for Host: [HTTP::host]"
		reject
    }
}
}
ltm rule /Common/SSO_PROD_wMail_Base {
    when RULE_INIT
{
	#set static::SSO_PROD_wMail_SSO_Bypass "ACL_PROD_SSO_Bypass"
	set static::SSO_PROD_wMail_SSO_Enable "ACL_wMail_PROD_SSO_Enable"
	set static::SSO_PROD_wMail_Maint_BypassIPs "SSO_PROD_wMail_Maint_BypassIPs"
}

when HTTP_REQUEST
{
	set SSO_PROD_wMail_Use_Cloud 1
	set SSO_PROD_wMail_GLOBAL_BREAK_ALL 0
	set SSO_PROD_wMail_GLOBAL_SSODisable 0
	set SSO_PROD_wMail_GLOBAL_poolName ""
	#set SSO_PROD_wMail_GLOBAL_Rewrite_Class ""
	set SSO_PROD_wMail_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "webmail.dubai.gov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { [HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "HMC_PROD_Webmail"]} {
				set SSO_PROD_wMail_GLOBAL_SSODisable 1
			}
        }
		"www.webmail.dubai.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set SSO_PROD_wMail_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	if { $SSO_PROD_wMail_GLOBAL_SSODisable == 0 } {
		if {not [class match [IP::client_addr] equals $static::SSO_PROD_wMail_SSO_Enable]} {
			set SSO_PROD_wMail_GLOBAL_SSODisable 1
		}
	}

	if { not ([HTTP::uri] equals "/SSO_BYPASS" or [HTTP::cookie exists "HMC_PROD_Webmail"]) } {
		if { $SSO_PROD_wMail_GLOBAL_SSODisable == 1 } {
			if { [HTTP::uri] equals "/SSO_ENABLE" or [HTTP::cookie exists "SSO_PROD_Webmail"]} {
				set SSO_PROD_wMail_GLOBAL_SSODisable 0
				#log local0. "SSO_PROD_wMail_GLOBAL_SSODisable: $SSO_PROD_wMail_GLOBAL_SSODisable"
			}
		}
	}

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/SSO_PROD_wMail_Handle_www {
    when HTTP_REQUEST
{
	if { [HTTP::host] starts_with "www\." and $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0}
	{
   		set SSO_PROD_wMail_host [HTTP::host]
		regsub -all -nocase "www\." $SSO_PROD_wMail_host "" SSO_PROD_wMail_host
		HTTP::respond 302 Location "https://$SSO_PROD_wMail_host[HTTP::uri]"
		set SSO_PROD_wMail_GLOBAL_BREAK_ALL 1
	}	
}
}
ltm rule /Common/SSO_PROD_wMail_Pool_Maintenance {
    when RULE_INIT
{
	set static::SSO_PROD_wMail_flag_maintenance 0
}

when HTTP_REQUEST {

	set SSO_PROD_wMail_goToMaintenance 0

    switch [string tolower [HTTP::host]] { 
		"webmail.dubai.gov.ae" 
		{
			if {not ([class match [IP::client_addr] equals $static::SSO_PROD_wMail_Maint_BypassIPs]) and $static::SSO_PROD_wMail_flag_maintenance == 1} {
				set SSO_PROD_wMail_goToMaintenance 1
				#log local0. "SSO_PROD_wMail_goToMaintenance = $SSO_PROD_wMail_goToMaintenance"
			}

		#	HTTP::redirect "http://maintenance.dubai.ae"
			if {$SSO_PROD_wMail_goToMaintenance == 1 or [IP::client_addr] equals "172.16.3.10" } {
				set SSO_PROD_wMail_GLOBAL_BREAK_ALL 1

				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"

				#log local0. "IP: [IP::client_addr] & Pool: $SSO_PROD_wMail_GLOBAL_poolName "
			} 

		}
	}
}
}
ltm rule /Common/SSO_PROD_wMail_Pool_SSL_Disable {
    when SERVER_CONNECTED {
	if  { $SSO_PROD_wMail_GLOBAL_poolName == "grpMaintenance_pool" } {
			SSL::disable
			#log local0. "SSL disabled for pool: $SSO_PROD_wMail_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/SSO_PROD_wMail_Pool_Select {
    when RULE_INIT
{
	#set static::SSO_PROD_wMail_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_wMail_GLOBAL_SSODisable == 1} {

	set SSO_PROD_wMail_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"webmail.dubai.gov.ae"
	{
		if { $SSO_PROD_wMail_Use_Cloud } {
			if { [HTTP::uri] starts_with "/ecp" } {
				set SSO_PROD_wMail_GLOBAL_poolName "EXCH2016_ECP"
				#set SSO_PROD_wMail_GLOBAL_poolName "HMC_PROD_Webmail"
			} else {
				set SSO_PROD_wMail_GLOBAL_poolName "EXCH2016_OWA"	
				#set SSO_PROD_wMail_GLOBAL_poolName "HMC_PROD_Webmail"
			}
		} else {	
			set SSO_PROD_wMail_GLOBAL_poolName "HMC_PROD_Webmail"
		}

		if { [HTTP::uri] equals "/SSO_BYPASS" } {
			HTTP::uri "/owa"
		} elseif { not ([HTTP::uri] starts_with "/owa" or [HTTP::uri] starts_with "/ecp" or [HTTP::uri] equals "/" ) } {
			reject
		}

		pool $SSO_PROD_wMail_GLOBAL_poolName
		persist cookie insert HMC_PROD_Webmail 0
	}

	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE
{
	if { $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_wMail_GLOBAL_SSODisable == 1} {
		set SSO_PROD_wMail_myCookies [HTTP::cookie names]
		foreach SSO_PROD_wMail_myCookieVal $SSO_PROD_wMail_myCookies {
			if { $SSO_PROD_wMail_myCookieVal equals "HMC_PROD_Webmail" or $SSO_PROD_wMail_myCookieVal equals "sessionid" } {
				HTTP::cookie secure $SSO_PROD_wMail_myCookieVal enable
			}
		}
    }
}
}
ltm rule /Common/SSO_PROD_wMail_Pool_Select_sso {
    when RULE_INIT
{
	set static::SSO_PROD_wMail_SAM8_Enable 1
	set static::HHRC_Public_IPs "HHRC_Public_IPs"
	#set static::SSO_PROD_wMail_Sorry1 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team."
}

when HTTP_REQUEST {

 if { $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_wMail_GLOBAL_SSODisable == 0} {

	set SSO_PROD_wMail_GLOBAL_URI [HTTP::uri]

    switch [string tolower [HTTP::host]] { 

	"webmail.dubai.gov.ae"
	{
		if { not ([HTTP::uri] starts_with "/owa" or [HTTP::uri] starts_with "/ecp" or [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE") } {
			reject
		} else {
			set SSO_PROD_wMail_GLOBAL_poolName "SSO_PROD_WebMail"
			pool $SSO_PROD_wMail_GLOBAL_poolName
			persist cookie insert SSO_PROD_Webmail 0
		}
	}

	default
    {
		# No default Pool
	}
  } 

}

}

when HTTP_RESPONSE {
	if { $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_wMail_GLOBAL_SSODisable == 0} {
		set SSO_PROD_wMail_myCookies [HTTP::cookie names]
		foreach SSO_PROD_wMail_myCookieVal $SSO_PROD_wMail_myCookies {
			if { $SSO_PROD_wMail_myCookieVal equals "SSO_PROD_Webmail" or $SSO_PROD_wMail_myCookieVal equals "sessionid" } {
				HTTP::cookie secure $SSO_PROD_wMail_myCookieVal enable
			}
		}
	}
}
}
ltm rule /Common/SSO_PROD_wMail_Rewrite_ssowmail {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::SSO_PROD_wMail_ssowmail_request_uri
	{
		"^/SSO_ENABLE\$====/"
	}
	set static::SSO_PROD_wMail_ssowmail_request_host
	{
	} 
	set static::SSO_PROD_wMail_ssowmail_request_referer
	{
	}
	set static::SSO_PROD_wMail_ssowmail_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::SSO_PROD_wMail_ssowmail_response_setCookie
	{
	}
	set static::SSO_PROD_wMail_ssowmail_response_location
	{
	}
	set static::SSO_PROD_wMail_ssowmail_response_contentLocation
	{
	}
	set static::SSO_PROD_wMail_ssowmail_response_body
	{
		"http://sso.dubai.gov.ae====https://sso.dubai.gov.ae"
		"\"http://ssosp.dubai.gov.ae====\"https://ssosp.dubai.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$SSO_PROD_wMail_GLOBAL_poolName == "SSO_PROD_Webmail" and $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0} {


            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }

	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_request_uri] > 0}
	{
	set SSO_PROD_wMail_ssowmail_request_val [HTTP::uri]
	foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_request_uri
	{
		set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
		set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]
		if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
		{
			set SSO_PROD_wMail_ssowmail_request_replace ""
		}

		regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
	}
	if { [catch {HTTP::uri $SSO_PROD_wMail_ssowmail_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set SSO_PROD_wMail_ssowmail_request_val [HTTP::host]
		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_request_host
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]

			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}
			regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
		}
		if { [catch {HTTP::header replace Host $SSO_PROD_wMail_ssowmail_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set SSO_PROD_wMail_ssowmail_request_val [HTTP::header value Referer]
		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_request_referer
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]

			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}

			regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
		}

		if { [catch {HTTP::header replace Referer $SSO_PROD_wMail_ssowmail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set SSO_PROD_wMail_ssowmail_request_val [HTTP::header value Cookie]
		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_request_cookie
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]

			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}

			regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
		}
		if { [catch {HTTP::header replace Cookie $SSO_PROD_wMail_ssowmail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$SSO_PROD_wMail_GLOBAL_poolName == "SSO_PROD_Webmail" and $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set SSO_PROD_wMail_ssowmail_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_val_list
		{
			foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_response_setCookie
			{
				set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
				set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]

				if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
				{
					set SSO_PROD_wMail_ssowmail_request_replace ""
				}
				regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $SSO_PROD_wMail_ssowmail_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set SSO_PROD_wMail_ssowmail_request_val [HTTP::header value Location]

		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_response_location
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]
			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}

			regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
		}
		if { [catch {HTTP::header replace Location $SSO_PROD_wMail_ssowmail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::SSO_PROD_wMail_ssowmail_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set SSO_PROD_wMail_ssowmail_request_val [HTTP::header value Content-Location]

		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_response_contentLocation
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]
			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}

			regsub -all $SSO_PROD_wMail_ssowmail_request_find $SSO_PROD_wMail_ssowmail_request_val $SSO_PROD_wMail_ssowmail_request_replace SSO_PROD_wMail_ssowmail_request_val
		}
		if { [catch {HTTP::header replace Content-Location $SSO_PROD_wMail_ssowmail_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::SSO_PROD_wMail_ssowmail_response_body] > 0}
	{
		set SSO_PROD_wMail_ssowmail_expression ""
		foreach SSO_PROD_wMail_ssowmail_request_rewriteRecord $static::SSO_PROD_wMail_ssowmail_response_body
		{
			set SSO_PROD_wMail_ssowmail_request_find [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 1]
			set SSO_PROD_wMail_ssowmail_request_replace [getfield $SSO_PROD_wMail_ssowmail_request_rewriteRecord "====" 2]
			if {$SSO_PROD_wMail_ssowmail_request_replace == "nothing"}
			{
				set SSO_PROD_wMail_ssowmail_request_replace ""
			}

			set SSO_PROD_wMail_ssowmail_expression "$SSO_PROD_wMail_ssowmail_expression@$SSO_PROD_wMail_ssowmail_request_find@$SSO_PROD_wMail_ssowmail_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $SSO_PROD_wMail_ssowmail_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

when STREAM_MATCHED
{
	if {$SSO_PROD_wMail_GLOBAL_poolName == "SSO_PROD_Webmail" and $SSO_PROD_wMail_GLOBAL_BREAK_ALL == 0} {

		#set SSO_PROD_wMail_ssowmail_theMatch [STREAM::match]

		#log local0. "match found: $SSO_PROD_wMail_ssowmail_theMatch"
		#log local0. "on URI: $SSO_PROD_wMail_GLOBAL_URI"

    }
}
}
ltm rule /Common/SSO_ShPnt2016_Pool_Select {
    when RULE_INIT
{
	set static::SSO_PROD_ShPnt_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DSG Support Team."
	set static::SSO_PROD_ShPnt_Intranet "DSG_Intranet_ACL"
}

when HTTP_REQUEST {

 if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1} {

	set SSO_PROD_ShPnt_GLOBAL_URI [HTTP::uri]

  switch [string tolower [HTTP::host]] { 

	"teams.dsg.gov.ae"
	{
		#using SharePoint 2013 serverfarm
		set SSO_PROD_ShPnt_GLOBAL_poolName "ShPnt_PROD_Pool"
		pool $SSO_PROD_ShPnt_GLOBAL_poolName
		persist cookie insert ShPnt_DSG_Teams 0

		if { [HTTP::uri] equals "/SSO_BYPASS" } {
			HTTP::uri "/"
		}
	}


	default
    {
		# No default Pool
	}
  } 

}

}


when HTTP_RESPONSE {
	if { $SSO_PROD_ShPnt_GLOBAL_BREAK_ALL == 0 and $SSO_PROD_ShPnt_GLOBAL_SSODisable == 1} {
		set SSO_PROD_ShPnt_myCookies [HTTP::cookie names]
		foreach SSO_PROD_ShPnt_myCookieVal $SSO_PROD_ShPnt_myCookies {
			HTTP::cookie secure $SSO_PROD_ShPnt_myCookieVal enable
			if { $SSO_PROD_ShPnt_myCookieVal equals "ShPnt_DSG_Teams" } {
				HTTP::cookie expires HMC_PROD_ShPnt_Teams 21600
			}
		}
    }
}
}
ltm rule /Common/STS_PROD_SSL_Base {
    when RULE_INIT
{
	set static::STS_PROD_SSL_HHRC_IPs "STS_PROD_HHRC_IPs"
	set static::STS_PROD_SSL_ADFS_HHRC_Src "ACL_SSO_PROD_ADFS_HHRC"
	set static::STS_PROD_SSL_ADFS_SDG_Src "ACL_SSO_PROD_ADFS_DSG"
}


when HTTP_REQUEST
{
	set STS_PROD_SSL_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] { 

		"sts-internal.dubai.gov.ae"
		{
			if { $STS_PROD_SSL_URI starts_with "/adfs/ls"} {
				pool "Sts-Internal_PROD_Pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} elseif {($STS_PROD_SSL_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_PROD_SSL_HHRC_IPs])} {
				pool "Sts-Internal_PROD_Pool"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

		"sts.dubai.gov.ae" 
		{
			if { $STS_PROD_SSL_URI starts_with "/adfs/ls"} {
					pool "Email_STS_ADFS_Pool"
					#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} elseif {($STS_PROD_SSL_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_PROD_SSL_HHRC_IPs])} {
				pool "Email_STS_ADFS_Pool"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

		"sts1.dubai.gov.ae" 
		{
			if { $STS_PROD_SSL_URI starts_with "/adfs" } {
					pool "STS1_PROD_Cloud"
					#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri] from [IP::client_addr]"
			} elseif {($STS_PROD_SSL_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_PROD_SSL_HHRC_IPs])} {
				pool "STS1_PROD_Cloud"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	reject
		}
    }
}
}
ltm rule /Common/STS_PROD_SSL_xCookie {
    when HTTP_REQUEST
{
	set STS_PROD_ADFS_Selected "YES"

	if { not([HTTP::cookie exists "STS_PRD_SSL_ADFS"]) } {
	   set STS_PROD_ADFS_Selected "NO"    
	}
}

when HTTP_RESPONSE
{
	if { $STS_PROD_ADFS_Selected == "NO" } {

		set STS_PRD_SSL_ADFS_Select "NULL"

		if {[class match [IP::client_addr] equals $static::STS_PROD_SSL_ADFS_HHRC_Src]} {
			set STS_PRD_SSL_ADFS_Select "HHRC" 
		} elseif {[class match [IP::client_addr] equals $static::STS_PROD_SSL_ADFS_SDG_Src]} {
			set STS_PRD_SSL_ADFS_Select "SDG" 
		}

		HTTP::cookie insert name "STS_PRD_SSL_ADFS" value $STS_PRD_SSL_ADFS_Select 
		HTTP::cookie secure "STS_PRD_SSL_ADFS" enable
	}
}
}
ltm rule /Common/ShPnt2007_PROD_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"www.dof.gov.ae" - "dof.gov.ae" -
		"www.dghr.gov.ae" - "dghr.gov.ae" - "intranet.dof.gov.ae" - "www.intranet.dof.gov.ae" - "mysite.dof.gov.ae" - "www.mysite.dof.gov.ae"
	    {

			pool "ShPnt2007_PROD_Pool"
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/ShPnt2010_PROD_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"Iphonecms.dubai.gov.ae" -
		"iphonewebservice.dubai.gov.ae" -
		"protocolforms.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/ShPnt2010_PROD_SSL_Base {
    when RULE_INIT
{
	#set static::ShPnt2010_PROD_SSL_SrcIP "GIN_Range"
	set static::ShPnt2010_PROD_SSL_Maint_flag 1
	#set static::ShPnt2010_PROD_SSL_Sorry1 "<html><head></head><body><p>Access Denied...!!! Yor IP address is not allowed.</p></body></html>"
}

when HTTP_REQUEST
{
	set ShPnt2010_PROD_SSL_GLOBAL_BREAK_ALL 0

	if { ($static::ShPnt2010_PROD_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

		set ShPnt2010_PROD_SSL_GLOBAL_BREAK_ALL 1
		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]] {
			"iphonecms.dubai.gov.ae" -
			"iphonewebservice.dubai.gov.ae" -
			"protocolforms.dubai.gov.ae"
			{
				pool "HMC_PROD_ShPnt"
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#pool "HMC_NET_QA_Pool"
				drop
			}
		}
	}
}
}
ltm rule /Common/ShPnt2013_PROD_Base {
    when RULE_INIT
{
	# ShPnt 2013 websites with NO SSL
	set static::ShPnt2013_Maint_flag 0
}

when HTTP_REQUEST
{
	if { ($static::ShPnt2013_Maint_flag == 1 and (not ([IP::client_addr] equals "213.42.50.181"))) or ([IP::client_addr] equals "MP_Enabled_IP") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {

		HTTP::redirect "http://maintenance.dubai.ae"
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]]
		{ 				
			"gitex.dubai.ae" - "slc.dubai.gov.ae" - "fad.gov.ae" - "www.fad.gov.ae" - "xn--lgbbbaaaffdc0d0ac2v2agbq1h.xn--mgbaam7a8h" - "xn-----7sddcabagged0e4ad6y6ahbs1i.xn--mgbaam7a8h"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"	
				pool "ShPnt2013_PROD_Pool"	
			}
			"www.dsg.gov.ae" - "dsg.gov.ae" - "askdubai.dubai.ae" - "dji.gov.ae" - "www.dji.gov.ae" - "smartgov.dubai"
			{	
				pool "ShPnt2013_PROD_Pool"	
			}
			"www.deg.gov.ae" - "deg.gov.ae" - "admin.dji.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"	
				HTTP::redirect "http://www.dsg.gov.ae[HTTP::uri]"
			}

			"www.legal.dubai.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"	
				HTTP::redirect "http://legal.dubai.gov.ae"
			}

			"legal.dubai.gov.ae" - "www.maktouminitiative.ae" - "maktouminitiative.ae"
			{
				pool "ShPnt2013_PROD_Pool"	
			}

			"daafcs.gov.ae" - "www.daafcs.gov.ae" - "xn--mgbe7eraalp.xn--ngbn6f.xn--mgbaam7a8h" - "legalsite.dubai.gov.ae" - "www.legal.dubai.gov.ae:80"
			{
				pool "ShPnt2013_PROD_Pool"
			}
			"grpportal.dubai.gov.ae"
			{
				pool "ShPnt2013_PROD_Pool"	
			}

			"www.dghr.gov.ae" - "dghr.gov.ae" - "xn-----btdabgbg4cfpe2bzqfk5c5be.xn--mgbaam7a8h"
			{
				pool "ShPnt2013_PROD_Pool"	
			}

			"legalws.dubaigov.local"
			{
				# allowed only for GSB servers
				if { [IP::client_addr] equals "213.42.56.171" or [IP::client_addr] equals "213.42.56.170" } {
					pool "ShPnt2013_PROD_Pool"
				}
				else {
					drop
				}
			}
			"www.dubai.ae" - "dubai.ae" - "xn--ngbn6f.xn--mgbaam7a8h"
			{
				pool "ShPnt2013_PROD_Pool"
			}

			"www.kf.gov.ae" - "kf.gov.ae" - "www.eipa.ae" - "eipa.ae" - "rid.ae" - "www.rid.ae"
			{
				pool "ShPnt2013_PROD_Pool"
			}

			"www.dof.gov.ae"
			{
				if {[HTTP::uri] equals "/ar-sa/_layouts/15/viewlsts.aspx" or [HTTP::uri] equals "/en-us/_layouts/15/viewlsts.aspx"} {
					if {[IP::client_addr] equals "213.42.50.180" or [IP::client_addr] equals "213.42.50.181" or ([IP::client_addr] equals "213.42.50.172")} {
						pool "ShPnt2013_PROD_Pool"
					} else {
						drop
					}
				} else {
					pool "ShPnt2013_PROD_Pool"
				}
				#persist cookie insert ShPnt 0
			}

			"dof.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"	
				HTTP::redirect "http://www.dof.gov.ae[HTTP::uri]"
			}

			"www.sdg.gov.ae" - "sdg.gov.ae"
			{
				pool "ShPnt2013_PROD_Pool"
				persist cookie insert SDG 0
			}
			"mobileapp.dof.gov.ae"
			{

				if { [string tolower [HTTP::uri]] contains "/dof_" or [string tolower [HTTP::uri]] contains ".jpg" or [string tolower [HTTP::uri]] contains ".pdf"} {
					pool "ShPnt_PROD_Pool_DoF"
					persist cookie insert mobiApp 0
				}	
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#set ShPnt2013_PROD_GLOBAL_BREAK_ALL 1
				drop
			}
		}
	}

	#STREAM::disable
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt2013_PROD_DOF_TMP {
    when HTTP_REQUEST
{
	set ShPnt_DOF_TMP_URI [HTTP::uri]
	set ShPnt_DOF_TMP_NewURI ""

	if { [string tolower [HTTP::host]] equals "www.dof.gov.ae" - "dof.gov.ae" } {

		#log local0. "Access allowed for Host: [HTTP::host]"
		switch -glob $ShPnt_DOF_TMP_URI
		{
			"/node2/*"
			{ 

				pool "ShPnt_PROD_Pool_DoF_74"
				persist cookie insert Node_2 0
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				pool "ShPnt_PROD_Pool_DoF"
				persist cookie insert Node_1 0
			}
		}
	} else {
		drop
	}
}
}
ltm rule /Common/ShPnt2013_SSL_80_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"secureportal.dubai.gov.ae" - "happinessportal.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		"happinessportal.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://happinessportal.dubai.ae"
		    #} else {
			#	drop
			#}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/ShPnt2013_SSL_Base {
    when RULE_INIT
{
	#set static::ShPnt2013_SSL_SrcIP "GIN_Range"
	set static::ShPnt2013_SSL_Maint_flag 0
	#set static::ShPnt2013_SSL_Sorry1 "<html><head></head><body><p>Access Denied...!!! Yor IP address is not allowed.</p></body></html>"
}

when HTTP_REQUEST
{
	set ShPnt2013_SSL_GLOBAL_BREAK_ALL 0

	if { ($static::ShPnt2013_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172") } {

		set ShPnt2013_SSL_GLOBAL_BREAK_ALL 1
		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]] {
			"secureportal.dubai.gov.ae"
			{
				pool "ShPnt2013_PROD_Pool"
			}

			"happinessportal.dubai.gov.ae"
			{
				HTTP::redirect "https://happinessportal.dubai.ae"
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#pool "HMC_NET_QA_Pool"
				drop
			}
		}
	}
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_2016_Base {
    when RULE_INIT
{
	#set static::ShPnt2016_SSL_SrcIP "GIN_Range"
	set static::ShPnt2016_SSL_Maint_flag 1

}

when HTTP_REQUEST
{
	set ShPnt2016_SSL_GLOBAL_BREAK_ALL 0

	if { ($static::ShPnt2016_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

		set ShPnt2016_SSL_GLOBAL_BREAK_ALL 1
		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]] {

			"sp.dubai.gov.ae"
			{
				#HTTP::redirect "https://sp.dubai.gov.ae"
				pool "ShPnt2016_PROD_Pool"
				persist cookie insert ShPnt16_PROD_cookie 0
			}

			"teams.dsg.gov.ae" - "www.teams.dsg.gov.ae" 
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				if { [HTTP::uri] equals "/" or [HTTP::uri] equals "/SSO_ENABLE" } {
					HTTP::redirect "https://teams.dsg.gov.ae[HTTP::uri]"
				}
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#pool "HMC_NET_QA_Pool"
				drop
			}
		}
	}
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_2016_SSL_Base {
    when RULE_INIT
{

	set static::ShPnt2016_SSL_Maint_flag 1

}

when HTTP_REQUEST
{
	set ShPnt2016_SSL_GLOBAL_BREAK_ALL 0

	if { ($static::ShPnt2016_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

		set ShPnt2016_SSL_GLOBAL_BREAK_ALL 1
		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]] {
			"sp.dubai.gov.ae"
			{
				pool "ShPnt2016_PROD_Pool"
				persist cookie insert ShPnt16_PROD_cookie 0
			}


			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#pool "HMC_NET_QA_Pool"
				drop
			}
		}
	}
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_Admins_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] { 
        "admin.ambulance.gov.ae" - "admin.askdubai.dubai.ae" 
	    {
		    if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
        }

		"admin.dghr.gov.ae" - "admin.dji.gov.ae" - "admin.dtc.dubai.ae" - "admin.dubaicustoms.gov.ae" - "admin.dubaipubliclibrary.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.eipa.ae" - "admin.emodhesh.ae" - "admin.fad.gov.ae" - "admin.dof.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.gitex.dubai.ae" - "admin.isc.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.kf.gov.ae" - "admin.legal.dubai.gov.ae" - "admin.gitex.dubai.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.maktouminitiative.ae" - "admin.mbrf.ae" - "admin.protocol.dubai.ae" - "admin.sikka.ae" - "admin.sikkaartfair.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.uaenationalday.ae" - "admin.dubai.ae" - "admin.dsg.gov.ae" - "admin.slc.dubai.gov.ae" - "admin.tst.dubai.gov.ae" - "admin.rid.ae" - "admin.sdg.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"admin.daafcs.gov.ae" - "admin.happinessportal.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

		"spadmin.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/") } {
				HTTP::redirect "https://[HTTP::host]"
			}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/ShPnt_Admins_SSL_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] { 
        "admin.ambulance.gov.ae" 
	    {
			pool "HMC_PROD_ShPnt"
        }

		"admin.dtc.dubai.ae" - "admin.dubaicustoms.gov.ae" - "admin.dubaipubliclibrary.ae"
		{
			pool "HMC_PROD_ShPnt"
		}

		"admin.dof.gov.ae"
		{
			#pool "ShPnt2007_PROD_Pool"
			pool "ShPnt_PROD_Pool_DoF"
		}

		"admin.dghr.gov.ae" - "admin.dji.gov.ae"
		{
			pool "ShPnt_PROD_Pool"
		}

		"admin.emodhesh.ae" 
		{
			pool "HMC_PROD_ShPnt"
		}

		"admin.eipa.ae" - "admin.rid.ae"
		{
			pool "ShPnt_PROD_Pool"
		}

		"admin.isc.dubai.gov.ae"
		{
			pool "HMC_PROD_ShPnt"
		}

		"admin.uaenationalday.ae"
		{
			pool "HMC_PROD_ShPnt"
		}

		"admin.kf.gov.ae" - "admin.happinessportal.dubai.gov.ae"
		{
			pool "ShPnt_PROD_Pool"
		}

		"admin.maktouminitiative.ae" - "admin.mbrf.ae" - "admin.protocol.dubai.ae" - "admin.sikka.ae" - "admin.sikkaartfair.ae" 
		{
			pool "HMC_PROD_ShPnt"
		}

		"admin.dubai.ae"
		{
			if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.48.180" or [IP::client_addr] equals "213.42.50.180") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {
				pool "ShPnt_PROD_Pool"
			}
		}

		"admin.dsg.gov.ae" - "admin.gitex.dubai.ae" - "admin.askdubai.dubai.ae" - "admin.sdg.gov.ae"
		{
			# SharePoint 2013 pool
			if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.48.180" or [IP::client_addr] equals "213.42.50.180") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {
				pool "ShPnt_PROD_Pool"
			}
		}

		"admin.gitex.dubai.ae" - "admin.slc.dubai.gov.ae" - "admin.daafcs.gov.ae" - "admin.legal.dubai.gov.ae" - "admin.fad.gov.ae" 
		{
			# SharePoint 2013 pool
			pool "ShPnt_PROD_Pool"
		}

		"spadmin.dubai.gov.ae"
		{
			# SharePoint 2013 pool
			if { ([IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "213.42.48.180" or [IP::client_addr] equals "213.42.50.180") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172") } {
				pool "ShPnt2016_PROD_Pool"
			}
		}
    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }
}
}
ltm rule /Common/ShPnt_PROD_80_Base {
    when RULE_INIT
{
	# ShPnt 2010 websites with NO SSL
}

when HTTP_REQUEST
{
	#set ShPnt_PROD_80_GLOBAL_BREAK_ALL 0
	#set ShPnt_PROD_80_GLOBAL_poolName ""

	set ShPnt_PROD_80_GLOBAL_URI "[string tolower [HTTP::uri]]"

	if { $ShPnt_PROD_80_GLOBAL_URI contains "/___layouts" or $ShPnt_PROD_80_GLOBAL_URI contains "/___vti_bin" } {
		drop
	}
	else {
		switch [string tolower [HTTP::host]] { 
			"www.ambulance.gov.ae" - "ambulance.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.dubai.ae" - "dubai.ae" - "xn--ngbn6f.xn--mgbaam7a8h"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				if { [HTTP::uri] equals "/en.portal" } {
					HTTP::redirect "http://[HTTP::host]/en/pages/default.aspx"
				}
				elseif { [HTTP::uri] equals "/ar.portal" } {
					HTTP::redirect "http://[HTTP::host]/ar/pages/default.aspx"
				}
				elseif { [HTTP::uri] equals "/" } {
					HTTP::redirect "http://[HTTP::host]/pages/default.aspx"
				}
				else {
					pool "HMC_PROD_ShPnt"
					persist cookie insert HMCPRDSP 0
				}
			}

			"www.sikka.ae" - "sikka.ae" - "www.sikkaartfair.ae" - "sikkaartfair.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.fad.gov.ae" - "fad.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.emodhesh.ae" - "emodhesh.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.dubaicustoms.ae" - "dubaicustoms.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				HTTP::redirect "https://www.dubaicustoms.gov.ae"

			}

			"www.dubaicustoms.ae" - "dubaicustoms.ae" - "www.dubaicustoms.gov.ae" - "dubaicustoms.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				if { [HTTP::uri] equals "/" } {
					HTTP::redirect "https://[HTTP::host]/ar/Pages/default.aspx"
				} else {
					HTTP::redirect "https://[HTTP::host][HTTP::uri]"
				}
			}

			"www.dxbcustoms.gov.ae" - "dxbcustoms.gov.ae" - "xn----ymcenrk0kna5c.xn--mgbaam7a8h" 
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}



			"www.eipa.ae" - "eipa.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"e4all.dubai.ae" - "dxbprotocolweb.dubai.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert ShPnt_PROD_cookie 0
			}

			"www.dubaiculture.ae" - "dubaiculture.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.uaenationalday.ae" - "uaenationalday.ae" - "xn----ymcb8d0ccemmeqi.xn--mgbaam7a8h"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.dubaipubliclibrary.ae" - "dubaipubliclibrary.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"lad.dubai.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"isc.dubai.gov.ae" - "mobile.dubai.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				if { [HTTP::uri] contains "/_vti_bin" } {
					HTTP::respond 200 content "<html><head></head><body><p>!!! IP Address NOT Allowed, Sorry for any convenience...!!! </p></body></html>"
				}
				else {	
					pool "HMC_PROD_ShPnt"
					persist cookie insert HMCPRDSP 0
				}	
			}

			"www.kf.gov.ae" - "kf.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"www.dof.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "ShPnt2007_PROD_Pool"
				persist cookie insert SPPRD 0
			}

			"www.dghr.gov.ae" - "dghr.gov.ae" - "xn-----btdabgbg4cfpe2bzqfk5c5be.xn--mgbaam7a8h"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "ShPnt2007_PROD_Pool"
				persist cookie insert SPPRD 0
			}

			"lad.ae" - "lad.gov.ae" - "legal.gov.ae" - "legaldepartment.dubai.gov.ae" - "www.lad.ae" - "www.lad.gov.ae" - "www.legal.dubai.gov.ae" - "www.legal.gov.ae" - "www.legaldepartment.dubai.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				HTTP::redirect "http://legal.dubai.gov.ae"
			}

			"www.mbrf.ae" - "mbrf.ae" - "mbrfoundation.ae" - "www.mbrfoundation.ae" - "maktouminitiative.ae" - "www.maktouminitiative.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"		
				pool "HMC_PROD_ShPnt"
				persist cookie insert HMCPRDSP 0
			}

			"m.dubaicustoms.gov.ae" - "mobile.dubaicustoms.ae"
			{
				HTTP::redirect "http://www.dubaicustoms.gov.ae/en/mobile/Pages/default.aspx"
			}

			"dtc.dubai.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				HTTP::redirect "http://www.dubaitaxi.ae"
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#set ShPnt_PROD_80_GLOBAL_BREAK_ALL 1
				drop
			}
		}
	}

	#STREAM::disable
}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_PROD_443_Tmp {
    when RULE_INIT
{

}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] { 

			"www.dubaicustoms.ae" - "dubaicustoms.ae" - "www.dubaicustoms.gov.ae" - "dubaicustoms.gov.ae" - "www.dxbcustoms.gov.ae" - "dxbcustoms.gov.ae" - "xn----ymcenrk0kna5c.xn--mgbaam7a8h" 
			{
				#log local0. "Access allowed for Host: [HTTP::host]"

				pool "HMC_PROD_ShPnt"
				#persist cookie insert HMCPRDSP 0
			}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
			drop
        }
    }

}

when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_QA_80_Base {
    when RULE_INIT
{
	set static::ShPntQA_QA_80_Sorry1 "<html><head></head><body><p>!!! IP Address NOT Allowed, Sorry for any convenience...!!! </p></body></html>"
}

when HTTP_REQUEST
{

	switch [string tolower [HTTP::host]] { 
        "officeappsqa.dubai.gov.ae" - "mysiteqa.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
			#pool "ShPnt_QA_Office_Pool"
			#persist cookie insert SPQAOFF 0
        }

		"smartsurveyqa.dubai.gov.ae"  - "smartsurveyqa.dubai.gov.ae:80" 
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "ShPnt_SmartSurvey_QA_Pool"
			#persist cookie insert smartsurvey_QA 0
        }


		"qa.smartservices.dubai.ae"
		{
		#set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
			pool "SSO_DEMO_QA_SmartSrv"
			persist cookie insert SSO_DEMO_QA_SmartSrv 0
		}

		"tadweenqa.dubai.gov.ae" - "slcogadminqa.dubai.gov.ae" - "slcogsvcqa.dubai.gov.ae"
		{
		#set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
			pool "ShPnt_QA_Tadween_Pool"
			persist cookie insert ShPnt_QA_Tadween 0
		}

		"newqa.dxbcustoms.gov.ae" - "newqa.dxbcustoms.gov.ae:80" - "qaadmin.dxbcustoms.gov.ae" - "dubainowsvcnetqa.dubai.ae"
		{
		#set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
			#pool "ShPnt_QA_Pool_DCust"
			#persist cookie insert ShPnt_QA_DCust 0
			HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		}

		"dubainowprod.dubai.gov.ae" - "devportalqa.dubai.ae" - "dubainowqa.dubai.ae" - "dubainowadminqa.dubai.ae" - "devportaladminqa.dubai.ae" - "dubaicareersqa.dubai.ae" - "smartemployeeqa.dubai.ae"  - "smartsupportqa.dubai.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		"dubainowportalapiqa.dubaigov.local"
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "ShPnt_QA_Pool_DubaiNow"
			persist cookie insert dubainowportalapiqa 0
        }

		"happinessportalqa.dubai.ae" - "happinessportaladminqa.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		"pmoqa.dubai.gov.ae" - "spqa.dubai.gov.ae" - "myspqa.dubai.gov.ae" - "lpsqa.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host][HTTP::uri]"
		    #} else {
			#	drop
			#}
        }

		"ladqanew.dubai.gov.ae" - "tawtheeqqa.dubai.gov.ae" - "ladsite.dubai.gov.ae" 
		 {
			#log local0. "Access allowed for Host: [HTTP::host]"

			pool "ShPnt_LAD_QA_Pool"
			persist cookie insert LAD_TAW_QA 0
        }
		
		"dghrintranetqa.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			pool "Cloud_ShPnt_QA_2016_Pool"
			persist cookie insert dghrQA 0
			#pool "ShPnt_QA_Pool"
        }


    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]

			#set ShPntQA_QA_80_GLOBAL_URI "[string tolower [HTTP::uri]]"
			#HTTP::redirect "https://[HTTP::host][HTTP::uri]"or $ShPntQA_QA_80_GLOBAL_URI contains "/_vti_bin"

			#if { $ShPntQA_QA_80_GLOBAL_URI contains "/_vti_bin" } {
			#HTTP::respond 200 content $static::ShPntQA_QA_80_Sorry1
			#}
			#else {
				pool "ShPnt_QA_Pool"
				persist cookie insert SPQA 0
			#}
        }
    }
	#STREAM::disable
}

 when HTTP_RESPONSE { 

    # Remove all instances of the Server header 
    HTTP::header remove Server 

    # Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    } 
 }
}
ltm rule /Common/ShPnt_QA_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	set ShPnt_QA_poolName ""

	if { ( [string tolower [HTTP::uri]] contains "_vti_bin1" ) and not ( [IP::addr [IP::client_addr] equals 4.2.2.2] ) } {
		#log local0. "dropped"
		reject
	}

	#log local0. "Request for Host: [HTTP::host]"

	switch [string tolower [HTTP::host]] { 
        
		"officeappsqa.dubai.gov.ae" 
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			pool "ShPnt_QA_Office_Pool"
			persist cookie insert SPQAOFF 0
			#pool "ShPnt_QA_Pool"
        }

		"qa.smartservices.dubai.ae"
		{
		#set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
		pool "SSO_DEMO_QA_SmartSrv"
	   	persist cookie insert SSO_DEMO_QA_SmartSrv 0

		}

		"dubainowdeveloperqa.dubai.ae" - "dubainowqa.dubai.ae" - "dubainowadminqa.dubai.ae" - "devportaladminqa.dubai.ae" - "dubaicareersqa.dubai.ae" - "smartemployeeqa.dubai.ae"  - "smartsupportqa.dubai.ae" - "dubainowsvcnetqa.dubai.ae"
		{
		#set SSO_DEMO_vs1_GLOBAL_poolName "SSO_DEMO_edcp"
		#set SSO_DEMO_vs1_GLOBAL_Rewrite_Select "ssodemoedcpqa"
		pool "ShPnt_QA_Pool_DubaiNow"
	   	persist cookie insert ShPnt_QA_cookie 0

		}

		"happinessportaladminqa.dubai.ae"
		{
			# allowed only for DSG servers
			if { [IP::client_addr] equals "213.42.50.181" or [IP::client_addr] equals "4.4.4.4" or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172")} {
				pool "ShPnt_QA_Pool_DubaiNow"
			}
			else {
				drop
			}
		}

		"happinessportalqa.dubai.ae"
		{
			pool "ShPnt_QA_Pool_DubaiNow"
		}

		"pmoqa.dubai.gov.ae" - "spqa.dubai.gov.ae" - "myspqa.dubai.gov.ae" - "dghrintranetqa.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			pool "Cloud_ShPnt_QA_2016_Pool"
			persist cookie insert SPQA2016 0
			#pool "ShPnt_QA_Pool"
        }

		"lpsqa.dubai.gov.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			pool "ShPnt_LAD_QA_Pool"
			persist cookie insert LAD_TAW_QA 0
			#pool "ShPnt_QA_Pool"
        }

		"newqa.dxbcustoms.gov.ae" - "newqa.dxbcustoms.gov.ae:80" - "qaadmin.dxbcustoms.gov.ae"
		{
			#log local0. "Access allowed for Host: [HTTP::host]"
			#set ShPnt_QA_poolName "ShPnt_QA_Pool_DCust"
			pool "ShPnt_QA_Pool_DCust"
			persist cookie insert ShPnt_QA_Cust 0
		}
		
		default
     	{
		   # log local0. "Default: Access Allowed for Host: [HTTP::host]"
			pool "ShPnt_QA_Pool"
			persist cookie insert SPQA 0
        }
    }
	#STREAM::disable
}

when HTTP_RESPONSE
{
	 # Remove all instances of the Server header 
	 HTTP::header remove Server 
	# Remove all headers starting with x- 
    foreach header_name [HTTP::header names] { 

       if {[string match -nocase x-* $header_name]}{ 

          HTTP::header remove $header_name 
       } 
    }  
	#STREAM::disable
	set ShPnt_QA_myCookies [HTTP::cookie names]
    foreach ShPnt_QA_myCookieVal $ShPnt_QA_myCookies {
      HTTP::cookie secure $ShPnt_QA_myCookieVal enable
    }
}
}
ltm rule /Common/ShPnt_QA_Pools_Disable_SSL {
    when SERVER_CONNECTED
{
	if  { $ShPnt_QA_poolName != "CRM_QA_Pool" } {
			SSL::disable
			#log local0. "SSL disabled for pool: $ShPnt_QA_poolName"
	} 
}
}
ltm rule /Common/ShPnt_QA_URI_Block {
    when HTTP_REQUEST {
	if { ( [string tolower [HTTP::uri]] contains "_vti_bin" ) and not ( [IP::addr [IP::client_addr] equals 4.2.2.2] ) } {
		log local0. "dropped"
		reject
	}	
}
}
ltm rule /Common/Smart_Customer_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"smartcustomer.dsg.gov.ae"
	    {
		 #   log local0. "Access allowed for Host: [HTTP::host] on URI: [HTTP::uri]"
			HTTP::redirect "https://smartcustomer.dsg.gov.ae"
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Smart_Customer_SSL_Base {
    when HTTP_REQUEST
{
	set Smart_Customer_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] { 
        "smartcustomer.dsg.gov.ae"
	    {
			#set BI_STAG_GLOBAL_URI [HTTP::uri]
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#set BI_STAG_GLOBAL_poolName "BI_STAG_Pool"
			pool "Smart_Customer_Pool"	
        }

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set Smart_Customer_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/Smart_Customer_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Smart_Cust_SSL_request_uri
	{
	}
	set static::Smart_Cust_SSL_request_host
	{
		"smartcustomer.dsg.gov.ae====dsggov.sugaropencloud.eu"
	} 
	set static::Smart_Cust_SSL_request_referer
	{
	}
	set static::Smart_Cust_SSL_request_cookie
	{
		#"smartcustomer.dsg.gov.ae====dsggov.sugaropencloud.eu"
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Smart_Cust_SSL_response_setCookie
	{
		#".surveymonkey.com====survey.dubaigov.ae"
	}
	set static::Smart_Cust_SSL_response_location
	{
		#"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"dsggov.sugaropencloud.eu====smartcustomer.dsg.gov.ae"
	}
	set static::Smart_Cust_SSL_response_contentLocation
	{
		#"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"dsggov.sugaropencloud.eu====smartcustomer.dsg.gov.ae"
	}
	set static::Smart_Cust_SSL_response_body
	{
		#"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"dsggov.sugaropencloud.eu====smartcustomer.dsg.gov.ae"
	}
}

when HTTP_REQUEST
{
	if {$Smart_Customer_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::Smart_Cust_SSL_request_uri] > 0}
	{
	set Smart_Cust_SSL_request_val [HTTP::uri]
	foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_request_uri
	{
		set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
		set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]
		if {$Smart_Cust_SSL_request_replace == "nothing"}
		{
			set Smart_Cust_SSL_request_replace ""
		}

		regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
	}
	if { [catch {HTTP::uri $Smart_Cust_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Smart_Cust_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Smart_Cust_SSL_request_val [HTTP::host]
		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_request_host
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]

			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}
			regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $Smart_Cust_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Smart_Cust_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Smart_Cust_SSL_request_val [HTTP::header value Referer]
		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_request_referer
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]

			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}

			regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $Smart_Cust_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Smart_Cust_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Smart_Cust_SSL_request_val [HTTP::header value Cookie]
		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_request_cookie
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]

			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}

			regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $Smart_Cust_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Smart_Customer_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Smart_Cust_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Smart_Cust_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_val_list
		{
			foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_response_setCookie
			{
				set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
				set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]

				if {$Smart_Cust_SSL_request_replace == "nothing"}
				{
					set Smart_Cust_SSL_request_replace ""
				}
				regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Smart_Cust_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Smart_Cust_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Smart_Cust_SSL_request_val [HTTP::header value Location]

		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_response_location
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]
			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}

			regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $Smart_Cust_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Smart_Cust_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Smart_Cust_SSL_request_val [HTTP::header value Content-Location]

		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_response_contentLocation
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]
			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}

			regsub -all $Smart_Cust_SSL_request_find $Smart_Cust_SSL_request_val $Smart_Cust_SSL_request_replace Smart_Cust_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Smart_Cust_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::Smart_Cust_SSL_response_body] > 0}
	{
		set Smart_Cust_SSL_expression ""
		foreach Smart_Cust_SSL_request_rewriteRecord $static::Smart_Cust_SSL_response_body
		{
			set Smart_Cust_SSL_request_find [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 1]
			set Smart_Cust_SSL_request_replace [getfield $Smart_Cust_SSL_request_rewriteRecord "====" 2]
			if {$Smart_Cust_SSL_request_replace == "nothing"}
			{
				set Smart_Cust_SSL_request_replace ""
			}

			set Smart_Cust_SSL_expression "$Smart_Cust_SSL_expression@$Smart_Cust_SSL_request_find@$Smart_Cust_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Smart_Cust_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

# only for debugging

when STREAM_MATCHED
{
	if {$Smart_Customer_GLOBAL_BREAK_ALL == 0} {

		#set Smart_Cust_SSL_theMatch [STREAM::match]

		#log local0. "match found: $Smart_Cust_SSL_theMatch"
		#log local0. "on URI: $Survey_PROD_GLOBAL_URI"

    }
}
}
ltm rule /Common/Sts_Internal_SSL_Base {
    when RULE_INIT
{
	#set static::SSO_PROD_wMail_SSO_Bypass "ACL_PROD_SSO_Bypass"
	set static::STS_Internal_HHRC_IPs "STS_PROD_HHRC_IPs"
}

when HTTP_REQUEST
{
	set Sts_Int_Serv_URI [string tolower [HTTP::uri]]

	switch [string tolower [HTTP::host]] { 

		"sts-internal.dubai.gov.ae"
		{
			if { $Sts_Int_Serv_URI starts_with "/adfs/ls"} {
				pool "Sts-Internal_PROD_Pool"
				#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} elseif {($Sts_Int_Serv_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_Internal_HHRC_IPs])} {
				pool "Sts-Internal_PROD_Pool"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

		"sts.dubai.gov.ae" 
		{
			if { $Sts_Int_Serv_URI starts_with "/adfs/ls"} {
					pool "Email_STS_ADFS_Pool"
					#log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri]"
			} elseif {($Sts_Int_Serv_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_Internal_HHRC_IPs])} {
				pool "Email_STS_ADFS_Pool"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

		"sts1.dubai.gov.ae" 
		{
			if { $Sts_Int_Serv_URI starts_with "/adfs" } {
					pool "STS1_PROD_Cloud"
					log local0. "Access allowed for Host: [HTTP::host] on [HTTP::uri] from [IP::client_addr]"
			} elseif {($Sts_Int_Serv_URI starts_with "/federationmetadata/") and ([class match [IP::client_addr] equals $static::STS_Internal_HHRC_IPs])} {
				pool "STS1_PROD_Cloud"
			} else {
				HTTP::respond 200 content "URL Blocked"
			}
		}

    	default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	reject
		}
    }
}
}
ltm rule /Common/Survey_PROD_Base {
    when RULE_INIT
{
	set static::Survey_PROD_Sorry "<html><head></head><body><p>Access Denied...!!! Wrong URL. For assistance contact DSG Support Team.</p></body></html>"
}

when HTTP_REQUEST
{
	set Survey_PROD_GLOBAL_BREAK_ALL 0
	set Survey_PROD_GLOBAL_poolName ""
	set Survey_PROD_GLOBAL_URI ""

	switch [string tolower [HTTP::host]] { 
        "survey.dubaigov.ae" 
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
		    set Survey_PROD_GLOBAL_URI [HTTP::uri]
			switch -glob  $Survey_PROD_GLOBAL_URI {
			"*favicon.ico" - "*favicon1.ico"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for favicon"
			    set Survey_PROD_GLOBAL_BREAK_ALL 1	
                HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
	          	HTTP::header replace "host:" "www.dsg.gov.ae"
				set Survey_PROD_GLOBAL_poolName "grpMaintenance_pool"
		    	pool $Survey_PROD_GLOBAL_poolName
			}
			"/Home_Landing*"
			{
				HTTP::redirect "http://www.dsg.gov.ae"
				set Survey_PROD_GLOBAL_BREAK_ALL 1
			}
			"/"
			{
				set Survey_PROD_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::Survey_PROD_Sorry
			}

			default
			{
				set Survey_PROD_GLOBAL_poolName "Survey_PROD_Pool"
		    	pool $Survey_PROD_GLOBAL_poolName	
			}
		}
		}
		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	set Survey_PROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }

	STREAM::disable
}

when SERVER_CONNECTED {
	if  { $Survey_PROD_GLOBAL_poolName != "Survey_PROD_Pool" } {
	    SSL::disable
	    } 
}

when HTTP_RESPONSE
{
	STREAM::disable
}
}
ltm rule /Common/Survey_PROD_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Survey_PROD_443_request_uri
	{
	}
	set static::Survey_PROD_443_request_host
	{
		"survey.dubaigov.ae====www.surveymonkey.com"
	} 
	set static::Survey_PROD_443_request_referer
	{
	}
	set static::Survey_PROD_443_request_cookie
	{
		"survey.dubaigov.ae====.surveymonkey.com"
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Survey_PROD_443_response_setCookie
	{
		".surveymonkey.com====survey.dubaigov.ae"
	}
	set static::Survey_PROD_443_response_location
	{
		"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"www.surveymonkey.com====survey.dubaigov.ae"
	}
	set static::Survey_PROD_443_response_contentLocation
	{
		"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"www.surveymonkey.com====survey.dubaigov.ae"
	}
	set static::Survey_PROD_443_response_body
	{
		"http://www.surveymonkey.com====https://survey.dubaigov.ae"
		"www.surveymonkey.com====survey.dubaigov.ae"
	}
}

when HTTP_REQUEST
{
	if {$Survey_PROD_GLOBAL_poolName == "Survey_PROD_Pool" and $Survey_PROD_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::Survey_PROD_443_request_uri] > 0}
	{
	set Survey_PROD_443_request_val [HTTP::uri]
	foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_request_uri
	{
		set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
		set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]
		if {$Survey_PROD_443_request_replace == "nothing"}
		{
			set Survey_PROD_443_request_replace ""
		}

		regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
	}
	if { [catch {HTTP::uri $Survey_PROD_443_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Survey_PROD_443_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Survey_PROD_443_request_val [HTTP::host]
		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_request_host
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]

			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}
			regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
		}
		if { [catch {HTTP::header replace Host $Survey_PROD_443_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Survey_PROD_443_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Survey_PROD_443_request_val [HTTP::header value Referer]
		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_request_referer
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]

			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}

			regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
		}

		if { [catch {HTTP::header replace Referer $Survey_PROD_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Survey_PROD_443_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Survey_PROD_443_request_val [HTTP::header value Cookie]
		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_request_cookie
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]

			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}

			regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
		}
		if { [catch {HTTP::header replace Cookie $Survey_PROD_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Survey_PROD_GLOBAL_poolName == "Survey_PROD_Pool" and $Survey_PROD_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Survey_PROD_443_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Survey_PROD_443_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Survey_PROD_443_request_val $Survey_PROD_443_request_val_list
		{
			foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_response_setCookie
			{
				set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
				set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]

				if {$Survey_PROD_443_request_replace == "nothing"}
				{
					set Survey_PROD_443_request_replace ""
				}
				regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Survey_PROD_443_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Survey_PROD_443_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Survey_PROD_443_request_val [HTTP::header value Location]

		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_response_location
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]
			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}

			regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
		}
		if { [catch {HTTP::header replace Location $Survey_PROD_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Survey_PROD_443_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Survey_PROD_443_request_val [HTTP::header value Content-Location]

		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_response_contentLocation
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]
			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}

			regsub -all $Survey_PROD_443_request_find $Survey_PROD_443_request_val $Survey_PROD_443_request_replace Survey_PROD_443_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Survey_PROD_443_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::Survey_PROD_443_response_body] > 0}
	{
		set Survey_PROD_443_expression ""
		foreach Survey_PROD_443_request_rewriteRecord $static::Survey_PROD_443_response_body
		{
			set Survey_PROD_443_request_find [getfield $Survey_PROD_443_request_rewriteRecord "====" 1]
			set Survey_PROD_443_request_replace [getfield $Survey_PROD_443_request_rewriteRecord "====" 2]
			if {$Survey_PROD_443_request_replace == "nothing"}
			{
				set Survey_PROD_443_request_replace ""
			}

			set Survey_PROD_443_expression "$Survey_PROD_443_expression@$Survey_PROD_443_request_find@$Survey_PROD_443_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Survey_PROD_443_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

# only for debugging

when STREAM_MATCHED
{
	if {$Survey_PROD_GLOBAL_poolName == "Survey_PROD_Pool" and $Survey_PROD_GLOBAL_BREAK_ALL == 0} {

		#set Survey_PROD_443_theMatch [STREAM::match]

		#log local0. "match found: $Survey_PROD_443_theMatch"
		#log local0. "on URI: $Survey_PROD_GLOBAL_URI"

    }
}
}
ltm rule /Common/Twig_PROD_QA_Base {
    when RULE_INIT
{
	set static::Twig_GIN_SrcIP "GIN_Range"
	set static::Twig_QA_Maint_flag 0
	set static::Twig_PROD_Maint_flag 0
}

when HTTP_REQUEST
{
	set static::Twig_Sorry1 "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"
	set static::Twig_Sorry2 "<html><head></head><body><p>Under Construction...!!! </p></body></html>"
	set Twig_PRODQA_GLOBAL_BREAK_ALL 0

	switch [string tolower [HTTP::host]] {
		"search.dubai.ae"
	    {
			if { ($static::Twig_PROD_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "213.42.48.182") } {

				set Twig_PRODQA_GLOBAL_BREAK_ALL 1

				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				pool "Twig_PROD_Pool"
				persist cookie insert Twig_PROD 0
			}
        }

		"search.qa.dubai.ae"
	    {
		    if { $static::Twig_QA_Maint_flag == 1 or [IP::client_addr] == "MP_Test_IP" } {
				set Twig_PRODQA_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::Twig_Sorry1	
			}
			else {
				pool "Twig_QA_Pool"
				persist cookie insert Twig_QA 0
			}
			#set Twig_PRODQA_GLOBAL_BREAK_ALL 1
			#drop
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Twig_PROD_QA_SSL_Base {
    when RULE_INIT
{
	set static::Twig_SSL_GIN_SrcIP "GIN_Range"
	set static::Twig_SSL_QA_Maint_flag 0
	set static::Twig_SSL_PROD_Maint_flag 0
}

when HTTP_REQUEST
{
	set Twig_PRODQA_SSL_GLOBAL_BREAK_ALL 0
	set static::Twig_SSL_Sorry1 "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"
	set static::Twig_SSL_Sorry2 "<html><head></head><body><p>Under Construction...!!! </p></body></html>"

	switch [string tolower [HTTP::host]] {
		"search.dubai.ae"
	    {
			if { ($static::Twig_SSL_PROD_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "MP_Test_IP") } {

				set Twig_PRODQA_SSL_GLOBAL_BREAK_ALL 1

				if {[HTTP::uri] ends_with "favicon.ico"} {		
					HTTP::uri "/sites/maintenance/epay/images/eservdegicon.ico"
				}
				elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
					HTTP::uri "/sites/maintenance/images/SystemMaintenance.jpg"
				}
				else {
					HTTP::uri "/sites/maintenance/maintenance.aspx"
				}

				#HTTP::redirect "http://maintenance.dubai.ae"

				HTTP::header replace Host "www.dsg.gov.ae"
				HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
				HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

				pool "grpMaintenance_pool"
				persist cookie insert Twig_SSL_PROD_Maint 0

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{
				pool "Twig_PROD_Pool"
				persist cookie insert Twig_SSL_PROD 0
			}			
        }

		"search.qa.dubai.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			#if { [HTTP::uri] equals "/" } {
			#	HTTP::uri "/smartsearchqa/ar/"
			#}
			if { $static::Twig_SSL_QA_Maint_flag == 1 or [IP::client_addr] == "MP_Test_IP" } {
				set Twig_PRODQA_SSL_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content $static::Twig_SSL_Sorry1	
			}
			else {
				pool "Twig_QA_Pool"
				persist cookie insert Twig_SSL_QA 0
			}

			#set Twig_PRODQA_SSL_GLOBAL_BREAK_ALL 1
			#drop

        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/Twig_PROD_QA_SSL_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Twig_PRODQA_SSL_request_uri
	{
		#"^/\$====/smartsearchqa/ar/"
		#"^/ar/====/smartsearchqa/ar/"
		#"^/en/====/smartsearchqa/en/"
		#"^/samlsso/====/smartsearchqa/samlsso"
	}
	set static::Twig_PRODQA_SSL_request_host
	{
	} 
	set static::Twig_PRODQA_SSL_request_referer
	{
	}
	set static::Twig_PRODQA_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Twig_PRODQA_SSL_response_setCookie
	{
	}
	set static::Twig_PRODQA_SSL_response_location
	{
		"http://search.dubai.ae====https://search.dubai.ae"
		"http://search.qa.dubai.ae====https://search.qa.dubai.ae"
	}
	set static::Twig_PRODQA_SSL_response_contentLocation
	{
		"http://search.dubai.ae====https://search.dubai.ae"
		"http://search.qa.dubai.ae====https://search.qa.dubai.ae"
	}
	set static::Twig_PRODQA_SSL_response_body
	{
		#"/smartsearchqa/ar/====/ar/"
		#"/smartsearchqa/en/====/en/"
		#"https://search.qa.dubai.ae/samlsso====https://search.qa.dubai.ae/smartsearchqa/samlsso"
	}
}

when HTTP_REQUEST
{
	if {$Twig_PRODQA_SSL_GLOBAL_BREAK_ALL == 0} {

	    if { [catch {HTTP::header remove Accept-Encoding	} result] }
	    {
	        #	log local0. "fffffffffff $result"
	    }
	#-----------------
	#URI
	#-----------------
	if {[llength $static::Twig_PRODQA_SSL_request_uri] > 0}
	{
	set Twig_PRODQA_SSL_request_val [HTTP::uri]
	foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_request_uri
	{
		set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
		set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]
		if {$Twig_PRODQA_SSL_request_replace == "nothing"}
		{
			set Twig_PRODQA_SSL_request_replace ""
		}

		regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
	}
	if { [catch {HTTP::uri $Twig_PRODQA_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Twig_PRODQA_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Twig_PRODQA_SSL_request_val [HTTP::host]
		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_request_host
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]

			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}
			regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $Twig_PRODQA_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Twig_PRODQA_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Twig_PRODQA_SSL_request_val [HTTP::header value Referer]
		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_request_referer
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]

			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}

			regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $Twig_PRODQA_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Twig_PRODQA_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Twig_PRODQA_SSL_request_val [HTTP::header value Cookie]
		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_request_cookie
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]

			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}

			regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $Twig_PRODQA_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
    if {$Twig_PRODQA_SSL_GLOBAL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Twig_PRODQA_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Twig_PRODQA_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_val_list
		{
			foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_response_setCookie
			{
				set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
				set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]

				if {$Twig_PRODQA_SSL_request_replace == "nothing"}
				{
					set Twig_PRODQA_SSL_request_replace ""
				}
				regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Twig_PRODQA_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Twig_PRODQA_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Twig_PRODQA_SSL_request_val [HTTP::header value Location]

		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_response_location
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]
			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}

			regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $Twig_PRODQA_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Twig_PRODQA_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Twig_PRODQA_SSL_request_val [HTTP::header value Content-Location]

		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_response_contentLocation
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]
			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}

			regsub -all $Twig_PRODQA_SSL_request_find $Twig_PRODQA_SSL_request_val $Twig_PRODQA_SSL_request_replace Twig_PRODQA_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Twig_PRODQA_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------

	if {[llength $static::Twig_PRODQA_SSL_response_body] > 0}
	{
		set Twig_PRODQA_SSL_expression ""
		foreach Twig_PRODQA_SSL_request_rewriteRecord $static::Twig_PRODQA_SSL_response_body
		{
			set Twig_PRODQA_SSL_request_find [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 1]
			set Twig_PRODQA_SSL_request_replace [getfield $Twig_PRODQA_SSL_request_rewriteRecord "====" 2]
			if {$Twig_PRODQA_SSL_request_replace == "nothing"}
			{
				set Twig_PRODQA_SSL_request_replace ""
			}

			set Twig_PRODQA_SSL_expression "$Twig_PRODQA_SSL_expression@$Twig_PRODQA_SSL_request_find@$Twig_PRODQA_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Twig_PRODQA_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
	}
    }

}

# only for debugging

when STREAM_MATCHED
{
	if {$Twig_PRODQA_SSL_GLOBAL_BREAK_ALL == 0} {

		#set Twig_PRODQA_SSL_theMatch [STREAM::match]

		#log local0. "match found: $Twig_PRODQA_SSL_theMatch"
		#log local0. "on URI: $Survey_PROD_GLOBAL_URI"

    }
}
}
ltm rule /Common/WatchDox_Base {
    when RULE_INIT
{
}

when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"fileshare.dubai.gov.ae" -
		"ssofs.dubai.gov.ae"
	    {
		    #log local0. "Access allowed for Host: [HTTP::host]"
			if { ([HTTP::uri] equals "/")  } {
		    	HTTP::redirect "https://[HTTP::host]"
		    } else {
				drop
			}
        }

		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
    }	
}
}
ltm rule /Common/WatchDox_SSL_Base {
    when RULE_INIT
{
	set static::WatchDox_flag_maintenance 0
}

when HTTP_REQUEST
{
	#set WatchDox_GLOBAL_BREAK_ALL 0
	set WatchDox_GLOBAL_poolName ""
	#set WatchDox_GLOBAL_URI ""
	#set WatchDox_goToMaintenance 0

	#set WatchDox_GLOBAL_URI [HTTP::uri]
	#log local0. "Access allowed for Host: [HTTP::host]"

	if { ($static::WatchDox_flag_maintenance == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "MP_Enabled_IP") } {

		#set WatchDox_GLOBAL_BREAK_ALL 1

		if {[HTTP::uri] ends_with "favicon.ico"} {		
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		}
		elseif {[HTTP::uri] ends_with "SystemMaintenance.jpg"} {
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		}
		else {
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
		}

		#HTTP::redirect "http://maintenance.dubai.ae"

		#HTTP::header replace Host "www.dsg.gov.ae"
		#HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		#HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"

		#set WatchDox_GLOBAL_poolName "grpMaintenance_pool"
		#pool $WatchDox_GLOBAL_poolName
		#persist cookie insert WatchDox_Maint 0

		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else
	{
		switch [string tolower [HTTP::host]] {
			"fileshare.dubai.gov.ae"
			{
				set WatchDox_GLOBAL_poolName "WatchDox_FileShare"
				pool $WatchDox_GLOBAL_poolName
				#persist cookie insert WD_FS 0
			}
			"ssofs.dubai.gov.ae"
			{
				drop
				#set WatchDox_GLOBAL_poolName "WatchDox_SSO_AUTH"
				#pool $WatchDox_GLOBAL_poolName
				#persist cookie insert WD_AUTH 0
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				#set WatchDox_GLOBAL_BREAK_ALL 1
				drop
			}
		}
	}

}

when HTTP_RESPONSE
{
}
}
ltm rule /Common/WatchDox_SSL_SRVRCONN {
    when SERVER_CONNECTED
{
	if  { $WatchDox_GLOBAL_poolName == "grpMaintenance_pool" } {
			SSL::disable
			#log local0. "SSL disabled for pool: $SSO_PROD_wMail_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/Watson_Prod_Base {
    when HTTP_REQUEST
{
	switch [string tolower [HTTP::host]] {
		"watson.dubai.gov.ae"
		{
			if { ([HTTP::uri] equals "/" or [HTTP::uri] equals "/DSGWatson/Chat") } {
					HTTP::redirect "https://watson.dubai.gov.ae/DSGWatson/Chat"
				}
		}

		"saad.dubai.gov.ae" - "saad.dubai.gov.ae:443" 
		{
			#HTTP::redirect "https://[HTTP::host][HTTP::uri]"
			if { ([HTTP::uri] equals "/" or [HTTP::uri] equals "/Saad" or [HTTP::uri] equals "/Saad/*" or [HTTP::uri] equals "/Business/*" ) } {
					#HTTP::redirect "https://saad.dubai.gov.ae/Saad"
					HTTP::redirect "https://rashid.ae/Business/"
			}	
			elseif { ([HTTP::uri] equals "/LifeEvents" or [HTTP::uri] equals "/LifeEvents/*") } {
					#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
					HTTP::redirect "https://rashid.ae/LifeEvents"
				}
			elseif { ([HTTP::uri] equals "/Saad/DED" ) } {
					#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
					HTTP::redirect "https://rashid.ae/Business/DED"
				}
			elseif { ([HTTP::uri] equals "/Saad/?viewMode=1" or [HTTP::uri] equals "/Saad/?viewMode=1/") } {
				#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
				HTTP::redirect "https://rashid.ae/Business"
			}	
		}

		"rashid.ae" - "www.rashid.ae"
		{
			HTTP::redirect "https://rashid.ae/LifeEvents/"
			#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
		}

		default
		{
			drop
		}
	}
}
}
ltm rule /Common/Watson_Prod_Pool_Maintanance {
    when RULE_INIT
{
	set static::Watson_PROD_flag_maintenance 0
}

when HTTP_REQUEST {

	switch [string tolower [HTTP::host]] { 
		"saad.dubai.gov.ae" - "saad.dubai.gov.ae:443" - "watson.dubai.gov.ae" - "rashid.ae"
		{
			if {$Watson_PROD_flag_maintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" } {

				#set Watson_PROD_GLOBAL_BREAK_ALL 1
				#log local0. "Watson_PROD_flag_maintenance = $Watson_PROD_flag_maintenance"
					HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
			} 
		}
	}
}
}
ltm rule /Common/Watson_Prod_Pool_Select {
    when HTTP_REQUEST
{
	set Watson_Prod_SSL_URI [HTTP::uri]
	set Watson_Prod_SSL_NewURI ""

	switch [string tolower [HTTP::host]] {

		 "saad.dubai.gov.ae" - "saad.dubai.gov.ae:443" - "rashid.ae" - "rashid.ae:443" 
		{
			if { ( [HTTP::uri] equals "/" or [HTTP::uri] equals "/Saad" or [HTTP::uri] equals "/Saad/" )} {

					HTTP::redirect "https://rashid.ae/Business/"
				}
			elseif { ([HTTP::uri] equals "/Saad/DED" ) } {
					#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
					HTTP::redirect "https://rashid.ae/Business/DED"
				}
			elseif { ([HTTP::uri] equals "/LifeEvents" or [HTTP::uri] equals "/LifeEvents/*") } {
					#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
					HTTP::redirect "https://rashid.ae/LifeEvents/"
				}
			elseif { ([HTTP::uri] equals "/Saad/?viewMode=1" or [HTTP::uri] equals "/Saad/?viewMode=1/") } {
					#HTTP::redirect "https://saad.dubai.gov.ae/LifeEvents/"
					HTTP::redirect "https://rashid.ae/Business"
				}		
		}


		default
     	{
		    #log local0. "Access blocked for Host: [HTTP::host]"
	    	drop
        }
	}
	if { [string tolower [HTTP::host]] equals "rashid.ae"  or [HTTP::host] equals "saad.dubai.gov.ae" or [HTTP::host] equals "watson.dubai.gov.ae" or [HTTP::host] equals "saad.dubai.gov.ae:443"  } {

		#log local0. "Access allowed for Host: [HTTP::host]"
		switch -glob $Watson_Prod_SSL_URI
		{

			"/LifeEvents" - "/LifeEvents/*" - "/DED/*" - "DXBNowChatBot/watsonChatServiceEndpoint" - "/DXBNowChatBot/*" 
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Saad_V2_Prod_8080"
				persist cookie insert V 0
			}

			"/DSGWatson/Chat" - "/DSGWatson/Chat/*" 
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Watson_Prod_Pool"
			}

			"/Saad" - "/Saad/*" - "/Saad/DED"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Watson_Prod_Pool"
				persist cookie insert DED 0
			}
			"/Business" - "/Business/*" 
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Watson_Prod_Pool"
				persist cookie insert Saad 0
			}
			"/Saad/?viewMode=1" - "/Saad/?viewMode=1/"
			{
				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
				pool "Watson_Prod_Pool"
				persist cookie insert Viewmode 0
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				drop
			}
		}
} else {
		drop
	}
}
}
ltm rule /Common/Watson_Prod_SSL_Rewrite {
    when RULE_INIT
{
	#set Watson_Prod_SSL_BREAK_ALL 0
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::Watson_Prod_SSL_request_uri
	{
		"^/\$====/DSGWatson/Chat"
	}
	set static::Watson_Prod_SSL_request_host
	{
	} 
	set static::Watson_Prod_SSL_request_referer
	{
	}
	set static::Watson_Prod_SSL_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::Watson_Prod_SSL_response_setCookie
	{
	}
	set static::Watson_Prod_SSL_response_location
	{
		"http://watson.dubai.gov.ae====https://watson.dubai.gov.ae"
		"http://saad.dubai.gov.ae====https://saad.dubai.gov.ae"
		"http://rashid.ae====https://rashid.ae"

	}
	set static::Watson_Prod_SSL_response_contentLocation
	{
		#"http://rashid.ae====https://rashid.ae"
	}
	set static::Watson_Prod_SSL_response_body
	{
		#"http://rashid.ae====https://rashid.ae"
	}
}

when HTTP_REQUEST
{
	#if {$Watson_Prod_SSL_BREAK_ALL == 0} {

            if { [catch {HTTP::header remove Accept-Encoding	} result] } {
	           #log local0. "fffffffffff $result"
	        }
	#....................................................................................

	#-----------------
	#URI
	#-----------------
	if {[llength $static::Watson_Prod_SSL_request_uri] > 0}
	{
	set Watson_Prod_SSL_request_val [HTTP::uri]
	foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_request_uri
	{
		set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
		set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]
		if {$Watson_Prod_SSL_request_replace == "nothing"}
		{
			set Watson_Prod_SSL_request_replace ""
		}

		regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
	}
	if { [catch {HTTP::uri $Watson_Prod_SSL_request_val	} result] }
	{
	#	log local0. "fffffffffff $result"
	}

	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::Watson_Prod_SSL_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set Watson_Prod_SSL_request_val [HTTP::host]
		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_request_host
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]

			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}
			regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
		}
		if { [catch {HTTP::header replace Host $Watson_Prod_SSL_request_val	} result] }
		{
			#	log local0. "fffffffffff $result"
		}


	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::Watson_Prod_SSL_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set Watson_Prod_SSL_request_val [HTTP::header value Referer]
		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_request_referer
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]

			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}

			regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
		}

		if { [catch {HTTP::header replace Referer $Watson_Prod_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::Watson_Prod_SSL_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set Watson_Prod_SSL_request_val [HTTP::header value Cookie]
		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_request_cookie
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]

			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}

			regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
		}
		if { [catch {HTTP::header replace Cookie $Watson_Prod_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
    }
}

when HTTP_RESPONSE
{
   # if {$Watson_Prod_SSL_BREAK_ALL == 0} {
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::Watson_Prod_SSL_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set Watson_Prod_SSL_request_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_val_list
		{
			foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_response_setCookie
			{
				set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
				set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]

				if {$Watson_Prod_SSL_request_replace == "nothing"}
				{
					set Watson_Prod_SSL_request_replace ""
				}
				regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
			}
			if { [catch {HTTP::header insert Set-Cookie $Watson_Prod_SSL_request_val} result] }
			{
				#	log local0. "fffffffffff $result"
			}

		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::Watson_Prod_SSL_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set Watson_Prod_SSL_request_val [HTTP::header value Location]

		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_response_location
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]
			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}

			regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
		}
		if { [catch {HTTP::header replace Location $Watson_Prod_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::Watson_Prod_SSL_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set Watson_Prod_SSL_request_val [HTTP::header value Content-Location]

		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_response_contentLocation
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]
			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}

			regsub -all $Watson_Prod_SSL_request_find $Watson_Prod_SSL_request_val $Watson_Prod_SSL_request_replace Watson_Prod_SSL_request_val
		}
		if { [catch {HTTP::header replace Content-Location $Watson_Prod_SSL_request_val} result] }
		{
			#	log local0. "fffffffffff $result"
		}

	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::Watson_Prod_SSL_response_body] > 0}
	{
		set Watson_Prod_SSL_expression ""
		foreach Watson_Prod_SSL_request_rewriteRecord $static::Watson_Prod_SSL_response_body
		{
			set Watson_Prod_SSL_request_find [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 1]
			set Watson_Prod_SSL_request_replace [getfield $Watson_Prod_SSL_request_rewriteRecord "====" 2]
			if {$Watson_Prod_SSL_request_replace == "nothing"}
			{
				set Watson_Prod_SSL_request_replace ""
			}

			set Watson_Prod_SSL_expression "$Watson_Prod_SSL_expression@$Watson_Prod_SSL_request_find@$Watson_Prod_SSL_request_replace@"
		}
		if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
		{
			if { [catch
			{
				STREAM::expression $Watson_Prod_SSL_expression
				STREAM::enable
			} result] }
			{
				#	log local0. "fffffffffff $result"
			}
		}
    }
    }
}

when STREAM_MATCHED
{
	#if {$Watson_Prod_SSL_BREAK_ALL == 0} {

		#set Watson_Prod_SSL_theMatch [STREAM::match]

		#log local0. "match found: $Watson_Prod_SSL_theMatch"
		#log local0. "on URI: $Watson_Prod_SSL_URI"

   # }
}
}
ltm rule /Common/Yehia_RD_1 {
    when CLIENT_ACCEPTED {
    set client__address [IP::client_addr]
    set vip_ [IP::local_addr]
}

when HTTP_REQUEST
{	
	set LogString "Client [IP::client_addr]:[TCP::client_port] -> [HTTP::host][HTTP::uri]"

	log local0. "============================================="
	log local0. "$LogString (request)"
	log local0. "Methode: [HTTP::method]"
	foreach aHeader [HTTP::header names] {
		log local0. "$aHeader: [HTTP::header value $aHeader]"
	}
	log local0. "============================================="

	#if { [HTTP::uri] contains "/udd.js" } {
	#	log local0. "URI: [HTTP::uri]"
	#	if { [HTTP::header exists Accept] } {
	#		log local0. "Accept-Encoding exists"
	#		log local0. "Accept: [HTTP::header value Accept]"
	#		HTTP::header remove Accept
	#		HTTP::header insert Accept "*/*"
	#		log local0. "Accept: [HTTP::header value Accept]"
	#	}
	#}
	set http__host [HTTP::host]:[TCP::local_port]
    set http__uri [HTTP::uri]
    set http__url $http_host$http_uri
    set http__method [HTTP::method]
    set http__version [HTTP::version]
    set http__user_agent [HTTP::header "User-Agent"]
    set http__content_type [HTTP::header "Content-Type"]
    set http__referrer [HTTP::header "Referer"]
    set tcp__start_time [clock clicks -milliseconds]
    set req__start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    set cookies [HTTP::cookie names]
    set users [HTTP::username]
    set virtual__server [LB::server]

    if { [HTTP::header Content-Length] > 0 } then {
        set req__length [HTTP::header "Content-Length"]
    } else {
        set req__length 0
    }
}

when HTTP_RESPONSE
{
	log local0. "============================================="
	log local0. "$LogString (response) - status: [HTTP::status]"
	foreach aHeader [HTTP::header names] {
		log local0. "$aHeader: [HTTP::header value $aHeader]"
    }
    log local0. "============================================="

	set res__start_time [clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S"]
    set node__ip [IP::server_addr]
    set node__port [TCP::server_port]
    set http__status [HTTP::status]
    set req__elapsed_time [expr {[clock clicks -milliseconds] - $tcp__start_time}]
    if { [HTTP::header Content-Length] > 0 } then {
        set res__length [HTTP::header "Content-Length"]
    } else {
        set res__length 0
    }
}

when CLIENTSSL_HANDSHAKE
{
 if {[IP::addr [IP::client_addr] equals 213.42.49.85] } {
   log local0. "TCP source port: [TCP::remote_port]"
   log local0. "RSA Session-ID:[SSL::sessionid] Master-Key:[SSL::sessionsecret]" }
}
when SERVERSSL_HANDSHAKE
{
        log local0. "TCP source port: [TCP::local_port]"
        log local0. "RSA Session-ID:[SSL::sessionid] Master-Key:[SSL::sessionsecret]" 
}

when LB_SELECTED
{

  # Check if client IP address is 10.0.0.1

	if { [IP::addr [IP::client_addr] equals "213.42.49.85"] } {

		log local0. "LB_SELECTED: Pool-member selected"
	}
}

when HTTP_REQUEST_SEND
{

	if { [IP::addr [IP::client_addr] equals "213.42.49.85"] } {
		log local0. "HTTP_REQUEST_SEND: immediately before an HTTP request is sent to the server"
	}
}

when SERVER_CONNECTED
{	
	if { [IP::client_addr] equals "213.42.49.74" or [IP::client_addr] equals "213.42.87.15" } {
		log local0. "[IP::client_addr]:[TCP::client_port] Mapped to [serverside {IP::local_addr}]:[serverside {TCP::local_port}] 
				-> [IP::server_addr]:[serverside {TCP::remote_port}]"
	}
}

when LB_FAILED
{
	log local0. "============================================="
	log local0. "Node:port = $node__ip:$node__port , HTTP_Status = http__status"
}
}
ltm rule /Common/Yehia_RD_2 {
    when HTTP_REQUEST
{
	set XXX_Response_Rewrite 0
}


when HTTP_RESPONSE
{
	if { $XXX_Response_Rewrite } {
		if {[HTTP::is_redirect]} {

			set Orig_Location_str [HTTP::header value Location]
			set String_tobe_Replaced "http://"
			set New_String "https://"
			set New_Location_str ""

			regsub -all $String_tobe_Replaced $Orig_Location_str $New_String New_Location_str
			#regsub "/services/" $Dubainow_QA_SSL_URI "/" Dubainow_QA_SSL_NewURI

			if { [catch {HTTP::header replace Location $New_Location_str} result] } {
				#	log local0. "fffffffffff $result"
			}

			if { [HTTP::is_redirect] } {
			if { $SSO_PROD_SDesk_GLOBAL_Rewrite_Class equals "dofdesk" or ([HTTP::cookie exists "Remedy_PROD_DOF"]) } {
				#log local0. "Request URI: $SSO_PROD_SDesk_GLOBAL_URI"
				if { $SSO_PROD_SDesk_GLOBAL_URI equals "/arsys/servlet/LoginServlet" } {
					#log local0. "Reponse Location: [HTTP::header value Location]"				
					#HTTP::header replace Location "https://servicedesk.dubai.gov.ae/arsys/forms/sdapp/SRS%3AServiceRequestConsole/DOF/?cacheid=482e855c&mode=CREATE"
				}
			}
		}
		}
	}
}
}
ltm rule /Common/Yehia_RD_3 {
    when CLIENTSSL_HANDSHAKE
{
 if {[IP::addr [IP::client_addr] equals 213.42.49.85] } {
   log local0. "TCP source port: [TCP::remote_port]"
   log local0. "RSA Session-ID:[SSL::sessionid] Master-Key:[SSL::sessionsecret]" }
}
when SERVERSSL_HANDSHAKE
{
        log local0. "TCP source port: [TCP::local_port]"
        log local0. "RSA Session-ID:[SSL::sessionid] Master-Key:[SSL::sessionsecret]" 
}
}
ltm rule /Common/Yehia_RD_4 {
    when HTTP_REQUEST
{
	if { [IP::client_addr] equals "213.42.49.85" or [IP::client_addr] equals "213.42.87.15"} {
		set LogString "Client [IP::client_addr]:[TCP::client_port] -> [HTTP::host][HTTP::uri]"
		log local0. "=============================================="
		log local0. "$LogString (request)"
		log local0. "Methode: [HTTP::method]"
		foreach aHeader [HTTP::header names] {
			log local0. "$aHeader: [HTTP::header value $aHeader]"
		}
		log local0. "============================================="
		log local0. "Pool: $IDS_PROD_GLOBAL_poolName"
	}
}

when HTTP_RESPONSE
{
	if { [IP::client_addr] equals "213.42.49.85" or [IP::client_addr] equals "213.42.87.15"} {
		log local0. "============================================="
		log local0. "$LogString (response) - status: [HTTP::status]"
		foreach aHeader [HTTP::header names] {
			log local0. "$aHeader: [HTTP::header value $aHeader]"
		}
		log local0. "============================================="
	}
}
}
ltm rule /Common/cookieRewrite {
    when HTTP_REQUEST
{
	### UnUsed iRule for Ref ###

	if {[HTTP::header exists "Set-Cookie"]}
	{
		array set cookielist { }
		# A response may have multiple Set-Cookie headers, loop through them
		foreach cookievalue [HTTP::header values "Set-Cookie"]
		{
			set cookiename [getfield $cookievalue "=" 1]
			set newcookievalue ""
			# Each cookie starts with name=value and then has more name/value pairs
			foreach element [split $cookievalue ";"]
			{
				set element [string trim $element]
				if {$element contains "="}
				{
					set elementname [getfield $element "=" 1]
					set elementvalue [getfield $element "=" 2]
					if {$elementname eq "domain"}
					{
						# Rewrite domain of cookie, if necessary.
						#if {$elementvalue eq $host_serverside}
						#{
							set elementvalue ".jobs.ae"
						#}
					}
					append newcookievalue "$elementname=$elementvalue; "
				}
				else
				{
					append newcookievalue "$element; "
				}
			}
			# Store new cookie value for later re-insertion. The cookie value
			# string will end with an extra "; " so strip that off here.
			set cookielist($cookiename) [string range $newcookievalue 0 [expr {[string length $newcookievalue] - 3}]]
		}
		# Remove all Set-Cookie headers and re-add them (modified or not)
		HTTP::header remove "Set-Cookie"
		foreach cookiename [array names cookielist]
		{
			HTTP::header insert "Set-Cookie" $cookielist($cookiename)
		}
	}
}
}
ltm rule /Common/domainNameRedirect {
    when HTTP_REQUEST
{
	### UnUsed iRule for Ref ###

	set myfixdomainname ".dubai.gov.ae"
	set myfixhost [HTTP::host]
	set myfixuri [HTTP::uri]

    if { $myfixhost contains $myfixdomainname }
	{

	}
	else
	{
		set myfixfqdn "$myfixhost$myfixdomainname$myfixuri"
		if {not ([catch {SSL::cipher version} result]) && $result ne "none"}
		{
			HTTP::respond 302 Location "https://$myfixfqdn"
		}
		else
		{
			HTTP::respond 302 Location "http://$myfixfqdn"
		}
	}
}
}
ltm rule /Common/dubainowsvc_PROD_SSL_Base {
    when HTTP_REQUEST
{
	set Dubainowsvc_PROD_SSL_URI [HTTP::uri]
	set Dubainowsvc_PROD_SSL_NewURI ""

	if { [string tolower [HTTP::host]] equals "dubainowsvc.dubai.ae" } {

		#log local0. "Access allowed for Host: [HTTP::host]"
		switch -glob $Dubainowsvc_PROD_SSL_URI
		{
			"/DewaBill/*"
			{ 
				#regsub "/services/" $Dubainowsvc_PROD_SSL_URI "/" Dubainowsvc_PROD_SSL_NewURI
				#HTTP::uri $Dubainowsvc_PROD_SSL_NewURI
				pool "Dubainowsvc_PROD_50001"
			}
			"/DuPostpaid/*"
			{ 
				pool "Dubainowsvc_PROD_50002"
			}
			"/DuPrepaid/*"
			{ 
				pool "Dubainowsvc_PROD_50003"
			}
			"/EtisalatPostpaid/*"
			{ 
				pool "Dubainowsvc_PROD_50004"
			}
			"/EtisalatPrepaid/*"
			{ 
				pool "Dubainowsvc_PROD_50005"
			}
			"/FlightInfo/*"
			{ 
				pool "Dubainowsvc_PROD_50006"
				persist cookie insert "FlightInfo" 0
			}
			"/NOL/*"
			{ 
				pool "Dubainowsvc_PROD_50007"
			}
			"/PayAll/*"
			{ 
				pool "Dubainowsvc_PROD_50008"
			}
			"/Salik/*"
			{ 
				pool "Dubainowsvc_PROD_50009"
			}
			"/VisaResidency/*"
			{ 
				pool "Dubainowsvc_PROD_50010"
			}
			"/DoctorsAndClinics/*"
			{ 
				pool "Dubainowsvc_PROD_50011"
			}
			"/DewaConsumption/*"
			{ 
				pool "Dubainowsvc_PROD_50012"
			}
			"/DubaiCalendar/*"
			{ 
				pool "Dubainowsvc_PROD_50013"
			}
			"/DubaiCustoms/*"
			{ 
				pool "Dubainowsvc_PROD_50014"
			}
			"/JourneyPlanner/*"
			{ 
				pool "Dubainowsvc_PROD_50015"
			}
			"/PrayerTimes/*"
			{ 
				pool "Dubainowsvc_PROD_50016"
			}
			"/RentIncreaseCalculator/*"
			{ 
				pool "Dubainowsvc_PROD_50017"
			}
			"/Universities/*"
			{ 
				pool "Dubainowsvc_PROD_50018"
			}
			"/TrafficFines/*"
			{ 
				pool "Dubainowsvc_PROD_50019"
			}
			"/Schools/*"
			{ 
				pool "Dubainowsvc_PROD_50020"
			}
			"/ATMS/*"
			{ 
				pool "Dubainowsvc_PROD_50021"
			}
			"/AccidentNotification/*"
			{ 
				pool "Dubainowsvc_PROD_50022"
			}
			"/AlJalila/*"
			{ 
				pool "Dubainowsvc_PROD_50023"
			}
			"/DMVoucher/*"
			{ 
				pool "Dubainowsvc_PROD_50024"
			}
			"/DubaiCares/*"
			{ 
				pool "Dubainowsvc_PROD_50025"
			}
			"/FuelLocator/*"
			{ 
				pool "Dubainowsvc_PROD_50026"
			}
			"/PoliceStations/*"
			{ 
				pool "Dubainowsvc_PROD_50027"
			}
			"/TasjeelCenters/*"
			{ 
				pool "Dubainowsvc_PROD_50028"
			}

			"/VaccinationPlan/*"
			{ 
				pool "Dubainowsvc_PROD_50029"
			}
			"/TradeActivitySearch/*"
			{ 
				pool "Dubainowsvc_PROD_50030"
			}
			"/WeArePolice/*"
			{ 
				pool "Dubainowsvc_PROD_50031"
			}
			"/ReserveTradeName/*"
			{ 
				pool "Dubainowsvc_PROD_50032"
			}
			"/PropertyTransactions/*"
			{ 
				pool "Dubainowsvc_PROD_50033"
			}
			"/Pharmacy/*"
			{ 
				pool "Dubainowsvc_PROD_50034"
			}
			"/MyCar/*"
			{ 
				pool "Dubainowsvc_PROD_50035"
			}
			"/Makani/*"
			{ 
				pool "Dubainowsvc_PROD_50036"
			}
			"/MaintenanceRequest/*"
			{ 
				pool "Dubainowsvc_PROD_50037"
			}
			"/Ejari/*"
			{ 
				pool "Dubainowsvc_PROD_50038"
			}
			"/Empost/*"
			{ 
				pool "Dubainowsvc_PROD_50039"
			}
			"/Dashboard/*"
			{ 
				pool "Dubainowsvc_PROD_50040"
			}
			"/ApplicationStatus/*"
			{ 
				pool "Dubainowsvc_PROD_50041"
			}
			"/CarRenewal/*"
			{ 
				pool "Dubainowsvc_PROD_50042"
			}
			"/CourtCaseInquiry/*"
			{ 
				pool "Dubainowsvc_PROD_50043"
			}
			"/Weather/*"
			{ 
				pool "Dubainowsvc_PROD_50044"
			}
			"/TrialLoanCalculator/*"
			{ 
				pool "Dubainowsvc_PROD_50045"
			}
			"/TradeLicensesList/*"
			{ 
				pool "Dubainowsvc_PROD_50046"
			}
			"/RenewTradeLicense/*"
			{ 
				pool "Dubainowsvc_PROD_50047"
			}
			"/DarAlBer/*"
			{ 
				pool "Dubainowsvc_PROD_50049"
			}
			"/NoorDubai/*"
			{ 
				pool "Dubainowsvc_PROD_50050"
			}
			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				drop
			}
		}
	} else {
		drop
	}
}
}
ltm rule /Common/ePayPROD_Global_Variables {
    when RULE_INIT
{
	set static::ePayPROD_GLOBAL_ePayURI_SrcIPs "ePayPROD_ePayURI_SrcIPs"
	set static::ePayPROD_GLOBAL_TestAuth_SrcIPs "ePayPROD_TestAuth_SrcIPs"
	set static::ePayPROD_GLOBAL_Recon_SrcIPs "ePayPROD_Recon_SrcIPs"
	set static::ePayPROD_GLOBAL_Maint_BypassIPs "ePayPROD_Maint_Bypass"
	set static::ePayPROD_GLOBAL_GIN_SrcIPs "ePayPROD_processRequestAPI"
	#set static::ePayPROD_GLOBAL_GIN_SrcIPs "ACL_SSO_PROD_GINSupernet"
}

when HTTP_REQUEST
{
	set ePayPROD_GLOBAL_BREAK_ALL 0
	set ePayPROD_GLOBAL_hostName ""
	set ePayPROD_GLOBAL_poolName ""
	set ePayPROD_GLOBAL_URI_Class ""

	switch [string tolower [HTTP::host]] { 
        "epayment.dubai.ae"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"

			# check if GSB is accessing ePay using Private or Public IPs
			switch [IP::client_addr] {
				"10.22.1.13" - "10.22.1.14" - "213.42.56.170" - "213.42.56.171"
				{
					if { ([HTTP::uri] starts_with "/epayws/") } {
						# Strip '/epayws' from the begining of the URI.
						HTTP::uri [string range [HTTP::uri] 7 end]
						set ePayPROD_GLOBAL_poolName "ePayPROD_SSL_Pool"
						pool $ePayPROD_GLOBAL_poolName
						set ePayPROD_GLOBAL_BREAK_ALL 1
					} elseif { ([HTTP::uri] starts_with "/ePayHub/") } {
						#set ePayPROD_GLOBAL_poolName "ePayPROD_SSL_Pool"
						#pool $ePayPROD_GLOBAL_poolName
					}
					else {
						drop
					}
				}	
			}
        }

		"epayment.dubai.ae:443"
	    {
			#log local0. "Access allowed for Host: [HTTP::host]"
			#log local0. "Host before replace: [HTTP::host]"
			HTTP::header replace Host "epayment.dubai.ae"

			# check if GSB is accessing ePay using Private or Public IPs
			switch [IP::client_addr] {
				"10.22.1.13" - "10.22.1.14" - "213.42.56.170" - "213.42.56.171"
				{
					if { ([HTTP::uri] starts_with "/epayws/") } {
						# Strip '/epayws' from the begining of the URI.
						HTTP::uri [string range [HTTP::uri] 7 end]
						set ePayPROD_GLOBAL_poolName "ePayPROD_SSL_Pool"
						pool $ePayPROD_GLOBAL_poolName
						set ePayPROD_GLOBAL_BREAK_ALL 1
					} elseif { ([HTTP::uri] starts_with "/ePayHub/") } {
						#set ePayPROD_GLOBAL_poolName "ePayPROD_SSL_Pool"
						#pool $ePayPROD_GLOBAL_poolName
					}
					else { 
						drop
					}
				}
			}
        }

    	default
     	{
	    	set ePayPROD_GLOBAL_BREAK_ALL 1
	    	drop
        }
    }
}
}
ltm rule /Common/ePayPROD_Maintenance {
    when RULE_INIT
{
	set static::ePayPROD_flag_maintenance 0
}

when HTTP_REQUEST {

	set ePayPROD_goToMaintenance 0

    switch [string tolower [HTTP::host]] { 
    "epayment.dubai.ae" 
	{
		if {not ([matchclass $static::ePayPROD_GLOBAL_Maint_BypassIPs equals [IP::client_addr]]) and $static::ePayPROD_flag_maintenance == 1}
			{
				set ePayPROD_goToMaintenance 1
			}


	if {$ePayPROD_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP"}
	{
		set ePayPROD_GLOBAL_BREAK_ALL 1
    	  HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
    }

    if {[HTTP::uri] ends_with "eserverrorpage.jpg"}
	{
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for epaynopage"
	    set ePayPROD_GLOBAL_BREAK_ALL 1	
        HTTP::respond 200 content [ifile get eserverrorpage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
    } elseif {[HTTP::uri] ends_with "eservrestrictip.jpg"}
	{
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for epayipblock"
	    set ePayPROD_GLOBAL_BREAK_ALL 1	
        HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
    } elseif {[HTTP::uri] ends_with "favicon.ico"}
	{
		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for favicon"
	    set ePayPROD_GLOBAL_BREAK_ALL 1	
        #HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
    }
}
}
}
}
ltm rule /Common/ePayPROD_Pool_SSL_Disable {
    when SERVER_CONNECTED
{

#Below rule disables SSL for all backend servers except for CyberSource server in Internet.	

	if  { $ePayPROD_GLOBAL_poolName != "ePayPROD_External_CS_Pool" and $ePayPROD_GLOBAL_poolName != "ePayPROD_SSL_Pool" } {
	    SSL::disable
	}

	#if  { $ePayPROD_GLOBAL_poolName != "ePayPROD_External_CS_Pool" } {
	 #   SSL::disable
	  #  } 
}
}
ltm rule /Common/ePayPROD_Pool_Select {
    when RULE_INIT
{
	set static::ePayPROD_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team.</p></body></html>"
	set static::ePayPROD_Sorry1 "<html><head></head><body><p>Access Denied for the specified Uniform Resource Locator (URL).</p></body></html>"
	set static::ePayPROD_Sorry2 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed for Reconciliation"
	set static::ePayPROD_Sorry3 "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed for Test Authentication"
	set static::ePayPROD_URI_to_Pool_mapping
	{
		"^/epay/images/====ePayPROD_Pool"
		"^/epay/styles/====ePayPROD_Pool"
		"^/epay/scripts/====ePayPROD_Pool"
		"^/epay/Common/====ePayPROD_Pool"
		"^/epay/ServiceProvider\$====ePayPROD_Pool"
		"^/epay/ServiceProvider/====ePayPROD_Pool"
		"^/epay(/.*)?\$====Restricted"
		"^/ePayHub/Authentication/====ePayPROD_SSL_Pool"
		"^/ePayHub/TestAuthentication(/.*)?\$====ePayPROD_SSL_Pool"
		"^/ePayHub/epaynmservicewar/====ePayPROD_SSL_Pool"
		"^/ePayHub/WSEntryweb====ePayPROD_SSL_Pool"
		"^/ePayHub/WSQuery====ePayPROD_SSL_Pool"
		"^/ePayReports/====eServPROD_Reports_Pool"
		"^/ePayHub/CyberSource====ePayPROD_SSL_Pool"
		"^/ePayHub/processRequestAPI====GIN_Restricted"
		"^/ePayHub/CardProcessor(/.*)?\$====ePayPROD_SSL_Pool"
		"^/ePayHub/Simulator(/.*)?\$====ePayPROD_SSL_Pool"
		"^/ePayHub/WSDL(/.*)?\$====ePayPROD_Pool"
		"^/ePayHub/fp====ePayPROD_SSL_Pool"
		#"^/ePayHub/CardProcessor(/.*)?\$====ePayPROD_SSL_Node1"
		#"^/ePayHub/epaynmservicewar/epaynmwebservice====GSB_ONLY"
		#"^/wwePayHub/Authentication/====ePayPROD_Pool"
		#"^/wwePayHub/TestAuthentication(/.*)?\$====TestAuthRestrict"
		#"^/wwePayHub/epaynmservicewar/====ePayPROD_Pool"
		#"^/wwePayHub/WSEntryweb====ePayPROD_Pool"
		#"^/wwePayHub/WSQuery====ePayPROD_Pool"
		#"^/wwePayHub/ReconciliationService/====ReconRestrict"
		#"^/ePayHub/ReconciliationService/====ReconRestrict"
		#"^/ePayHub/fp/clear.png====ePayPROD_External_CS_Pool"
		#"^/ePayHub/fp/fp.swf====ePayPROD_External_CS_Pool"
		#"^/ePayHub/fp/check.js====ePayPROD_External_CS_Pool"
		"^/ePayHub/NoqodiProcessor(/.*)?\$====ePayPROD_Pool"
	}
}

when HTTP_REQUEST
{
	if {$ePayPROD_GLOBAL_BREAK_ALL == 0 and [HTTP::host] == "epayment.dubai.ae"}
	{	
	set ePayPROD_GLOBAL_hostName [HTTP::host]
	set ePayPROD_GLOBAL_uri [HTTP::uri]

#..........Pool Selection.........................................................
#From the above list value preceeding '====' is the URI and value following is the corresponding Pool Selection
#Either Pool name is selected or a Pool classifier (Ex Restricted or TestAuthRestrict) is selected.
#Further IP restrictions are applied over Pool classifier and a pool is selected in the 'IP Restriction & Pool Assignment' segment below. 


			foreach ePayPROD_mappingRecord $static::ePayPROD_URI_to_Pool_mapping
			{
				set ePayPROD_mapping_uri [getfield $ePayPROD_mappingRecord "====" 1]
				set ePayPROD_mapping_poolName [getfield $ePayPROD_mappingRecord "====" 2]

				if {[regexp $ePayPROD_mapping_uri $ePayPROD_GLOBAL_uri] == 1}
				{
					set ePayPROD_GLOBAL_poolName $ePayPROD_mapping_poolName
					break
				}
			}

#.................................................................................


#........Rewrite iRule Selection..................................................
# Based on URI corresponding rewrite iRule is selected here.

    if {$ePayPROD_GLOBAL_uri starts_with "/epay/"}
	   {
		set ePayPROD_GLOBAL_URI_Class "ePay"
       } elseif {$ePayPROD_GLOBAL_uri starts_with "/ePayHub/"} {	 
		set ePayPROD_GLOBAL_URI_Class "ePayHub" 
	   } elseif {$ePayPROD_GLOBAL_uri starts_with "/wwePayHub/"} {
		set ePayPROD_GLOBAL_URI_Class "wwePayHub" 
	   }     

#.................................................................................

#............IP Restriction & Pool Assignment.....................................
# IP restriction is applied here. 
# If restricted a static HTTP respond message or a access retriction page is retured from www.dsg.gov.ae server.

   	switch $ePayPROD_GLOBAL_poolName
	{
	"TestAuthRestrict"
	    { 
	    if {not ([matchclass $static::ePayPROD_GLOBAL_TestAuth_SrcIPs equals [IP::client_addr]])}
		    {
	        #log local0. "URI: $ePayPROD_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
	       	set ePayPROD_GLOBAL_BREAK_ALL 1
	        #HTTP::respond 200 content $static::ePayPROD_Sorry3
		    HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
	        }
            else
		    {
		    set ePayPROD_GLOBAL_poolName "ePayPROD_Pool"
		    #log local0. "URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $ePayPROD_GLOBAL_poolName
	        }    
	    }

	"ReconRestrict"
	    { 
	    if {not ([matchclass $static::ePayPROD_GLOBAL_Recon_SrcIPs equals [IP::client_addr]])}
		    {
	        #log local0. "URI: $ePayPROD_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
	       	set ePayPROD_GLOBAL_BREAK_ALL 1
	        HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
			#HTTP::uri "/sites/maintenance/epay/iperror.aspx"
		    #HTTP::header replace "host:" "www.dsg.gov.ae"
	        #HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
	        #HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"
	        #pool "grpMaintenance_pool"
			#persist cookie insert ePayPROD_AuxPool
	        }
            else
		    {
		    set ePayPROD_GLOBAL_poolName "ePayPROD_Pool"
		    #log local0. "URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $ePayPROD_GLOBAL_poolName
	        }    
	    }

	""
        {	
			#log 10.22.5.21 local0.info "Test Log ePay-CS"
			#log local0. "URI: $ePayPROD_GLOBAL_uri & IP: [IP::client_addr] has no Pool"
	     	set ePayPROD_GLOBAL_BREAK_ALL 1
	        HTTP::respond 200 content $static::ePayPROD_Sorry1
	        #HTTP::redirect "https://epayment.si.dubai.ae/epay/ServiceProvider"
			#HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
	    }	

    "Restricted"
	    {
		# IP Based Restriction for /epay/ resource + Active-Standby Pool Selection
	   	if {not ([matchclass $static::ePayPROD_GLOBAL_ePayURI_SrcIPs equals [IP::client_addr]])}
		    {
	        #log local0. "URI: $ePayPROD_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
	    	set ePayPROD_GLOBAL_BREAK_ALL 1
	        #HTTP::respond 200 content $static::ePayPROD_Sorry
			HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
	        }
	    	else
	    	{
	    	set ePayPROD_GLOBAL_poolName "ePayPROD_ActiveStandby_Pool"
	        #log local0. "URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $ePayPROD_GLOBAL_poolName
	        }
	    }
	"GIN_Restricted"
	{
		if { not ([class match [IP::client_addr] equals $static::ePayPROD_GLOBAL_GIN_SrcIPs]) } {
		    set ePayPROD_GLOBAL_BREAK_ALL 1
	        #HTTP::respond 200 content $static::ePayPROD_Sorry3
		    HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
	        }
            else
		    {
		    set ePayPROD_GLOBAL_poolName "ePayPROD_Pool"
		    #log local0. "URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $ePayPROD_GLOBAL_poolName
	        }
		}
	"DSG_Restricted"
	{
		if { not [class match [IP::client_addr] equals $static::ePayPROD_GLOBAL_ePayURI_SrcIPs] } {
		    set ePayPROD_GLOBAL_BREAK_ALL 1
	        #HTTP::respond 200 content $static::ePayPROD_Sorry3
		    HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
	        }
            else
		    {
		    set ePayPROD_GLOBAL_poolName "ePayPROD_Pool"
		    #log local0. "URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $ePayPROD_GLOBAL_poolName
	        }
		}

	default	
	    {
	    #log local0. " Def Allow -- URI: $ePayPROD_GLOBAL_uri and Pool: $ePayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
		pool $ePayPROD_GLOBAL_poolName
	    }
    }  
}
}
}
ltm rule /Common/ePayPROD_Pool_URI_Log {
    when HTTP_REQUEST {

	###----------Logging Disabled on 11-Jan-2013 9:17 PM----------###

	if {[HTTP::uri] starts_with "/xDISABLEDxePayHub/CyberSource/ResponseProcessor"} {
		# Logging to Syslog Server
		#log 213.42.48.168 local0.info "CyberSource-ResponseProcessor Client-IP:[IP::client_addr] & HTTP POST: [HTTP::uri]"

			    if {[HTTP::method] eq "POST"}{
                    set ePayPROD_CS_clength 0  
                    # Check if there is a content-length header and the value is set to less than 1Mb
                    if {[HTTP::header exists "Content-Length"] && [HTTP::header Content-Length] <= 1048576}{
                            set ePayPROD_CS_clength [HTTP::header Content-Length]
                    } else { 
                            set ePayPROD_CS_clength 1048576
                    }

                        if {[info exists ePayPROD_CS_clength] && $ePayPROD_CS_clength > 0} {

							#log 10.22.5.21 local0.info "ePayPROD_CS: Collecting $ePayPROD_CS_clength bytes"
							#log local0. "ePayPROD_CS: Collecting $ePayPROD_CS_clength bytes"

                            #HTTP::collect $ePayPROD_CS_clength
                        }
                } 			
	}	
}



when HTTP_REQUEST_DATA {

		#log 10.22.5.21 local0.info "Test Log ePay-CS"
	    #log 10.22.5.21 local0.info "ePay-CS-Log POST: [HTTP::payload]"
		#log local0. "ePayPROD-CS-Log POST: [HTTP::payload]"

}
}
ltm rule /Common/ePayPROD_Pool_xCookie {
    when HTTP_REQUEST {
	switch $ePayPROD_GLOBAL_poolName
	{
	"ePayPROD_Pool" - "ePayPROD_SSL_Pool"
	    {
			persist cookie insert ePayPROD 0
	    }
	"ePayPROD_SSL_Node1"
		{
			persist cookie insert ePayPROD1 0
	    }
	"ePayPROD_ActiveStandby_Pool"
	    {
			persist cookie insert ePayPROD_ActiveStandby 0
	    }	
	"ePayPROD_External_CS_Pool"
	    {
			persist cookie insert ePayPROD_Ext_CS 0
	    }
	"eServPROD_Reports_Pool"
        {
		    persist cookie insert ePayPROD_Reports 0
	    }
    }   
}

when HTTP_RESPONSE
{
	foreach CookieNames [HTTP::cookie names] {
		switch $CookieNames {
			"ePayPROD" - "ePayPROD_ActiveStandby" - "ePayPROD1" -
			"ePayPROD_Ext_CS" - "ePayPROD_Reports"
			{	
				#	log local0. "cookie $CookieNames exists"
				set ckname $CookieNames
				set ckvalue [HTTP::cookie value $CookieNames]
				HTTP::cookie remove $CookieNames
				HTTP::cookie insert name $ckname value $ckvalue path "/" version 1
				HTTP::cookie secure $ckname enable
				HTTP::cookie httponly $ckname enable
			}
        }
    }
}
}
ltm rule /Common/ePayPROD_Raise_Timeout {
    when HTTP_REQUEST
{
	if {[matchclass $static::ePayPROD_GLOBAL_ePayURI_SrcIPs equals [IP::client_addr]] and $ePayPROD_GLOBAL_poolName == "ePayPROD_ActiveStandby_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0 } {

		switch -glob $ePayPROD_GLOBAL_uri {
			"/epay/ReconciliationServlet*" - "/addURIhereCaseSensitive1*" - "/addURIhereCaseSensitive2*"
		    {
			#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri - Orig timeout: [IP::idle_timeout] "
			IP::idle_timeout 11000
			#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri - New timeout: [IP::idle_timeout] "
			set ePayPROD_TimeoutAltered 1
		    }
		default 
		    {
			#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri Take no Action "
		    }
	    }	
	}
}

when SERVER_CONNECTED {

	if {[matchclass $static::ePayPROD_GLOBAL_ePayURI_SrcIPs equals [IP::client_addr]] and $ePayPROD_GLOBAL_poolName == "ePayPROD_ActiveStandby_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0 } {

	    switch -glob $ePayPROD_GLOBAL_uri {
			"/epay/ReconciliationServlet*" - "/addURIhereCaseSensitive1*" - "/addURIhereCaseSensitive2*"
		    {	
		        if {[info exists ePayPROD_TimeoutAltered] && $ePayPROD_TimeoutAltered} { 
		    	#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri - Orig timeout: [IP::idle_timeout] "
		    	IP::idle_timeout 11000
		    	#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri - New timeout: [IP::idle_timeout] "	
		        }
		    }	
		default 
		    {
			#log local0. "For - IP: [IP::client_addr] & Uri: $ePayPROD_GLOBAL_uri Take no Action "
		    }	
	    }	
    }	
}
}
ltm rule /Common/ePayPROD_Replace_JID {
    when HTTP_RESPONSE {
	if {[matchclass $static::ePayPROD_GLOBAL_ePayURI_SrcIPs equals [IP::client_addr]] and $ePayPROD_GLOBAL_poolName == "ePayPROD_Pool" and $ePayPROD_GLOBAL_URI_Class == "ePay" and $ePayPROD_GLOBAL_BREAK_ALL == 0} {

     if {$ePayPROD_GLOBAL_uri starts_with "/epay/Common/" }
	    {
		#Add the path '/epay/Common/' to JSessionID cookie if URI begins with '/epay/Common/' 	
		#log local0. "IP: [IP::client_addr] & URI: $ePayPROD_GLOBAL_uri Selected for 'Common' JID Change"	
      	 if { [HTTP::cookie "JSESSIONID"] ne "" }
		      {
               set epayCommon [HTTP::cookie "JSESSIONID"]
               HTTP::cookie remove "JSESSIONID"
               HTTP::cookie insert name "JSESSIONID" value $epayCommon path "/epay/Common/"
              }  
        } elseif {$ePayPROD_GLOBAL_uri starts_with "/epay/ServiceProvider" }
	    {
		#Add the path '/epay/ServiceProvider/' to JSessionID cookie if URI begins with '/epay/ServiceProvider' 	
		#log local0. "IP: [IP::client_addr] & URI: $ePayPROD_GLOBAL_uri Selected for 'ServiceProvider'JID Change"	
      	 if { [HTTP::cookie "JSESSIONID"] ne "" }
		      {
               set epaySP [HTTP::cookie "JSESSIONID"]
               HTTP::cookie remove "JSESSIONID"
               HTTP::cookie insert name "JSESSIONID" value $epaySP path "/epay/ServiceProvider/"
              }  
        }
}
}
}
ltm rule /Common/ePayPROD_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ePayPROD_request_uri
	{
	}
	set static::ePayPROD_request_host
	{
	}
	set static::ePayPROD_request_referer
	{
	}
	set static::ePayPROD_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ePayPROD_response_setCookie
	{
	}
	set static::ePayPROD_response_location
	{
	}
	set static::ePayPROD_response_contentLocation
	{
	}
	set static::ePayPROD_response_body
	{
	}
}

when HTTP_REQUEST
{
	# Currently UnUsed
	if {$ePayPROD_GLOBAL_URI_Class == "ePay" and $ePayPROD_GLOBAL_poolName == "ePayPROD_Pool1" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::ePayPROD_request_uri] > 0}
	{
	set ePayPROD_request_val [HTTP::uri]
	foreach ePayPROD_request_rewriteRecord $static::ePayPROD_request_uri
	{
		set ePayPROD_request_find [getfield $ePayPROD_request_rewriteRecord "====" 1]
		set ePayPROD_request_replace [getfield $ePayPROD_request_rewriteRecord "====" 2]
		if {$ePayPROD_request_replace == "nothing"}
		{
			set ePayPROD_request_replace ""
		}

		regsub -all $ePayPROD_request_find $ePayPROD_request_val $ePayPROD_request_replace ePayPROD_request_val
	}
	HTTP::uri $ePayPROD_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ePayPROD_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ePayPROD_request_val [HTTP::host]
		foreach ePayPROD_request_rewriteRecord $static::ePayPROD_request_host
		{
			set ePayPROD_request_find [getfield $ePayPROD_request_rewriteRecord "====" 1]
			set ePayPROD_request_replace [getfield $ePayPROD_request_rewriteRecord "====" 2]

			if {$ePayPROD_request_replace == "nothing"}
			{
				set ePayPROD_request_replace ""
			}
			regsub -all $ePayPROD_request_find $ePayPROD_request_val $ePayPROD_request_replace ePayPROD_request_val
		}

		HTTP::header replace Host $ePayPROD_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ePayPROD_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ePayPROD_request_val [HTTP::header value Referer]
		foreach ePayPROD_request_rewriteRecord $static::ePayPROD_request_referer
		{
			set ePayPROD_request_find [getfield $ePayPROD_request_rewriteRecord "====" 1]
			set ePayPROD_request_replace [getfield $ePayPROD_request_rewriteRecord "====" 2]

			if {$ePayPROD_request_replace == "nothing"}
			{
				set ePayPROD_request_replace ""
			}

			regsub -all $ePayPROD_request_find $ePayPROD_request_val $ePayPROD_request_replace ePayPROD_request_val
		}
		HTTP::header replace Referer $ePayPROD_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ePayPROD_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ePayPROD_request_val [HTTP::header value Cookie]
		foreach ePayPROD_request_rewriteRecord $static::ePayPROD_request_cookie
		{
			set ePayPROD_request_find [getfield $ePayPROD_request_rewriteRecord "====" 1]
			set ePayPROD_request_replace [getfield $ePayPROD_request_rewriteRecord "====" 2]

			if {$ePayPROD_request_replace == "nothing"}
			{
				set ePayPROD_request_replace ""
			}

			regsub -all $ePayPROD_request_find $ePayPROD_request_val $ePayPROD_request_replace ePayPROD_request_val
		}
		HTTP::header replace Cookie $ePayPROD_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	# Currently UnUsed
	if {$ePayPROD_GLOBAL_URI_Class == "ePay" and $ePayPROD_GLOBAL_poolName == "ePayPROD_Pool1" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ePayPROD_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ePayPROD_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ePayPROD_response_val $ePayPROD_response_val_list
		{
			foreach ePayPROD_response_rewriteRecord $static::ePayPROD_response_setCookie
			{
				set ePayPROD_response_find [getfield $ePayPROD_response_rewriteRecord "====" 1]
				set ePayPROD_response_replace [getfield $ePayPROD_response_rewriteRecord "====" 2]

				if {$ePayPROD_response_replace == "nothing"}
				{
					set ePayPROD_response_replace ""
				}
				regsub -all $ePayPROD_response_find $ePayPROD_response_val $ePayPROD_response_replace ePayPROD_response_val
			}
			HTTP::header insert Set-Cookie $ePayPROD_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ePayPROD_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ePayPROD_response_val [HTTP::header value Location]

		foreach ePayPROD_response_rewriteRecord $static::ePayPROD_response_location
		{
			set ePayPROD_response_find [getfield $ePayPROD_response_rewriteRecord "====" 1]
			set ePayPROD_response_replace [getfield $ePayPROD_response_rewriteRecord "====" 2]
			if {$ePayPROD_response_replace == "nothing"}
			{
				set ePayPROD_response_replace ""
			}

			regsub -all $ePayPROD_response_find $ePayPROD_response_val $ePayPROD_response_replace ePayPROD_response_val
		}
		HTTP::header replace Location $ePayPROD_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ePayPROD_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ePayPROD_response_val [HTTP::header value Content-Location]

		foreach ePayPROD_response_rewriteRecord $static::ePayPROD_response_contentLocation
		{
			set ePayPROD_response_find [getfield $ePayPROD_response_rewriteRecord "====" 1]
			set ePayPROD_response_replace [getfield $ePayPROD_response_rewriteRecord "====" 2]
			if {$ePayPROD_response_replace == "nothing"}
			{
				set ePayPROD_response_replace ""
			}

			regsub -all $ePayPROD_response_find $ePayPROD_response_val $ePayPROD_response_replace ePayPROD_response_val
		}
		HTTP::header replace Content-Location $ePayPROD_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::ePayPROD_response_body] > 0}
	{
	set expression ""
	foreach ePayPROD_response_rewriteRecord $static::ePayPROD_response_body
	{
		set ePayPROD_response_find [getfield $ePayPROD_response_rewriteRecord "====" 1]
		set ePayPROD_response_replace [getfield $ePayPROD_response_rewriteRecord "====" 2]
		if {$ePayPROD_response_replace == "nothing"}
		{
			set ePayPROD_response_replace ""
		}

		set expression "$expression@$ePayPROD_response_find@$ePayPROD_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/ePayPROD_Rewrite_Reports {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ePayPRODRep_request_uri
	{
		"^/ePayReports/====/reports/"
	}
	set static::ePayPRODRep_request_host
	{
	}
	set static::ePayPRODRep_request_referer
	{
	}
	set static::ePayPRODRep_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ePayPRODRep_response_setCookie
	{
	}
	set static::ePayPRODRep_response_location
	{
	}
	set static::ePayPRODRep_response_contentLocation
	{
	}
	set static::ePayPRODRep_response_body
	{
		#"\"/reports/====\"/ePayReports/"
		#"/reports/images/====/ePayReports/images/"
	}
}

when HTTP_REQUEST
{
	if {$ePayPROD_GLOBAL_poolName == "eServPROD_Reports_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::ePayPRODRep_request_uri] > 0}
	{
	set ePayPRODRep_request_val [HTTP::uri]
	foreach ePayPRODRep_request_rewriteRecord $static::ePayPRODRep_request_uri
	{
		set ePayPRODRep_request_find [getfield $ePayPRODRep_request_rewriteRecord "====" 1]
		set ePayPRODRep_request_replace [getfield $ePayPRODRep_request_rewriteRecord "====" 2]
		if {$ePayPRODRep_request_replace == "nothing"}
		{
			set ePayPRODRep_request_replace ""
		}

		regsub -all $ePayPRODRep_request_find $ePayPRODRep_request_val $ePayPRODRep_request_replace ePayPRODRep_request_val
	}
	HTTP::uri $ePayPRODRep_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ePayPRODRep_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ePayPRODRep_request_val [HTTP::host]
		foreach ePayPRODRep_request_rewriteRecord $static::ePayPRODRep_request_host
		{
			set ePayPRODRep_request_find [getfield $ePayPRODRep_request_rewriteRecord "====" 1]
			set ePayPRODRep_request_replace [getfield $ePayPRODRep_request_rewriteRecord "====" 2]

			if {$ePayPRODRep_request_replace == "nothing"}
			{
				set ePayPRODRep_request_replace ""
			}
			regsub -all $ePayPRODRep_request_find $ePayPRODRep_request_val $ePayPRODRep_request_replace ePayPRODRep_request_val
		}

		HTTP::header replace Host $ePayPRODRep_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ePayPRODRep_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ePayPRODRep_request_val [HTTP::header value Referer]
		foreach ePayPRODRep_request_rewriteRecord $static::ePayPRODRep_request_referer
		{
			set ePayPRODRep_request_find [getfield $ePayPRODRep_request_rewriteRecord "====" 1]
			set ePayPRODRep_request_replace [getfield $ePayPRODRep_request_rewriteRecord "====" 2]

			if {$ePayPRODRep_request_replace == "nothing"}
			{
				set ePayPRODRep_request_replace ""
			}

			regsub -all $ePayPRODRep_request_find $ePayPRODRep_request_val $ePayPRODRep_request_replace ePayPRODRep_request_val
		}
		HTTP::header replace Referer $ePayPRODRep_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ePayPRODRep_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ePayPRODRep_request_val [HTTP::header value Cookie]
		foreach ePayPRODRep_request_rewriteRecord $static::ePayPRODRep_request_cookie
		{
			set ePayPRODRep_request_find [getfield $ePayPRODRep_request_rewriteRecord "====" 1]
			set ePayPRODRep_request_replace [getfield $ePayPRODRep_request_rewriteRecord "====" 2]

			if {$ePayPRODRep_request_replace == "nothing"}
			{
				set ePayPRODRep_request_replace ""
			}

			regsub -all $ePayPRODRep_request_find $ePayPRODRep_request_val $ePayPRODRep_request_replace ePayPRODRep_request_val
		}
		HTTP::header replace Cookie $ePayPRODRep_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$ePayPROD_GLOBAL_poolName == "eServPROD_Reports_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ePayPRODRep_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ePayPRODRep_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ePayPRODRep_response_val $ePayPRODRep_response_val_list
		{
			foreach ePayPRODRep_response_rewriteRecord $static::ePayPRODRep_response_setCookie
			{
				set ePayPRODRep_response_find [getfield $ePayPRODRep_response_rewriteRecord "====" 1]
				set ePayPRODRep_response_replace [getfield $ePayPRODRep_response_rewriteRecord "====" 2]

				if {$ePayPRODRep_response_replace == "nothing"}
				{
					set ePayPRODRep_response_replace ""
				}
				regsub -all $ePayPRODRep_response_find $ePayPRODRep_response_val $ePayPRODRep_response_replace ePayPRODRep_response_val
			}
			HTTP::header insert Set-Cookie $ePayPRODRep_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ePayPRODRep_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ePayPRODRep_response_val [HTTP::header value Location]

		foreach ePayPRODRep_response_rewriteRecord $static::ePayPRODRep_response_location
		{
			set ePayPRODRep_response_find [getfield $ePayPRODRep_response_rewriteRecord "====" 1]
			set ePayPRODRep_response_replace [getfield $ePayPRODRep_response_rewriteRecord "====" 2]
			if {$ePayPRODRep_response_replace == "nothing"}
			{
				set ePayPRODRep_response_replace ""
			}

			regsub -all $ePayPRODRep_response_find $ePayPRODRep_response_val $ePayPRODRep_response_replace ePayPRODRep_response_val
		}
		HTTP::header replace Location $ePayPRODRep_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ePayPRODRep_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ePayPRODRep_response_val [HTTP::header value Content-Location]

		foreach ePayPRODRep_response_rewriteRecord $static::ePayPRODRep_response_contentLocation
		{
			set ePayPRODRep_response_find [getfield $ePayPRODRep_response_rewriteRecord "====" 1]
			set ePayPRODRep_response_replace [getfield $ePayPRODRep_response_rewriteRecord "====" 2]
			if {$ePayPRODRep_response_replace == "nothing"}
			{
				set ePayPRODRep_response_replace ""
			}

			regsub -all $ePayPRODRep_response_find $ePayPRODRep_response_val $ePayPRODRep_response_replace ePayPRODRep_response_val
		}
		HTTP::header replace Content-Location $ePayPRODRep_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::ePayPRODRep_response_body] > 0}
	{
	set expression ""
	foreach ePayPRODRep_response_rewriteRecord $static::ePayPRODRep_response_body
	{
		set ePayPRODRep_response_find [getfield $ePayPRODRep_response_rewriteRecord "====" 1]
		set ePayPRODRep_response_replace [getfield $ePayPRODRep_response_rewriteRecord "====" 2]
		if {$ePayPRODRep_response_replace == "nothing"}
		{
			set ePayPRODRep_response_replace ""
		}

		set expression "$expression@$ePayPRODRep_response_find@$ePayPRODRep_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/ePayPROD_Rewrite_ePayHub {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ePayPROD_ePayHub_request_uri
	{
	    "^/ePayHub/Authentication/====/Authentication/"
		"^/ePayHub/TestAuthentication(/)?\$====/TestAuthentication/TransactionSimulator.jsp"
		"^/ePayHub/TestAuthentication/====/TestAuthentication/"
		"^/ePayHub/epaynmservicewar/====/epaynmservicewar/"
		"^/ePayHub/WSEntryweb/WSEntry====/WSEntryweb/WSEntry"
		"^/ePayHub/WSEntryweb====/WSEntryweb/WSEntry"
		"^/ePayHub/WSQuery====/WSQuery"
		"^/ePayHub/ReconciliationService/====/ReconciliationService/"
		"^/ePayHub/CyberSource====/CyberSource"
		"^/ePayHub/processRequestAPI====/ePay5PaymentApi/services/PaymentAPIService"
		"^/ePayHub/WSDL====/ePay5PaymentApi/wsdl"
		"^/ePayHub/CardProcessor====/ePay5CardProcessor"
		"^/ePayHub/Simulator====/epay5/simulator"
	}
	set static::ePayPROD_ePayHub_request_host
	{
	}
	set static::ePayPROD_ePayHub_request_referer
	{
	}
	set static::ePayPROD_ePayHub_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ePayPROD_ePayHub_response_setCookie
	{
	}
	set static::ePayPROD_ePayHub_response_location
	{
		"http://epayment.dubai.ae====https://epayment.dubai.ae"
	}
	set static::ePayPROD_ePayHub_response_contentLocation
	{
	}
	set static::ePayPROD_ePayHub_response_body
	{
		"http://epayment.dubai.ae====https://epayment.dubai.ae"
		"http://epayment.dubai.ae:80====https://epayment.dubai.ae"
		"https://epayment.dubai.ae:443====https://epayment.dubai.ae"
		"/WSEntryweb/====/ePayHub/WSEntryweb/"
		"/WSQuery====/ePayHub/WSQuery"
		"/epaynmservicewar/====/ePayHub/epaynmservicewar/"
	}
}

when HTTP_REQUEST
{
	if {$ePayPROD_GLOBAL_URI_Class == "ePayHub" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_request_uri] > 0}
	{
	set ePayPROD_ePayHub_request_val [HTTP::uri]
	foreach ePayPROD_ePayHub_request_rewriteRecord $static::ePayPROD_ePayHub_request_uri
	{
		set ePayPROD_ePayHub_request_find [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 1]
		set ePayPROD_ePayHub_request_replace [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 2]
		if {$ePayPROD_ePayHub_request_replace == "nothing"}
		{
			set ePayPROD_ePayHub_request_replace ""
		}

		regsub -all $ePayPROD_ePayHub_request_find $ePayPROD_ePayHub_request_val $ePayPROD_ePayHub_request_replace ePayPROD_ePayHub_request_val
	}
	HTTP::uri $ePayPROD_ePayHub_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ePayPROD_ePayHub_request_val [HTTP::host]
		foreach ePayPROD_ePayHub_request_rewriteRecord $static::ePayPROD_ePayHub_request_host
		{
			set ePayPROD_ePayHub_request_find [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_request_replace [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_request_replace ""
			}
			regsub -all $ePayPROD_ePayHub_request_find $ePayPROD_ePayHub_request_val $ePayPROD_ePayHub_request_replace ePayPROD_ePayHub_request_val
		}

		HTTP::header replace Host $ePayPROD_ePayHub_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ePayPROD_ePayHub_request_val [HTTP::header value Referer]
		foreach ePayPROD_ePayHub_request_rewriteRecord $static::ePayPROD_ePayHub_request_referer
		{
			set ePayPROD_ePayHub_request_find [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_request_replace [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_request_replace ""
			}

			regsub -all $ePayPROD_ePayHub_request_find $ePayPROD_ePayHub_request_val $ePayPROD_ePayHub_request_replace ePayPROD_ePayHub_request_val
		}
		HTTP::header replace Referer $ePayPROD_ePayHub_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ePayPROD_ePayHub_request_val [HTTP::header value Cookie]
		foreach ePayPROD_ePayHub_request_rewriteRecord $static::ePayPROD_ePayHub_request_cookie
		{
			set ePayPROD_ePayHub_request_find [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_request_replace [getfield $ePayPROD_ePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_request_replace ""
			}

			regsub -all $ePayPROD_ePayHub_request_find $ePayPROD_ePayHub_request_val $ePayPROD_ePayHub_request_replace ePayPROD_ePayHub_request_val
		}
		HTTP::header replace Cookie $ePayPROD_ePayHub_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$ePayPROD_GLOBAL_URI_Class == "ePayHub" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ePayPROD_ePayHub_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ePayPROD_ePayHub_response_val $ePayPROD_ePayHub_response_val_list
		{
			foreach ePayPROD_ePayHub_response_rewriteRecord $static::ePayPROD_ePayHub_response_setCookie
			{
				set ePayPROD_ePayHub_response_find [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 1]
				set ePayPROD_ePayHub_response_replace [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 2]

				if {$ePayPROD_ePayHub_response_replace == "nothing"}
				{
					set ePayPROD_ePayHub_response_replace ""
				}
				regsub -all $ePayPROD_ePayHub_response_find $ePayPROD_ePayHub_response_val $ePayPROD_ePayHub_response_replace ePayPROD_ePayHub_response_val
			}
			HTTP::header insert Set-Cookie $ePayPROD_ePayHub_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ePayPROD_ePayHub_response_val [HTTP::header value Location]

		foreach ePayPROD_ePayHub_response_rewriteRecord $static::ePayPROD_ePayHub_response_location
		{
			set ePayPROD_ePayHub_response_find [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_response_replace [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 2]
			if {$ePayPROD_ePayHub_response_replace == "nothing"}
			{
				set ePayPROD_ePayHub_response_replace ""
			}

			regsub -all $ePayPROD_ePayHub_response_find $ePayPROD_ePayHub_response_val $ePayPROD_ePayHub_response_replace ePayPROD_ePayHub_response_val
		}
		HTTP::header replace Location $ePayPROD_ePayHub_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ePayPROD_ePayHub_response_val [HTTP::header value Content-Location]

		foreach ePayPROD_ePayHub_response_rewriteRecord $static::ePayPROD_ePayHub_response_contentLocation
		{
			set ePayPROD_ePayHub_response_find [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_response_replace [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 2]
			if {$ePayPROD_ePayHub_response_replace == "nothing"}
			{
				set ePayPROD_ePayHub_response_replace ""
			}

			regsub -all $ePayPROD_ePayHub_response_find $ePayPROD_ePayHub_response_val $ePayPROD_ePayHub_response_replace ePayPROD_ePayHub_response_val
		}
		HTTP::header replace Content-Location $ePayPROD_ePayHub_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::ePayPROD_ePayHub_response_body] > 0}
	{
	set expression ""
	foreach ePayPROD_ePayHub_response_rewriteRecord $static::ePayPROD_ePayHub_response_body
	{
		set ePayPROD_ePayHub_response_find [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 1]
		set ePayPROD_ePayHub_response_replace [getfield $ePayPROD_ePayHub_response_rewriteRecord "====" 2]
		if {$ePayPROD_ePayHub_response_replace == "nothing"}
		{
			set ePayPROD_ePayHub_response_replace ""
		}

		set expression "$expression@$ePayPROD_ePayHub_response_find@$ePayPROD_ePayHub_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/ePayPROD_Rewrite_ePayHub_Ext_CS {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ePayPROD_ePayHub_EXT_CS_request_uri
	{
		#"^/ePayHub/fp/clear.png====/fp/clear.png"
		#"^/ePayHub/fp/fp.swf====/fp/fp.swf"
		#"^/ePayHub/fp/check.js====/fp/check.js"
		"^/ePayHub/fp====/fp"
	}
	set static::ePayPROD_ePayHub_EXT_CS_request_host
	{
		"epayment.dubai.ae====h.online-metrix.net"
	}
	set static::ePayPROD_ePayHub_EXT_CS_request_referer
	{
	}
	set static::ePayPROD_ePayHub_EXT_CS_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ePayPROD_ePayHub_EXT_CS_response_setCookie
	{
	}
	set static::ePayPROD_ePayHub_EXT_CS_response_location
	{
		#"http://epayment.si.dubai.ae====https://epayment.si.dubai.ae"
		"h.online-metrix.net/fp====epayment.dubai.ae/ePayHub/fp"
	}
	set static::ePayPROD_ePayHub_EXT_CS_response_contentLocation
	{
	}
	set static::ePayPROD_ePayHub_EXT_CS_response_body
	{
		#"http://epayment.qa.dubai.ae====https://epayment.qa.dubai.ae"
		#"http://epayment.qa.dubai.ae:80====https://epayment.qa.dubai.ae"
		#"epayment.qa.dubai.ae/fp/====epayment.qa.dubai.ae/ePayHub/fp/"
	    "h.online-metrix.net/fp====epayment.dubai.ae/ePayHub/fp"
	}
}

when HTTP_REQUEST
{
	if {$ePayPROD_GLOBAL_poolName == "ePayPROD_External_CS_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_request_uri] > 0}
	{
	set ePayPROD_ePayHub_EXT_CS_request_val [HTTP::uri]
	foreach ePayPROD_ePayHub_EXT_CS_request_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_request_uri
	{
		set ePayPROD_ePayHub_EXT_CS_request_find [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 1]
		set ePayPROD_ePayHub_EXT_CS_request_replace [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 2]
		if {$ePayPROD_ePayHub_EXT_CS_request_replace == "nothing"}
		{
			set ePayPROD_ePayHub_EXT_CS_request_replace ""
		}

		regsub -all $ePayPROD_ePayHub_EXT_CS_request_find $ePayPROD_ePayHub_EXT_CS_request_val $ePayPROD_ePayHub_EXT_CS_request_replace ePayPROD_ePayHub_EXT_CS_request_val
	}
	HTTP::uri $ePayPROD_ePayHub_EXT_CS_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ePayPROD_ePayHub_EXT_CS_request_val [HTTP::host]
		foreach ePayPROD_ePayHub_EXT_CS_request_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_request_host
		{
			set ePayPROD_ePayHub_EXT_CS_request_find [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_EXT_CS_request_replace [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_EXT_CS_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_EXT_CS_request_replace ""
			}
			regsub -all $ePayPROD_ePayHub_EXT_CS_request_find $ePayPROD_ePayHub_EXT_CS_request_val $ePayPROD_ePayHub_EXT_CS_request_replace ePayPROD_ePayHub_EXT_CS_request_val
		}

		HTTP::header replace Host $ePayPROD_ePayHub_EXT_CS_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ePayPROD_ePayHub_EXT_CS_request_val [HTTP::header value Referer]
		foreach ePayPROD_ePayHub_EXT_CS_request_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_request_referer
		{
			set ePayPROD_ePayHub_EXT_CS_request_find [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_EXT_CS_request_replace [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_EXT_CS_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_EXT_CS_request_replace ""
			}

			regsub -all $ePayPROD_ePayHub_EXT_CS_request_find $ePayPROD_ePayHub_EXT_CS_request_val $ePayPROD_ePayHub_EXT_CS_request_replace ePayPROD_ePayHub_EXT_CS_request_val
		}
		HTTP::header replace Referer $ePayPROD_ePayHub_EXT_CS_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ePayPROD_ePayHub_EXT_CS_request_val [HTTP::header value Cookie]
		foreach ePayPROD_ePayHub_EXT_CS_request_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_request_cookie
		{
			set ePayPROD_ePayHub_EXT_CS_request_find [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_EXT_CS_request_replace [getfield $ePayPROD_ePayHub_EXT_CS_request_rewriteRecord "====" 2]

			if {$ePayPROD_ePayHub_EXT_CS_request_replace == "nothing"}
			{
				set ePayPROD_ePayHub_EXT_CS_request_replace ""
			}

			regsub -all $ePayPROD_ePayHub_EXT_CS_request_find $ePayPROD_ePayHub_EXT_CS_request_val $ePayPROD_ePayHub_EXT_CS_request_replace ePayPROD_ePayHub_EXT_CS_request_val
		}
		HTTP::header replace Cookie $ePayPROD_ePayHub_EXT_CS_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$ePayPROD_GLOBAL_poolName == "ePayPROD_External_CS_Pool" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ePayPROD_ePayHub_EXT_CS_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ePayPROD_ePayHub_EXT_CS_response_val $ePayPROD_ePayHub_EXT_CS_response_val_list
		{
			foreach ePayPROD_ePayHub_EXT_CS_response_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_response_setCookie
			{
				set ePayPROD_ePayHub_EXT_CS_response_find [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 1]
				set ePayPROD_ePayHub_EXT_CS_response_replace [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 2]

				if {$ePayPROD_ePayHub_EXT_CS_response_replace == "nothing"}
				{
					set ePayPROD_ePayHub_EXT_CS_response_replace ""
				}
				regsub -all $ePayPROD_ePayHub_EXT_CS_response_find $ePayPROD_ePayHub_EXT_CS_response_val $ePayPROD_ePayHub_EXT_CS_response_replace ePayPROD_ePayHub_EXT_CS_response_val
			}
			HTTP::header insert Set-Cookie $ePayPROD_ePayHub_EXT_CS_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ePayPROD_ePayHub_EXT_CS_response_val [HTTP::header value Location]

		foreach ePayPROD_ePayHub_EXT_CS_response_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_response_location
		{
			set ePayPROD_ePayHub_EXT_CS_response_find [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_EXT_CS_response_replace [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 2]
			if {$ePayPROD_ePayHub_EXT_CS_response_replace == "nothing"}
			{
				set ePayPROD_ePayHub_EXT_CS_response_replace ""
			}

			regsub -all $ePayPROD_ePayHub_EXT_CS_response_find $ePayPROD_ePayHub_EXT_CS_response_val $ePayPROD_ePayHub_EXT_CS_response_replace ePayPROD_ePayHub_EXT_CS_response_val
		}
		HTTP::header replace Location $ePayPROD_ePayHub_EXT_CS_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ePayPROD_ePayHub_EXT_CS_response_val [HTTP::header value Content-Location]

		foreach ePayPROD_ePayHub_EXT_CS_response_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_response_contentLocation
		{
			set ePayPROD_ePayHub_EXT_CS_response_find [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 1]
			set ePayPROD_ePayHub_EXT_CS_response_replace [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 2]
			if {$ePayPROD_ePayHub_EXT_CS_response_replace == "nothing"}
			{
				set ePayPROD_ePayHub_EXT_CS_response_replace ""
			}

			regsub -all $ePayPROD_ePayHub_EXT_CS_response_find $ePayPROD_ePayHub_EXT_CS_response_val $ePayPROD_ePayHub_EXT_CS_response_replace ePayPROD_ePayHub_EXT_CS_response_val
		}
		HTTP::header replace Content-Location $ePayPROD_ePayHub_EXT_CS_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::ePayPROD_ePayHub_EXT_CS_response_body] > 0}
	{
	set expression ""
	foreach ePayPROD_ePayHub_EXT_CS_response_rewriteRecord $static::ePayPROD_ePayHub_EXT_CS_response_body
	{
		set ePayPROD_ePayHub_EXT_CS_response_find [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 1]
		set ePayPROD_ePayHub_EXT_CS_response_replace [getfield $ePayPROD_ePayHub_EXT_CS_response_rewriteRecord "====" 2]
		if {$ePayPROD_ePayHub_EXT_CS_response_replace == "nothing"}
		{
			set ePayPROD_ePayHub_EXT_CS_response_replace ""
		}

		set expression "$expression@$ePayPROD_ePayHub_EXT_CS_response_find@$ePayPROD_ePayHub_EXT_CS_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/ePayPROD_Rewrite_wwePayHub {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::ePayPROD_wwePayHub_request_uri
	{
		"^/wwePayHub/Authentication/====/Authentication/"
		"^/wwePayHub/TestAuthentication(/)?\$====/TestAuthentication/TransactionSimulator.jsp"
		"^/wwePayHub/TestAuthentication/====/TestAuthentication/"
		"^/wwePayHub/epaynmservicewar/====/epaynmservicewar/"
		"^/wwePayHub/WSEntryweb/WSEntry====/WSEntryweb/WSEntry"
		"^/wwePayHub/WSEntryweb====/WSEntryweb/WSEntry"
		"^/wwePayHub/WSQuery====/WSQuery"
		"^/wwePayHub/ReconciliationService/====/ReconciliationService/"
	}
	set static::ePayPROD_wwePayHub_request_host
	{
	}
	set static::ePayPROD_wwePayHub_request_referer
	{
	}
	set static::ePayPROD_wwePayHub_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::ePayPROD_wwePayHub_response_setCookie
	{
	}
	set static::ePayPROD_wwePayHub_response_location
	{
		"http://epayment.dubai.ae====https://epayment.dubai.ae"
	}
	set static::ePayPROD_wwePayHub_response_contentLocation
	{
	}
	set static::ePayPROD_wwePayHub_response_body
	{
		"http://epayment.dubai.ae====https://epayment.dubai.ae"
		"http://epayment.dubai.ae:80====https://epayment.dubai.ae"
		"https://epayment.dubai.ae:443====https://epayment.dubai.ae"
		"/WSEntryweb/====/wwePayHub/WSEntryweb/"
		"/WSQuery====/wwePayHub/WSQuery"
		"/epaynmservicewar/====/wwePayHub/epaynmservicewar/"
	}
}

when HTTP_REQUEST
{
	if {$ePayPROD_GLOBAL_URI_Class == "wwePayHub" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::ePayPROD_wwePayHub_request_uri] > 0}
	{
	set ePayPROD_wwePayHub_request_val [HTTP::uri]
	foreach ePayPROD_wwePayHub_request_rewriteRecord $static::ePayPROD_wwePayHub_request_uri
	{
		set ePayPROD_wwePayHub_request_find [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 1]
		set ePayPROD_wwePayHub_request_replace [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 2]
		if {$ePayPROD_wwePayHub_request_replace == "nothing"}
		{
			set ePayPROD_wwePayHub_request_replace ""
		}

		regsub -all $ePayPROD_wwePayHub_request_find $ePayPROD_wwePayHub_request_val $ePayPROD_wwePayHub_request_replace ePayPROD_wwePayHub_request_val
	}
	HTTP::uri $ePayPROD_wwePayHub_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::ePayPROD_wwePayHub_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set ePayPROD_wwePayHub_request_val [HTTP::host]
		foreach ePayPROD_wwePayHub_request_rewriteRecord $static::ePayPROD_wwePayHub_request_host
		{
			set ePayPROD_wwePayHub_request_find [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_wwePayHub_request_replace [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_wwePayHub_request_replace == "nothing"}
			{
				set ePayPROD_wwePayHub_request_replace ""
			}
			regsub -all $ePayPROD_wwePayHub_request_find $ePayPROD_wwePayHub_request_val $ePayPROD_wwePayHub_request_replace ePayPROD_wwePayHub_request_val
		}

		HTTP::header replace Host $ePayPROD_wwePayHub_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::ePayPROD_wwePayHub_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set ePayPROD_wwePayHub_request_val [HTTP::header value Referer]
		foreach ePayPROD_wwePayHub_request_rewriteRecord $static::ePayPROD_wwePayHub_request_referer
		{
			set ePayPROD_wwePayHub_request_find [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_wwePayHub_request_replace [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_wwePayHub_request_replace == "nothing"}
			{
				set ePayPROD_wwePayHub_request_replace ""
			}

			regsub -all $ePayPROD_wwePayHub_request_find $ePayPROD_wwePayHub_request_val $ePayPROD_wwePayHub_request_replace ePayPROD_wwePayHub_request_val
		}
		HTTP::header replace Referer $ePayPROD_wwePayHub_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::ePayPROD_wwePayHub_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set ePayPROD_wwePayHub_request_val [HTTP::header value Cookie]
		foreach ePayPROD_wwePayHub_request_rewriteRecord $static::ePayPROD_wwePayHub_request_cookie
		{
			set ePayPROD_wwePayHub_request_find [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 1]
			set ePayPROD_wwePayHub_request_replace [getfield $ePayPROD_wwePayHub_request_rewriteRecord "====" 2]

			if {$ePayPROD_wwePayHub_request_replace == "nothing"}
			{
				set ePayPROD_wwePayHub_request_replace ""
			}

			regsub -all $ePayPROD_wwePayHub_request_find $ePayPROD_wwePayHub_request_val $ePayPROD_wwePayHub_request_replace ePayPROD_wwePayHub_request_val
		}
		HTTP::header replace Cookie $ePayPROD_wwePayHub_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$ePayPROD_GLOBAL_URI_Class == "wwePayHub" and $ePayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::ePayPROD_wwePayHub_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set ePayPROD_wwePayHub_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach ePayPROD_wwePayHub_response_val $ePayPROD_wwePayHub_response_val_list
		{
			foreach ePayPROD_wwePayHub_response_rewriteRecord $static::ePayPROD_wwePayHub_response_setCookie
			{
				set ePayPROD_wwePayHub_response_find [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 1]
				set ePayPROD_wwePayHub_response_replace [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 2]

				if {$ePayPROD_wwePayHub_response_replace == "nothing"}
				{
					set ePayPROD_wwePayHub_response_replace ""
				}
				regsub -all $ePayPROD_wwePayHub_response_find $ePayPROD_wwePayHub_response_val $ePayPROD_wwePayHub_response_replace ePayPROD_wwePayHub_response_val
			}
			HTTP::header insert Set-Cookie $ePayPROD_wwePayHub_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::ePayPROD_wwePayHub_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set ePayPROD_wwePayHub_response_val [HTTP::header value Location]

		foreach ePayPROD_wwePayHub_response_rewriteRecord $static::ePayPROD_wwePayHub_response_location
		{
			set ePayPROD_wwePayHub_response_find [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 1]
			set ePayPROD_wwePayHub_response_replace [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 2]
			if {$ePayPROD_wwePayHub_response_replace == "nothing"}
			{
				set ePayPROD_wwePayHub_response_replace ""
			}

			regsub -all $ePayPROD_wwePayHub_response_find $ePayPROD_wwePayHub_response_val $ePayPROD_wwePayHub_response_replace ePayPROD_wwePayHub_response_val
		}
		HTTP::header replace Location $ePayPROD_wwePayHub_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::ePayPROD_wwePayHub_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set ePayPROD_wwePayHub_response_val [HTTP::header value Content-Location]

		foreach ePayPROD_wwePayHub_response_rewriteRecord $static::ePayPROD_wwePayHub_response_contentLocation
		{
			set ePayPROD_wwePayHub_response_find [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 1]
			set ePayPROD_wwePayHub_response_replace [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 2]
			if {$ePayPROD_wwePayHub_response_replace == "nothing"}
			{
				set ePayPROD_wwePayHub_response_replace ""
			}

			regsub -all $ePayPROD_wwePayHub_response_find $ePayPROD_wwePayHub_response_val $ePayPROD_wwePayHub_response_replace ePayPROD_wwePayHub_response_val
		}
		HTTP::header replace Content-Location $ePayPROD_wwePayHub_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::ePayPROD_wwePayHub_response_body] > 0}
	{
	set expression ""
	foreach ePayPROD_wwePayHub_response_rewriteRecord $static::ePayPROD_wwePayHub_response_body
	{
		set ePayPROD_wwePayHub_response_find [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 1]
		set ePayPROD_wwePayHub_response_replace [getfield $ePayPROD_wwePayHub_response_rewriteRecord "====" 2]
		if {$ePayPROD_wwePayHub_response_replace == "nothing"}
		{
			set ePayPROD_wwePayHub_response_replace ""
		}

		set expression "$expression@$ePayPROD_wwePayHub_response_find@$ePayPROD_wwePayHub_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/ePayPROD_for_mPayPROD_iRule {
    when HTTP_REQUEST {
    # Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] { 
     "epayment.dubai.ae" - "epayment.dubai.ae:443"
	{
     if { ([HTTP::uri] starts_with "/WSEntryweb/") || ([HTTP::uri] starts_with "/epaynmservicewar/") || ([HTTP::uri] starts_with "/PaymentWS/") || ([HTTP::uri] starts_with "/CyberSource/TransactionQueryProcessor") } {
	        pool ePayPROD_Internal_Pool
            }   else {
		             drop
		             }
    }
    default {
		     drop
		    }
}  

}
}
ltm rule /Common/eServPROD_DSS_for_eServPROD_GSB_iRule {
    when HTTP_REQUEST
{
    # Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] { 
		"gsb2dss:9763" - "apitodss:9763" - "apitodss"
		{
			if { ([HTTP::uri] starts_with "/services/") } {
				pool eServPROD_DSS_Internal_Pool
			} else {
				drop
			}
		}
		default {
			drop
		}

		 "dss.dubai.gov.ae:9763"
		{
			if { ([HTTP::uri] starts_with "/services/") } {
				pool eServPROD_DSS_Internal_Cloud_Pool
			} else {
				drop
			}
		}
		default {
			drop
		}
	}  

}
}
ltm rule /Common/eServPROD_GSB_Global_Variables {
    when RULE_INIT
{
	#set static::eServPROD_GSB_GLOBAL_Maint_BypassIPs "eServPROD_GSB_Maint_Bypass"
	set static::eServPROD_GSB_GLOBAL_GRPSrcIPs "eServPROD_GSB_GRPSrc"
	set static::eServPROD_GSB_GLOBAL_TLSrcIPs "eServPROD_GSB_TLSrc"
	set static::eServPROD_GSB_GLOBAL_DLD_RERASrcIPs "eServPROD_GSB_DLD_RERASrc"

	set static::eServPROD_GSB_Sorry2 "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"
	set static::eServPROD_flag_maintenance 0
}


when HTTP_REQUEST
{
	set eServPROD_GSB_GLOBAL_BREAK_ALL 0
	set eServPROD_GSB_GLOBAL_hostName ""
	set eServPROD_GSB_GLOBAL_uri ""
	set eServPROD_GSB_GLOBAL_poolName ""
	set eServPROD_GSB_GLOBAL_URI_Class ""

	if { ($static::eServPROD_flag_maintenance == 1 and (not ([IP::client_addr] equals "213.42.50.181"))) or ([IP::client_addr] equals "MP_Enabled_IP") or ([IP::client_addr] equals "213.42.55.99") or ([IP::client_addr] equals "213.42.50.172") } {

		HTTP::respond 200 content $static::eServPROD_GSB_Sorry2
		set eServPROD_GSB_GLOBAL_BREAK_ALL 1
	}
}
}
ltm rule /Common/eServPROD_GSB_Pool_SSL_Disable {
    when SERVER_CONNECTED {
	if  { $eServPROD_GSB_GLOBAL_poolName != "eServPROD_ESB_8244_Pool" } {
		#log local0. "SSL disabled for URI: $eServPROD_GSB_GLOBAL_uri & Pool: $eServPROD_GSB_GLOBAL_poolName"
	    SSL::disable
	    } 
}
}
ltm rule /Common/eServPROD_GSB_Pool_Select {
    when RULE_INIT
{
	set static::eServPROD_GSB_Sorry1 "<html><head></head><body><p>Access Denied...!!! Invalid URI. For assistance contact DeG Support Team.</p></body></html>"
	set static::eServPROD_GSB_Sorry "<html><head></head><body><p>Access Denied...!!! Your IP is not Allowed. For assistance contact DeG Support Team.</p></body></html>"
	set static::eServPROD_GSB_URI_to_Pool_mapping
	{
		"^/services====Restricted_TL"
		"^/GRP====Restricted_GIN"
		"^/secure/DEWAAccNoWebService====Restricted_RERA_DLD"
		"^/secure====eServPROD_ESB_8244_Pool"
		"^/secure/GRPTransactionsService====Restricted_TL"
		"^/secure/DMPMSAcquisitionWebService====Restricted_TL"
		"^/secure/DMPMSHoldReplaceWS====Restricted_TL"
		"^/secure/DMPMSRefundWS====Restricted_TL"

	}
}

when HTTP_REQUEST
{
	if {$eServPROD_GSB_GLOBAL_BREAK_ALL == 0 } {

		if {[HTTP::host] == "gsb.dubai.gov.ae" or [HTTP::host] == "gsb.dubai.gov.ae:443" } {

			set eServPROD_GSB_GLOBAL_hostName [HTTP::host]
			set eServPROD_GSB_GLOBAL_uri [HTTP::uri]

		#..........Pool Selection.........................................................


					foreach eServPROD_GSB_mappingRecord $static::eServPROD_GSB_URI_to_Pool_mapping
					{
						set eServPROD_GSB_mapping_uri [getfield $eServPROD_GSB_mappingRecord "====" 1]
						set eServPROD_GSB_mapping_poolName [getfield $eServPROD_GSB_mappingRecord "====" 2]

						if {[regexp $eServPROD_GSB_mapping_uri $eServPROD_GSB_GLOBAL_uri] == 1}
						{
							set eServPROD_GSB_GLOBAL_poolName $eServPROD_GSB_mapping_poolName
							break
						}
					}

		#.................................................................................


		#........Rewrite iRule Selection..................................................

			if {$eServPROD_GSB_GLOBAL_uri starts_with "/GRP"}
			   {
				set eServPROD_GSB_GLOBAL_URI_Class "GRP"
			   } elseif {$eServPROD_GSB_GLOBAL_uri starts_with "/secure"} {	 
				set eServPROD_GSB_GLOBAL_URI_Class "secure"
				#log local0. "Class: $eServPROD_GSB_GLOBAL_URI_Class"
			   } 
		#.................................................................................

		#.............................Pool Assignment.....................................

			switch $eServPROD_GSB_GLOBAL_poolName
			{

				""
				{
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri is Blocked"
					set eServPROD_GSB_GLOBAL_BREAK_ALL 1
					#HTTP::respond 200 content $static::eServPROD_GSB_Sorry1
					drop
				}

				"Restricted_TL"
				{
				# /services Only allowed for TL Sources (DED) 
				if {not ([matchclass $static::eServPROD_GSB_GLOBAL_TLSrcIPs equals [IP::client_addr]])}
					{
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
					set eServPROD_GSB_GLOBAL_BREAK_ALL 1
					#HTTP::respond 200 content $static::eServPROD_GSB_Sorry
					drop
					}
					else
					{
					set eServPROD_GSB_GLOBAL_poolName "eServPROD_ESB_8244_Pool"
					#log local0. " TL URI: $eServPROD_GSB_GLOBAL_uri and Pool: $eServPROD_GSB_GLOBAL_poolName allowed for IP: [IP::client_addr]"
					pool $eServPROD_GSB_GLOBAL_poolName
					}
				}

				"Restricted_GIN"
				{
				# /GRP Only allowed for GIN Subnets 
				if {not ([matchclass $static::eServPROD_GSB_GLOBAL_GRPSrcIPs equals [IP::client_addr]])}
					{
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
					set eServPROD_GSB_GLOBAL_BREAK_ALL 1
					#HTTP::respond 200 content $static::eServPROD_GSB_Sorry
					drop
					}
					else
					{
					set eServPROD_GSB_GLOBAL_poolName "eServPROD_ESB_8244_Pool"
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri and Pool: $eServPROD_GSB_GLOBAL_poolName allowed for IP: [IP::client_addr]"
					pool $eServPROD_GSB_GLOBAL_poolName
					}
				}

				"Restricted_RERA_DLD"
				{
				# /secure/DEWAAccNoWebService Only allowed for DLD(RERA) 
				if {not ([matchclass $static::eServPROD_GSB_GLOBAL_DLD_RERASrcIPs equals [IP::client_addr]])}
					{
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri is not allowed for IP: [IP::client_addr]"
					set eServPROD_GSB_GLOBAL_BREAK_ALL 1
					#HTTP::respond 200 content $static::eServPROD_GSB_Sorry
					drop
					}
					else
					{
					set eServPROD_GSB_GLOBAL_poolName "eServPROD_ESB_8244_Pool"
					#log local0. "URI: $eServPROD_GSB_GLOBAL_uri and Pool: $eServPROD_GSB_GLOBAL_poolName allowed for IP: [IP::client_addr]"
					pool $eServPROD_GSB_GLOBAL_poolName
					}
				}

				default	
				{
					#if { [IP::client_addr] equals "213.42.48.180" } {
					#log local0. " [IP::client_addr] Pool: $eServPROD_GSB_GLOBAL_poolName for URI: $eServPROD_GSB_GLOBAL_uri "
						#if { [HTTP::uri] equals "/secure/mPaySubscription.mPaySubscriptionHttpsSoap11Endpoint" } {
						#	if { not ([IP::client_addr] equals "213.42.48.180") } {
								#log local0. " URI Before: [HTTP::uri] "
						#		HTTP::uri "/secure/mPaySubscription"
								#log local0. " URI After: [HTTP::uri] "
							#}
							#drop
						#}
					#}

					pool $eServPROD_GSB_GLOBAL_poolName
				}
			}
		}
	}
}
}
ltm rule /Common/eServPROD_GSB_Rewrite_grp {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::eServPROD_GSB_grp_request_uri
	{
		"^/GRP====/services"
	}
	set static::eServPROD_GSB_grp_request_host
	{
	}
	set static::eServPROD_GSB_grp_request_referer
	{
	}
	set static::eServPROD_GSB_grp_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::eServPROD_GSB_grp_response_setCookie
	{
	}
	set static::eServPROD_GSB_grp_response_location
	{
	}
	set static::eServPROD_GSB_grp_response_contentLocation
	{
	}
	set static::eServPROD_GSB_grp_response_body
	{
		"https://gsb.dubai.gov.ae/services====https://gsb.dubai.gov.ae/GRP"
	}
}

when HTTP_REQUEST
{
	if {$eServPROD_GSB_GLOBAL_URI_Class == "GRP" and $eServPROD_GSB_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $eServPROD_GSB_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::eServPROD_GSB_grp_request_uri] > 0}
	{
	set eServPROD_GSB_grp_request_val [HTTP::uri]
	foreach eServPROD_GSB_grp_request_rewriteRecord $static::eServPROD_GSB_grp_request_uri
	{
		set eServPROD_GSB_grp_request_find [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 1]
		set eServPROD_GSB_grp_request_replace [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 2]
		if {$eServPROD_GSB_grp_request_replace == "nothing"}
		{
			set eServPROD_GSB_grp_request_replace ""
		}

		regsub -all $eServPROD_GSB_grp_request_find $eServPROD_GSB_grp_request_val $eServPROD_GSB_grp_request_replace eServPROD_GSB_grp_request_val
	}
	HTTP::uri $eServPROD_GSB_grp_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::eServPROD_GSB_grp_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set eServPROD_GSB_grp_request_val [HTTP::host]
		foreach eServPROD_GSB_grp_request_rewriteRecord $static::eServPROD_GSB_grp_request_host
		{
			set eServPROD_GSB_grp_request_find [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 1]
			set eServPROD_GSB_grp_request_replace [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_grp_request_replace == "nothing"}
			{
				set eServPROD_GSB_grp_request_replace ""
			}
			regsub -all $eServPROD_GSB_grp_request_find $eServPROD_GSB_grp_request_val $eServPROD_GSB_grp_request_replace eServPROD_GSB_grp_request_val
		}

		HTTP::header replace Host $eServPROD_GSB_grp_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::eServPROD_GSB_grp_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set eServPROD_GSB_grp_request_val [HTTP::header value Referer]
		foreach eServPROD_GSB_grp_request_rewriteRecord $static::eServPROD_GSB_grp_request_referer
		{
			set eServPROD_GSB_grp_request_find [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 1]
			set eServPROD_GSB_grp_request_replace [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_grp_request_replace == "nothing"}
			{
				set eServPROD_GSB_grp_request_replace ""
			}

			regsub -all $eServPROD_GSB_grp_request_find $eServPROD_GSB_grp_request_val $eServPROD_GSB_grp_request_replace eServPROD_GSB_grp_request_val
		}
		HTTP::header replace Referer $eServPROD_GSB_grp_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::eServPROD_GSB_grp_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set eServPROD_GSB_grp_request_val [HTTP::header value Cookie]
		foreach eServPROD_GSB_grp_request_rewriteRecord $static::eServPROD_GSB_grp_request_cookie
		{
			set eServPROD_GSB_grp_request_find [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 1]
			set eServPROD_GSB_grp_request_replace [getfield $eServPROD_GSB_grp_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_grp_request_replace == "nothing"}
			{
				set eServPROD_GSB_grp_request_replace ""
			}

			regsub -all $eServPROD_GSB_grp_request_find $eServPROD_GSB_grp_request_val $eServPROD_GSB_grp_request_replace eServPROD_GSB_grp_request_val
		}
		HTTP::header replace Cookie $eServPROD_GSB_grp_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$eServPROD_GSB_GLOBAL_URI_Class == "GRP" and $eServPROD_GSB_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $eServPROD_GSB_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::eServPROD_GSB_grp_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set eServPROD_GSB_grp_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach eServPROD_GSB_grp_response_val $eServPROD_GSB_grp_response_val_list
		{
			foreach eServPROD_GSB_grp_response_rewriteRecord $static::eServPROD_GSB_grp_response_setCookie
			{
				set eServPROD_GSB_grp_response_find [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 1]
				set eServPROD_GSB_grp_response_replace [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 2]

				if {$eServPROD_GSB_grp_response_replace == "nothing"}
				{
					set eServPROD_GSB_grp_response_replace ""
				}
				regsub -all $eServPROD_GSB_grp_response_find $eServPROD_GSB_grp_response_val $eServPROD_GSB_grp_response_replace eServPROD_GSB_grp_response_val
			}
			HTTP::header insert Set-Cookie $eServPROD_GSB_grp_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::eServPROD_GSB_grp_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set eServPROD_GSB_grp_response_val [HTTP::header value Location]

		foreach eServPROD_GSB_grp_response_rewriteRecord $static::eServPROD_GSB_grp_response_location
		{
			set eServPROD_GSB_grp_response_find [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 1]
			set eServPROD_GSB_grp_response_replace [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 2]
			if {$eServPROD_GSB_grp_response_replace == "nothing"}
			{
				set eServPROD_GSB_grp_response_replace ""
			}

			regsub -all $eServPROD_GSB_grp_response_find $eServPROD_GSB_grp_response_val $eServPROD_GSB_grp_response_replace eServPROD_GSB_grp_response_val
		}
		HTTP::header replace Location $eServPROD_GSB_grp_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::eServPROD_GSB_grp_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set eServPROD_GSB_grp_response_val [HTTP::header value Content-Location]

		foreach eServPROD_GSB_grp_response_rewriteRecord $static::eServPROD_GSB_grp_response_contentLocation
		{
			set eServPROD_GSB_grp_response_find [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 1]
			set eServPROD_GSB_grp_response_replace [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 2]
			if {$eServPROD_GSB_grp_response_replace == "nothing"}
			{
				set eServPROD_GSB_grp_response_replace ""
			}

			regsub -all $eServPROD_GSB_grp_response_find $eServPROD_GSB_grp_response_val $eServPROD_GSB_grp_response_replace eServPROD_GSB_grp_response_val
		}
		HTTP::header replace Content-Location $eServPROD_GSB_grp_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::eServPROD_GSB_grp_response_body] > 0}
	{
	set expression ""
	foreach eServPROD_GSB_grp_response_rewriteRecord $static::eServPROD_GSB_grp_response_body
	{
		set eServPROD_GSB_grp_response_find [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 1]
		set eServPROD_GSB_grp_response_replace [getfield $eServPROD_GSB_grp_response_rewriteRecord "====" 2]
		if {$eServPROD_GSB_grp_response_replace == "nothing"}
		{
			set eServPROD_GSB_grp_response_replace ""
		}

		set expression "$expression@$eServPROD_GSB_grp_response_find@$eServPROD_GSB_grp_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/eServPROD_GSB_Rewrite_sec {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::eServPROD_GSB_sec_request_uri
	{
		#"^/secure/mPaySubscription.mPaySubscriptionHttpsSoap11Endpoint====/services/mPaySubscription"
		"^/secure====/services"
	}
	set static::eServPROD_GSB_sec_request_host
	{
	}
	set static::eServPROD_GSB_sec_request_referer
	{
	}
	set static::eServPROD_GSB_sec_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::eServPROD_GSB_sec_response_setCookie
	{
	}
	set static::eServPROD_GSB_sec_response_location
	{
	}
	set static::eServPROD_GSB_sec_response_contentLocation
	{
	}
	set static::eServPROD_GSB_sec_response_body
	{
		"https://gsb.dubai.gov.ae/services====https://gsb.dubai.gov.ae/secure"
	}
}

when HTTP_REQUEST
{
	if {$eServPROD_GSB_GLOBAL_URI_Class == "secure" and $eServPROD_GSB_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $eServPROD_GSB_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::eServPROD_GSB_sec_request_uri] > 0}
	{
	set eServPROD_GSB_sec_request_val [HTTP::uri]
	foreach eServPROD_GSB_sec_request_rewriteRecord $static::eServPROD_GSB_sec_request_uri
	{
		set eServPROD_GSB_sec_request_find [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 1]
		set eServPROD_GSB_sec_request_replace [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 2]
		if {$eServPROD_GSB_sec_request_replace == "nothing"}
		{
			set eServPROD_GSB_sec_request_replace ""
		}

		regsub -all $eServPROD_GSB_sec_request_find $eServPROD_GSB_sec_request_val $eServPROD_GSB_sec_request_replace eServPROD_GSB_sec_request_val
	}
	HTTP::uri $eServPROD_GSB_sec_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::eServPROD_GSB_sec_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set eServPROD_GSB_sec_request_val [HTTP::host]
		foreach eServPROD_GSB_sec_request_rewriteRecord $static::eServPROD_GSB_sec_request_host
		{
			set eServPROD_GSB_sec_request_find [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 1]
			set eServPROD_GSB_sec_request_replace [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_sec_request_replace == "nothing"}
			{
				set eServPROD_GSB_sec_request_replace ""
			}
			regsub -all $eServPROD_GSB_sec_request_find $eServPROD_GSB_sec_request_val $eServPROD_GSB_sec_request_replace eServPROD_GSB_sec_request_val
		}

		HTTP::header replace Host $eServPROD_GSB_sec_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::eServPROD_GSB_sec_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set eServPROD_GSB_sec_request_val [HTTP::header value Referer]
		foreach eServPROD_GSB_sec_request_rewriteRecord $static::eServPROD_GSB_sec_request_referer
		{
			set eServPROD_GSB_sec_request_find [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 1]
			set eServPROD_GSB_sec_request_replace [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_sec_request_replace == "nothing"}
			{
				set eServPROD_GSB_sec_request_replace ""
			}

			regsub -all $eServPROD_GSB_sec_request_find $eServPROD_GSB_sec_request_val $eServPROD_GSB_sec_request_replace eServPROD_GSB_sec_request_val
		}
		HTTP::header replace Referer $eServPROD_GSB_sec_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::eServPROD_GSB_sec_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set eServPROD_GSB_sec_request_val [HTTP::header value Cookie]
		foreach eServPROD_GSB_sec_request_rewriteRecord $static::eServPROD_GSB_sec_request_cookie
		{
			set eServPROD_GSB_sec_request_find [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 1]
			set eServPROD_GSB_sec_request_replace [getfield $eServPROD_GSB_sec_request_rewriteRecord "====" 2]

			if {$eServPROD_GSB_sec_request_replace == "nothing"}
			{
				set eServPROD_GSB_sec_request_replace ""
			}

			regsub -all $eServPROD_GSB_sec_request_find $eServPROD_GSB_sec_request_val $eServPROD_GSB_sec_request_replace eServPROD_GSB_sec_request_val
		}
		HTTP::header replace Cookie $eServPROD_GSB_sec_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$eServPROD_GSB_GLOBAL_URI_Class == "secure" and $eServPROD_GSB_GLOBAL_poolName == "eServPROD_ESB_8244_Pool" and $eServPROD_GSB_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::eServPROD_GSB_sec_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set eServPROD_GSB_sec_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach eServPROD_GSB_sec_response_val $eServPROD_GSB_sec_response_val_list
		{
			foreach eServPROD_GSB_sec_response_rewriteRecord $static::eServPROD_GSB_sec_response_setCookie
			{
				set eServPROD_GSB_sec_response_find [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 1]
				set eServPROD_GSB_sec_response_replace [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 2]

				if {$eServPROD_GSB_sec_response_replace == "nothing"}
				{
					set eServPROD_GSB_sec_response_replace ""
				}
				regsub -all $eServPROD_GSB_sec_response_find $eServPROD_GSB_sec_response_val $eServPROD_GSB_sec_response_replace eServPROD_GSB_sec_response_val
			}
			HTTP::header insert Set-Cookie $eServPROD_GSB_sec_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::eServPROD_GSB_sec_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set eServPROD_GSB_sec_response_val [HTTP::header value Location]

		foreach eServPROD_GSB_sec_response_rewriteRecord $static::eServPROD_GSB_sec_response_location
		{
			set eServPROD_GSB_sec_response_find [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 1]
			set eServPROD_GSB_sec_response_replace [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 2]
			if {$eServPROD_GSB_sec_response_replace == "nothing"}
			{
				set eServPROD_GSB_sec_response_replace ""
			}

			regsub -all $eServPROD_GSB_sec_response_find $eServPROD_GSB_sec_response_val $eServPROD_GSB_sec_response_replace eServPROD_GSB_sec_response_val
		}
		HTTP::header replace Location $eServPROD_GSB_sec_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::eServPROD_GSB_sec_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set eServPROD_GSB_sec_response_val [HTTP::header value Content-Location]

		foreach eServPROD_GSB_sec_response_rewriteRecord $static::eServPROD_GSB_sec_response_contentLocation
		{
			set eServPROD_GSB_sec_response_find [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 1]
			set eServPROD_GSB_sec_response_replace [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 2]
			if {$eServPROD_GSB_sec_response_replace == "nothing"}
			{
				set eServPROD_GSB_sec_response_replace ""
			}

			regsub -all $eServPROD_GSB_sec_response_find $eServPROD_GSB_sec_response_val $eServPROD_GSB_sec_response_replace eServPROD_GSB_sec_response_val
		}
		HTTP::header replace Content-Location $eServPROD_GSB_sec_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::eServPROD_GSB_sec_response_body] > 0}
	{
	set expression ""
	foreach eServPROD_GSB_sec_response_rewriteRecord $static::eServPROD_GSB_sec_response_body
	{
		set eServPROD_GSB_sec_response_find [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 1]
		set eServPROD_GSB_sec_response_replace [getfield $eServPROD_GSB_sec_response_rewriteRecord "====" 2]
		if {$eServPROD_GSB_sec_response_replace == "nothing"}
		{
			set eServPROD_GSB_sec_response_replace ""
		}

		set expression "$expression@$eServPROD_GSB_sec_response_find@$eServPROD_GSB_sec_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/eServPROD_SYNC_Int_iRule {
    when HTTP_REQUEST {
    # Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] { 
     "10.22.1.99:54546" - "eservices.dubai.ae:54546" - "syncinteg:54546"
	{
     if { ([HTTP::uri] equals "/syncws/services") || ([HTTP::uri] starts_with "/syncws/services/") } {
       pool eServPROD_SYNC_Internal_Pool 
    }  else {
		    drop
		    }
    }
    default {
		     drop
		    }
}  

}
}
ltm rule /Common/eServPROD_SYNC_for_mPayPROD_iRule {
    when HTTP_REQUEST {
    # Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] { 
     "10.22.5.99:54546" - "eservices.dubai.ae:54546" - "syncinteg:54546"
	{
     if { ([HTTP::uri] equals "/syncws/services") || ([HTTP::uri] starts_with "/syncws/services/") } {
	        pool eServPROD_SYNC_Internal_Pool
            }   else {
		             drop
		             }
    }
    default {
		     drop
		    }
}  

}
}
ltm rule /Common/eServicesPROD_iRule {
    when RULE_INIT
{
	set static::eServ_PROD_flag_maintenance 0
	set static::eServ_PROD_Maint_BypassIPs "eServ_PROD_Maint_BypassIPs"
}

when HTTP_REQUEST
{
	set eServ_PROD_goToMaintenance 0

	# Check requested host header (set to lowercase) 
    switch [string tolower [HTTP::host]] {
		"eservices.dubai.ae" 
		{
			if {not ([class match [IP::client_addr] equals $static::eServ_PROD_Maint_BypassIPs]) and $static::eServ_PROD_flag_maintenance == 1} {
				set eServ_PROD_goToMaintenance 1
				#log local0. "eServ_PROD_goToMaintenance = $eServ_PROD_goToMaintenance"
			}

			if {$eServ_PROD_goToMaintenance == 1 or [IP::client_addr] equals "213.42.48.182" } {

				#set eServ_PROD_GLOBAL_BREAK_ALL 1
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"

				#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
			}
			else
			{			
				if { ([HTTP::uri] equals "/gess2") || ([HTTP::uri] starts_with "/gess2/") } {
					pool eServPROD_GESS_Pool 
					persist cookie insert eServPROD_GeSS 0 
				} elseif { ([HTTP::uri] equals "/syncadmin") || ([HTTP::uri] starts_with "/syncadmin/") } { 
					pool eServPROD_SYNC_Pool
					persist cookie insert eServPROD_SYNC 0
				} else {
					drop
				}   
			}
		}

		default 
	    {
			drop
	    }   
	}  
}
}
ltm rule /Common/grpapp_Internal_iRule {
    when CLIENT_ACCEPTED {

	switch [IP::client_addr] {
		"10.21.11.11" - "10.21.11.12"
		{
		    #log local0. "Client IP: [IP::client_addr] is allowed"
	    }	
        default {
		    #log local0. "Client IP: [IP::client_addr] is not allowed"
			reject
	    }
    }			
}

when HTTP_REQUEST
{
	#if {[HTTP::host] equals "grp.dubai.gov.ae"} {
		pool grpapp_Internal_Pool 
	#}	
}
}
ltm rule /Common/helpag_debugging_first {
    when RULE_INIT
{
	set debugging_IP_filter "213.42.48.183"
	set debugging_flag_filter_ip 1
	set debugging_flag_show_payload 0

	# Number of random letters to generate
	set debugging_randLength 5
	# Create a list of the letters indexed 0 through 62
	set debugging_randLetters [ list 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z]
}

when SERVER_CONNECTED
{
	if {$::debugging_flag_filter_ip == 0 or ($::debugging_flag_filter_ip == 1 and $::debugging_IP_filter == $debugging_client_ip) }
	{
		set node "[IP::server_addr]:[TCP::server_port]"
		log local0. "sending request to node ==> $node"
	}
}

when HTTP_REQUEST
{
	set debugging_requestID ""
	# Loop through X times where X is the number of random letters to generate
	for { set i 1 } { $i < $::debugging_randLength } { incr i }
	{
		append debugging_requestID [lindex $::debugging_randLetters [expr { int (rand() * 62) }]]
	}

	set debugging_client_ip [IP::client_addr]

	set first_request_debugging_list_found_headers { }

	if {$::debugging_flag_filter_ip == 0 or ($::debugging_flag_filter_ip == 1 and $::debugging_IP_filter == $debugging_client_ip) }
	{
		set first_request_debugging_requestHeader "CLIENT ===> F5"
		set first_response_debugging_replyHeader "F5 <=== BACKEND"
		set first_debugging_URI [HTTP::uri]
		if { [catch
		{
			log local0. ""
			log local0. ""
			log local0. "//////////////////////////////////////////////////"
			log local0. "START from client: [IP::client_addr]"
			log local0. "REQUEST ID: $debugging_requestID"
			log local0. "//////////////////////////////////////////////////"
			log local0. ""
			log local0. "(1) $first_request_debugging_requestHeader:"
			log local0. "==================================="
			log local0. "RID: $debugging_requestID== [HTTP::method] [HTTP::uri] HTTP/[HTTP::version]"

			foreach thisHeaderName [HTTP::header names]
			{
				if {[lsearch  $first_request_debugging_list_found_headers $thisHeaderName] > -1}
				{
					continue
				}
				else
				{
					lappend first_request_debugging_list_found_headers $thisHeaderName
				}
				foreach thisHeaderValue [HTTP::header values $thisHeaderName]
				{	
					log local0. "RID: $debugging_requestID== $thisHeaderName: $thisHeaderValue"

				}
			}
			log local0. ""
			log local0. [HTTP::payload]
		} result] }
		{
		#	log local0. "fffffffffff $result"
		}
	}
}

when HTTP_RESPONSE
{
	set first_response_debugging_list_found_headers { }

	if {$::debugging_flag_filter_ip == 0 or ($::debugging_flag_filter_ip == 1 and $::debugging_IP_filter == $debugging_client_ip) }
	{
		if { [catch
		{
			log local0. ""
			log local0. "(3) $first_response_debugging_replyHeader:"
			log local0. "==================================="
			log local0. "RID: $debugging_requestID== reply to request: $first_debugging_URI"
			log local0. "RID: $debugging_requestID== HTTP/[HTTP::version] [HTTP::status]"

			foreach thisHeaderName [HTTP::header names]
			{
				if {[lsearch  $first_response_debugging_list_found_headers $thisHeaderName] > -1}
				{
					continue
				}
				else
				{
					lappend first_response_debugging_list_found_headers $thisHeaderName
				}

				foreach thisHeaderValue [HTTP::header values $thisHeaderName]
				{	
					log local0. "RID: $debugging_requestID== $thisHeaderName: $thisHeaderValue"
				}
			}
			if {$::debugging_flag_show_payload == 1}
			{
				log local0. ""
				log local0. [HTTP::payload]
			}
		} result] }
		{
		#	log local0. "jjjjjjjjjjjjjjjj $result"
		}
	}
}
}
ltm rule /Common/helpag_debugging_last {
    when HTTP_REQUEST
{
	set last_request_debugging_list_found_headers { }

	set debugging_client_ip [IP::client_addr]
	if {$::debugging_flag_filter_ip == 0 or ($::debugging_flag_filter_ip == 1 and $::debugging_IP_filter == $debugging_client_ip) }
	{
		set last_request_debugging_requestHeader "F5 ===> BACKEND"
		set last_response_debugging_replyHeader "CLIENT <=== F5"
		set debugging_URI [HTTP::uri]
		if { [catch
		{
			log local0. ""
			log local0. "(2) $last_request_debugging_requestHeader:"
			log local0. "==================================="
			log local0. "RID: $debugging_requestID==  [HTTP::method] [HTTP::uri] HTTP/[HTTP::version]"
			foreach thisHeaderName [HTTP::header names]
			{
				if {[lsearch $last_request_debugging_list_found_headers $thisHeaderName] > -1}
				{
					continue
				}
				else
				{
					lappend last_request_debugging_list_found_headers $thisHeaderName
				}
				foreach thisHeaderValue [HTTP::header values $thisHeaderName]
				{	
					log local0. "RID: $debugging_requestID== $thisHeaderName: $thisHeaderValue"
				}
			}
			log local0. ""
			log local0. [HTTP::payload]
		} result]}
		{
		#	log local0. "XXXXXXXXXXXXXXXXXXXXXX error $result"
		}
	}
}

when HTTP_RESPONSE
{
	set last_response_debugging_list_found_headers { }
	set last_response_debugging_flag_break 0

	if {$::debugging_flag_filter_ip == 0 or ($::debugging_flag_filter_ip == 1 and $::debugging_IP_filter == $debugging_client_ip) }
	{
		if { [catch
		{
			log local0. ""
			log local0. "(4) $last_response_debugging_replyHeader:"
			log local0. "==================================="
			log local0. "RID: $debugging_requestID==  reply to request: $debugging_URI"
			log local0. "RID: $debugging_requestID==  HTTP/[HTTP::version] [HTTP::status]"
			foreach thisHeaderName [HTTP::header names]
			{
				if {[lsearch $last_response_debugging_list_found_headers $thisHeaderName] > -1 }
				{
					continue
				}
				else
				{
					lappend last_response_debugging_list_found_headers $thisHeaderName
				}
				foreach thisHeaderValue [HTTP::header values $thisHeaderName]
				{	
					log local0. "RID: $debugging_requestID== $thisHeaderName: $thisHeaderValue"
				}
			}
			if {$::debugging_flag_show_payload == 1}
			{
				log local0. ""
				log local0. [HTTP::payload]
			}
			log local0. "//////////////////////////////////////////////////"
			log local0. "END"
			log local0. "REQUEST ID: $debugging_requestID"
			log local0. "//////////////////////////////////////////////////"
		} result] }
		{
		#	log local0. "yyyyyyyyyyyyyyy $result"
		}
	}
}
}
ltm rule /Common/iRule_Template_HTTP_Collect {
    when HTTP_REQUEST
{
switch [string tolower [HTTP::host]] { 
"xxgrpdemoWebPool"
		{
			if {not ([matchclass $static::GRP_Test_DEMO_Src equals [IP::client_addr]])}
		    {
			#log local0. "IP: [IP::client_addr] is not allowed to access GRP DEMO Instance"
			set SrcIP_Test_80_Restriction 1
		    } else {
				#    set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
			    #	HTTP::respond 200 content $::GRP_Test_Sorry
			    #	drop	    
		    }
			switch -glob  $GRP_Test_GLOBAL_URI
		    {
		       "/OA_JAVA/*" - "/forms/frmservlet*" - "/forms/lservlet*" 
		       {  
	            set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
		       }
			   "/discoverer/*" - "//discoverer/*"
			   {
				set GRP_Test_GLOBAL_poolName "grpdemo_discov_8090"
				#set GRP_Test_GLOBAL_GRP_BREAK_ALL 1
			   }
			   "/xxxOA_HTML/OA.jsp*"
			   {
				set GRP_Test_GLOBAL_Log 1   
				#log local0. "Client-IP: [IP::client_addr] & HTTP POST: [HTTP::payload]"
				#log local0. "GRP_Test_GLOBAL_Log is $GRP_Test_GLOBAL_Log"
				# Log debug? 1=yes, 0=no   
				    set GRP_Test_debug 1
				    if {[HTTP::method] eq "POST"}{
                        set GRP_Test_clength 0

                        # Check if there is a content-length header and the value is set to less than 1Mb
                        if {[HTTP::header exists "Content-Length"] && [HTTP::header Content-Length] <= 1048576}{
                            set GRP_Test_clength [HTTP::header Content-Length]
                        } else { 
                            set GRP_Test_clength 1048576
                        }

                        if {[info exists GRP_Test_clength] && $GRP_Test_clength > 0} {
                            if {$GRP_Test_debug}{log local0. "[virtual name]: Collecting $GRP_Test_clength bytes"}
                            HTTP::collect $GRP_Test_clength
                           }
                    } 
			   }   
			   default
			   {
		 	   }   
			}

		}
	}
}

when HTTP_REQUEST_DATA {
    #log local0. "HTTP POST: [HTTP::payload]" 
	#log local0. "Hi u r here"
    if {$GRP_Test_debug} { 
		log local0. "HTTP POST: [HTTP::payload]"
	}
}
}
ltm rule /Common/mDubai_PROD_SSL_Base {
    when RULE_INIT
{
	set static::mDubai_PROD_SSL_Maint_flag 0
}

when HTTP_REQUEST
{
	set mDubai_PROD_SSL_GLOBAL_BREAK_ALL 0
	#set static::mDubai_PROD_SSL_Sorry1 "<html><head></head><body><p>System under Maintenance, Please try again later...!!! </p></body></html>"

	if { ($static::mDubai_PROD_SSL_Maint_flag == 1 and (not ([IP::client_addr] equals "MP_Excluded_IP"))) or ([IP::client_addr] equals "10.100.30.134") } {

		set mDubai_PROD_SSL_GLOBAL_BREAK_ALL 1

		HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	

		#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr]"
	}
	else {
		switch [string tolower [HTTP::host]] {
			"happinessmeter.dubai.gov.ae"
			{
				#log local0. "Access allowed for Host: [HTTP::host]"
				if { [HTTP::uri] equals "/" } {
					HTTP::uri "/HappinessMeter"
				} elseif { not ([HTTP::uri] starts_with "/HappinessMeter") } {
					HTTP::uri /HappinessMeter[HTTP::uri]
				}

				pool "mDubai_PROD_Pool"
				persist cookie insert mDubai_PROD_SSL 0
			}

			default
			{
				#log local0. "Access blocked for Host: [HTTP::host]"
				drop
			}
		}
    }	
}
}
ltm rule /Common/mPayPROD_80_Pool_Select {
    when HTTP_REQUEST {

    set mPayPROD_80_hostName [HTTP::host]
	set mPayPROD_80_Uri [HTTP::uri]
    switch [string tolower [HTTP::host]] { 
    "mpay.dubai.ae"
	{	
	 if { ([HTTP::uri] equals "/")  }
		{
			HTTP::redirect "https://$mPayPROD_80_hostName/userPortal"
		}  else    {
	               HTTP::redirect "https://$mPayPROD_80_hostName$mPayPROD_80_Uri"
	               }   	 	
	}
    default 
	     {
		 drop
	     }
}
}
}
ltm rule /Common/mPayPROD_Global_Variables {
    when RULE_INIT
{
	set static::mPayPROD_mPayGateway_GLOBAL_SrcIPs "mPayPROD_mPayGateway_SrcIP"
	set static::mPayPROD_GLOBAL_Maint_BypassIPs "mPayPROD_Maint_Bypass"
	set mPayPROD_GLOBAL_sorry "<html><head></head><body><p>Access Denied...!!! </p></body></html>"
}

when HTTP_REQUEST
{
	set mPayPROD_GLOBAL_BREAK_ALL 0
	set mPayPROD_GLOBAL_hostName ""
	set mPayPROD_GLOBAL_poolName ""

	switch [string tolower [HTTP::host]]
	{
		"mpay.dubai.ae" - "apitompay"
		{
			if {[HTTP::uri] equals "/"} {
				HTTP::redirect "https://mpay.dubai.ae/userPortal"
				set mPayPROD_GLOBAL_BREAK_ALL 1
			}

			# check if GSB or API is accessing mPay using its Private or Public IPs
			switch [IP::client_addr] {
				"10.22.1.13" - "10.22.1.14" - "10.22.1.45" - "10.22.1.46" - "213.42.56.170" - "213.42.56.171"
				{
					set mPayPROD_GLOBAL_BREAK_ALL 1

					if { ([HTTP::uri] starts_with "/mPay-Mobile/") } {
						set mPayPROD_GLOBAL_poolName "mPayPROD_Pool"
						pool $mPayPROD_GLOBAL_poolName
					} elseif { ([HTTP::uri] starts_with "/mpayws/") } {
						# Strip '/mpayws' from the begining of the URI.
						#log local0. " srcip: [IP::client_addr] URI-Before: [HTTP::uri] "
						HTTP::uri [string range [HTTP::uri] 7 end]
						#log local0. " srcip: [IP::client_addr] URI-After: [HTTP::uri] "
						set mPayPROD_GLOBAL_poolName "mPayPROD_Pool"
						pool $mPayPROD_GLOBAL_poolName
					} else {
						drop
					}
				}
			}
		}

		"mpay.dubai.ae:443" - "apitompay:443"
		{
			# check if GSB or API is accessing mPay using its Private or Public IPs
			switch [IP::client_addr] {
				"10.22.1.13" - "10.22.1.14" - "10.22.1.45" - "10.22.1.46" - "213.42.56.170" - "213.42.56.171"
				{
					set mPayPROD_GLOBAL_BREAK_ALL 1

					if { ([HTTP::uri] starts_with "/mPay-Mobile/") } {
						set mPayPROD_GLOBAL_poolName "mPayPROD_Pool"
						pool $mPayPROD_GLOBAL_poolName
					} elseif { ([HTTP::uri] starts_with "/mpayws/") } {
						# Strip '/mpayws' from the begining of the URI.
						if { ([HTTP::uri] starts_with "/mpayws/mPay-Kiosk/") } {
							#log local0. " srcip: [IP::client_addr] Host: [HTTP::host] URI: [HTTP::uri] "
							#drop
						}
						HTTP::uri [string range [HTTP::uri] 7 end]
						#log local0. " srcip: [IP::client_addr] URI-After: [HTTP::uri] "
						set mPayPROD_GLOBAL_poolName "mPayPROD_Pool"
						pool $mPayPROD_GLOBAL_poolName
					} else {
						drop
					}
				}
			}
		}
	}
}
}
ltm rule /Common/mPayPROD_Maintenance {
    when RULE_INIT
{
	set static::mPayPROD_443_flag_maintenance 0
}

when HTTP_REQUEST
{
	set mPayPROD_443_goToMaintenance 0

	#if { $mPayPROD_GLOBAL_BREAK_ALL == 0 } {

		if {not ([matchclass $static::mPayPROD_GLOBAL_Maint_BypassIPs equals [IP::client_addr]]) and $static::mPayPROD_443_flag_maintenance == 1} {
			set mPayPROD_443_goToMaintenance 1
		}

		if {$mPayPROD_443_goToMaintenance == 1 or [IP::client_addr] equals "MP_Enabled_IP" }
		{
			set mPayPROD_GLOBAL_BREAK_ALL 1

			if {[HTTP::uri] ends_with "mPay-MaintenancePage.jpg"} {
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
			} else {
				HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"	
			}


		}

		if {[HTTP::uri] ends_with "eservrestrictip.jpg"}
		{
			#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for mpayipblock"
			set mPayPROD_GLOBAL_BREAK_ALL 1	
			HTTP::respond 200 content [ifile get eservrestrictip] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
		} elseif {[HTTP::uri] ends_with "eserverrorpage.jpg"}
		{
			#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for mpaynopage"
			set mPayPROD_GLOBAL_BREAK_ALL 1	
			HTTP::respond 200 content [ifile get eserverrorpage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
		} elseif {[HTTP::uri] ends_with "favicon.ico"}
		{
			#log local0. " Host: [HTTP::host] & URI: [HTTP::uri] & IP: [IP::client_addr] for favicon"
			set mPayPROD_GLOBAL_BREAK_ALL 1	
			HTTP::respond 200 content [ifile get MaintenancePage] "Content-Type" "image/gif"  "Cache-Control" "no-cache,no-store,must-revalidate" "Expires" "Fri, 01 Jan 1990 00:00:00 GMT"
		}
	#}
}
}
ltm rule /Common/mPayPROD_Pool_SSL_Disable {
    when SERVER_CONNECTED
{
	if  { $mPayPROD_GLOBAL_poolName != "mPayPROD_Pool" } {
	    SSL::disable
		#log local0. "IP: [IP::client_addr] Pool: $mPayPROD_GLOBAL_poolName"
	} 
}
}
ltm rule /Common/mPayPROD_Pool_Select {
    when RULE_INIT
{
	set static::mPayPROD_Sorry "<html><head></head><body><p>Access Denied for the specified Uniform Resource Locator (URL). For assistance contact DeG Support Team.</p></body></html>"
	set static::mPayPROD_URI_to_Pool_mapping
	{
		"^/userPortal(/)?\$====mPayPROD_Pool"
		"^/mPayAdmin(/)?\$====mPayPROD_Pool"
		"^/mPay-front/====mPayPROD_Pool"
		"^/mPay-Reporter(/.*)?\$====mPayPROD_Pool"
		"^/oneClickPay(/.*)?====mPayPROD_Pool"
		"^/mPayGateway(/.*)?\$====Restricted"
		"^/OneHubPayment(/.*)?====mPayPROD_Pool"
	}
}


when HTTP_REQUEST {	

 if {$mPayPROD_GLOBAL_BREAK_ALL == 0 and [HTTP::host] == "mpay.dubai.ae"} {   
	set mPayPROD_GLOBAL_hostName [HTTP::host]
	set mPayPROD_GLOBAL_uri [HTTP::uri]

	#..........Pool Selection.........................................................

			foreach mPayPROD_mappingRecord $static::mPayPROD_URI_to_Pool_mapping
			{
				set mPayPROD_mapping_uri [getfield $mPayPROD_mappingRecord "====" 1]
				set mPayPROD_mapping_poolName [getfield $mPayPROD_mappingRecord "====" 2]

				if {[regexp $mPayPROD_mapping_uri $mPayPROD_GLOBAL_uri] == 1}
				{
					set mPayPROD_GLOBAL_poolName $mPayPROD_mapping_poolName
					break
				}
			}

	#.................................................................................


	#............IP Restriction, Redirection & Pool Assignment........................

	switch $mPayPROD_GLOBAL_poolName
	{
	""
	    {   
			#log local0. "URI: $mPayPROD_GLOBAL_uri has no mapped mPayPROD_pool"
	    	set mPayPROD_GLOBAL_BREAK_ALL 1
	    	#HTTP::respond 200 content $static::mPayPROD_Sorry
	        #HTTP::redirect "https://mpay.dubai.ae"
			HTTP::uri "/sites/maintenance/epay/error.aspx"
			HTTP::header replace "host:" "www.dsg.gov.ae"
	    	HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
	    	HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"
	    	set mPayPROD_GLOBAL_poolName "grpMaintenance_pool"
			pool $mPayPROD_GLOBAL_poolName
			persist cookie insert mPayPROD_AuxPool 0
	    }

	"Restricted"
	    {
		    #Src IP based Restriction handling for mPayGateway - Allowed for Ducont IPs Only 	
	    	if {not ([matchclass $static::mPayPROD_mPayGateway_GLOBAL_SrcIPs equals [IP::client_addr]])}
		    {
			set mPayPROD_GLOBAL_BREAK_ALL 1
		    #log local0. "IP: [IP::client_addr] is not allowed to access URI: $mPayPROD_GLOBAL_uri  mPayPROD_mPayGateway"
			#HTTP::respond 200 content $::mPayPROD_GLOBAL_sorry
		    HTTP::uri "/sites/maintenance/epay/iperror.aspx"
            HTTP::header replace "host:" "www.dsg.gov.ae"
            HTTP::header insert "Cache-Control" "no-cache, must-revalidate"
		    HTTP::header insert "Expires" "Sat, 26 Jul 1997 05:00:00 GMT"
	        set mPayPROD_GLOBAL_poolName "grpMaintenance_pool"
			pool $mPayPROD_GLOBAL_poolName
			persist cookie insert mPayPROD_AuxPool 0
		    }
	        else
	        {
		    set mPayPROD_GLOBAL_poolName "mPayPROD_Pool"
		    #log local0. "URI: $mPayPROD_GLOBAL_uri and Pool: $mPayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
			pool $mPayPROD_GLOBAL_poolName
			persist cookie insert mPayPROD 0
	        }    	
	    }

	default
	    {
			#log local0. " Def Allow -- URI: $mPayPROD_GLOBAL_uri and Pool: $mPayPROD_GLOBAL_poolName allowed for IP: [IP::client_addr]"
	     	pool $mPayPROD_GLOBAL_poolName
			persist cookie insert mPayPROD 0
	    }

    }
}

}

when HTTP_RESPONSE
{
	foreach CookieNames [HTTP::cookie names] {
        if { $CookieNames equals "mPayPROD" } {
			#	log local0. "cookie mPayPROD in response exists"
			set ckname $CookieNames
            set ckvalue [HTTP::cookie value $CookieNames]
            HTTP::cookie remove $CookieNames
            HTTP::cookie insert name $ckname value $ckvalue path "/" version 1
            HTTP::cookie secure $ckname enable
            HTTP::cookie httponly $ckname enable
        }
    }

}
}
ltm rule /Common/mPayPROD_Rewrite {
    when RULE_INIT
{
	#==============================
	# REQUEST REWRITES
	#==============================
	set static::mPayPROD_request_uri
	{
		#"^/userPortal(/)?\$====/mPay-front/security/login.jsp"
		"^/userPortal(/)?\$====/mPay-front/security/login.do"
		"^/mPayAdmin(/)?\$====/mPay-Reporter/security/login.do"
	}
	set static::mPayPROD_request_host
	{
	}
	set static::mPayPROD_request_referer
	{
	}
	set static::mPayPROD_request_cookie
	{
	}

	#==============================
	# RESPONSE REWRITES
	#==============================
	set static::mPayPROD_response_setCookie
	{
	}
	set static::mPayPROD_response_location
	{
		"http://mpay.dubai.ae====https://mpay.dubai.ae"
	}
	set static::mPayPROD_response_contentLocation
	{
	}
	set static::mPayPROD_response_body
	{
	}
}

when HTTP_REQUEST
{
	if {$mPayPROD_GLOBAL_poolName == "mPayPROD_Pool" and $mPayPROD_GLOBAL_BREAK_ALL == 0}
	{

	STREAM::disable
	HTTP::header remove Accept-Encoding
	#-----------------
	#URI
	#-----------------
	if {[llength $static::mPayPROD_request_uri] > 0}
	{
	set mPayPROD_request_val [HTTP::uri]
	foreach mPayPROD_request_rewriteRecord $static::mPayPROD_request_uri
	{
		set mPayPROD_request_find [getfield $mPayPROD_request_rewriteRecord "====" 1]
		set mPayPROD_request_replace [getfield $mPayPROD_request_rewriteRecord "====" 2]
		if {$mPayPROD_request_replace == "nothing"}
		{
			set mPayPROD_request_replace ""
		}

		regsub -all $mPayPROD_request_find $mPayPROD_request_val $mPayPROD_request_replace mPayPROD_request_val
	}
	HTTP::uri $mPayPROD_request_val
	}
	#-----------------
	#Host
	#-----------------
	if {[llength $static::mPayPROD_request_host] > 0}
	{
	if {[HTTP::header exists Host]}
	{
		set mPayPROD_request_val [HTTP::host]
		foreach mPayPROD_request_rewriteRecord $static::mPayPROD_request_host
		{
			set mPayPROD_request_find [getfield $mPayPROD_request_rewriteRecord "====" 1]
			set mPayPROD_request_replace [getfield $mPayPROD_request_rewriteRecord "====" 2]

			if {$mPayPROD_request_replace == "nothing"}
			{
				set mPayPROD_request_replace ""
			}
			regsub -all $mPayPROD_request_find $mPayPROD_request_val $mPayPROD_request_replace mPayPROD_request_val
		}

		HTTP::header replace Host $mPayPROD_request_val
	}
	}
	#-----------------
	#Referer
	#-----------------
	if {[llength $static::mPayPROD_request_referer] > 0}
	{
	if {[HTTP::header exists Referer]}
	{
		set mPayPROD_request_val [HTTP::header value Referer]
		foreach mPayPROD_request_rewriteRecord $static::mPayPROD_request_referer
		{
			set mPayPROD_request_find [getfield $mPayPROD_request_rewriteRecord "====" 1]
			set mPayPROD_request_replace [getfield $mPayPROD_request_rewriteRecord "====" 2]

			if {$mPayPROD_request_replace == "nothing"}
			{
				set mPayPROD_request_replace ""
			}

			regsub -all $mPayPROD_request_find $mPayPROD_request_val $mPayPROD_request_replace mPayPROD_request_val
		}
		HTTP::header replace Referer $mPayPROD_request_val
	}
	}
	#-----------------
	#cookies
	#-----------------
	if {[llength $static::mPayPROD_request_cookie] > 0}
	{
	if {[HTTP::header exists Cookie]}
	{
		set mPayPROD_request_val [HTTP::header value Cookie]
		foreach mPayPROD_request_rewriteRecord $static::mPayPROD_request_cookie
		{
			set mPayPROD_request_find [getfield $mPayPROD_request_rewriteRecord "====" 1]
			set mPayPROD_request_replace [getfield $mPayPROD_request_rewriteRecord "====" 2]

			if {$mPayPROD_request_replace == "nothing"}
			{
				set mPayPROD_request_replace ""
			}

			regsub -all $mPayPROD_request_find $mPayPROD_request_val $mPayPROD_request_replace mPayPROD_request_val
		}
		HTTP::header replace Cookie $mPayPROD_request_val
	}
	}
	}
}

when HTTP_RESPONSE
{
	if {$mPayPROD_GLOBAL_poolName == "mPayPROD_Pool" and $mPayPROD_GLOBAL_BREAK_ALL == 0}
	{
	#-------------------------
	# rewrite set-cookies
	#-------------------------
	if {[llength $static::mPayPROD_response_setCookie] > 0}
	{
	if {[HTTP::header exists Set-Cookie]}
	{
		set mPayPROD_response_val_list [HTTP::header values Set-Cookie]
		HTTP::header remove Set-Cookie

		foreach mPayPROD_response_val $mPayPROD_response_val_list
		{
			foreach mPayPROD_response_rewriteRecord $static::mPayPROD_response_setCookie
			{
				set mPayPROD_response_find [getfield $mPayPROD_response_rewriteRecord "====" 1]
				set mPayPROD_response_replace [getfield $mPayPROD_response_rewriteRecord "====" 2]

				if {$mPayPROD_response_replace == "nothing"}
				{
					set mPayPROD_response_replace ""
				}
				regsub -all $mPayPROD_response_find $mPayPROD_response_val $mPayPROD_response_replace mPayPROD_response_val
			}
			HTTP::header insert Set-Cookie $mPayPROD_response_val
		}
	}
	}
	#-------------------------
	# rewrite Location
	#-------------------------
	if {[llength $static::mPayPROD_response_location] > 0}
	{
	if {[HTTP::is_redirect]}
	{
		set mPayPROD_response_val [HTTP::header value Location]

		foreach mPayPROD_response_rewriteRecord $static::mPayPROD_response_location
		{
			set mPayPROD_response_find [getfield $mPayPROD_response_rewriteRecord "====" 1]
			set mPayPROD_response_replace [getfield $mPayPROD_response_rewriteRecord "====" 2]
			if {$mPayPROD_response_replace == "nothing"}
			{
				set mPayPROD_response_replace ""
			}

			regsub -all $mPayPROD_response_find $mPayPROD_response_val $mPayPROD_response_replace mPayPROD_response_val
		}
		HTTP::header replace Location $mPayPROD_response_val
	}
	}
	#-------------------------
	# rewrite Content-Location
	#-------------------------
	if {[llength $static::mPayPROD_response_contentLocation] > 0}
	{
	if {[HTTP::header exists Content-Location]}
	{
		set mPayPROD_response_val [HTTP::header value Content-Location]

		foreach mPayPROD_response_rewriteRecord $static::mPayPROD_response_contentLocation
		{
			set mPayPROD_response_find [getfield $mPayPROD_response_rewriteRecord "====" 1]
			set mPayPROD_response_replace [getfield $mPayPROD_response_rewriteRecord "====" 2]
			if {$mPayPROD_response_replace == "nothing"}
			{
				set mPayPROD_response_replace ""
			}

			regsub -all $mPayPROD_response_find $mPayPROD_response_val $mPayPROD_response_replace mPayPROD_response_val
		}
		HTTP::header replace Content-Location $mPayPROD_response_val
	}
	}

	#----------------------------
	# Body
	#----------------------------
	if {[llength $static::mPayPROD_response_body] > 0}
	{
	set expression ""
	foreach mPayPROD_response_rewriteRecord $static::mPayPROD_response_body
	{
		set mPayPROD_response_find [getfield $mPayPROD_response_rewriteRecord "====" 1]
		set mPayPROD_response_replace [getfield $mPayPROD_response_rewriteRecord "====" 2]
		if {$mPayPROD_response_replace == "nothing"}
		{
			set mPayPROD_response_replace ""
		}

		set expression "$expression@$mPayPROD_response_find@$mPayPROD_response_replace@"
	}
	if {[HTTP::header Content-Type] contains "text" or [HTTP::header Content-Type] contains "xml" or [HTTP::header Content-Type] contains "java"}
	{
		STREAM::expression $expression
		STREAM::enable
	}
	}
	}
}
}
ltm rule /Common/redirect_strip_www {
                            #--------------------------------------------
#
#       ### UnUsed iRule for Ref ###
#
# This IRULe validates any incoming request
# starting with "www." and strips the "www."
# out then redirects to the new hostname 
# (the one without "www." )
#
#--------------------------------------------
when HTTP_REQUEST
{
	# ADDED 22nd Aug 2011
	set strip_www  0
	# END  ADDED 22nd Aug 2011
	if { [HTTP::host] starts_with "www\." }
	{
		# ADDED 22nd Aug 2011
		set strip_www  1
		# END  ADDED 22nd Aug 2011
		set protocol "http://"
		set is_https 0
        if {[PROFILE::exists clientssl] == 1}
		{
        	set is_https 1
        }
        #if virtual host is running over SSL then user HTTPS
        if {$is_https == 1}
		{
           	set protocol "https://"
        }
		set host [HTTP::host]
		regsub -all -nocase "www\." $host "" host
		HTTP::respond 302 Location "$protocol$host/"
	}

}
}
ltm virtual /Common/API_MGR_SSL_vs {
    destination /Common/10.21.13.33:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/API_MGR_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/API_MGR_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/API_PROD_vs {
    destination /Common/10.21.13.30:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/API_PROD_cookie {
            default yes
        }
    }
    pool /Common/API_PROD_SSL_Pool
    profiles {
        /Common/API_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARP-Dev-SSL-vs {
    description ARP-Dev-SSL-vs
    destination /Common/10.21.13.63:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Cookie_Testing {
            default yes
        }
    }
    profiles {
        /Common/ARP_PRD_HTTP { }
        /Common/ARP_UAT_ssl {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_UAT_SSL_Base
        /Common/APR_UAT_SSL_Rewrite_discov
        /Common/ARP_UAT_SSL_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARP-PRD-SSL-vs {
    destination /Common/10.21.13.61:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Cookie_Testing {
            default yes
        }
    }
    profiles {
        /Common/ARP_PRD_HTTP { }
        /Common/ARP_PRD_ssl {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_PRD_SSL_Base
        /Common/ARP_PROD_SSL_Rewrite_discov
        /Common/ARP_PRD_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARP-PRD-vs {
    destination /Common/10.21.13.61:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_PRD_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARPPortal-PRD-SSL-vs {
    description "ARP Portal services"
    destination /Common/10.21.13.188:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/ARP_ADF_Http_Profile { }
        /Common/ARP_PRD_ssl {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_ADF_PRD_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARPPortal-PRD-vs {
    description "ARP Portal services"
    destination /Common/10.21.13.188:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/ARP_ADF_Http_Profile { }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_ADF_PRD_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ARP_Dev_VS_80 {
    description ARP_Dev_VS_80
    destination /Common/10.21.13.63:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Cookie_Testing {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/ARP_UAT_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/BAM_PROD_SSL_vs {
    destination /Common/10.21.13.55:443
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/BAM_PROD_SSL_Pool
    profiles {
        /Common/BAM_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/BI_PROD_vs {
    destination /Common/10.21.13.40:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/BI_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/BI_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/BI_PROD_Base
        /Common/BI_PROD_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/BI_PROD_vs_80 {
    destination /Common/10.21.13.40:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/BI_PROD_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/BI_STAG_vs {
    destination /Common/10.21.13.41:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/BI_STAG_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/BI_STAG_Base
        /Common/BI_STAG_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Cloud_NET_8443_Pool {
    destination /Common/10.21.13.187:8443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/ARP_UAT_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Cloud_NET_PROD_SSL_Disable
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Cloud_NET_PROD_8001_vs {
    destination /Common/10.21.13.187:8001
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/Cloud_NET_PROD_8001_Pool
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Cloud_NET_PROD_8002_vs {
    destination /Common/10.21.13.187:8002
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/Cloud_NET_PROD_8002_Pool
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Cloud_NET_PROD_SSL_Pool {
    destination /Common/10.21.13.187:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/Cloud_NET_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Cloud_NET_PROD_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port disabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Cloud_NET_PROD_vs {
    description "Cloud Dot Net Prod #INC000000333021"
    destination /Common/10.21.13.187:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Cloud_NET_PROD_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Coesys_PRD_SSL_vs {
    destination /Common/10.21.13.161:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Coesys_PRD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Coesys_PRD_SSL_Base
        /Common/Coesys_PRD_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dashboard_vs {
    destination /Common/10.21.13.49:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Dashboard_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Dashboard_Base
        /Common/Dashboard_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dubainow_PRD_SSL_vs {
    destination /Common/10.21.13.184:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Dubainow_PRD_cookie {
            default yes
        }
    }
    profiles {
        /Common/Admin_Dubaicareers_PRD_SNI_SSL {
            context clientside
        }
        /Common/Dubaicareers_PRD_SNI_SSL {
            context clientside
        }
        /Common/Dubaicareers_PRD_SNI_www {
            context clientside
        }
        /Common/Dubainow_PRD_dsg_ssl {
            context clientside
        }
        /Common/Dubainow_PRD_http { }
        /Common/Dubainow_PRD_ssl {
            context clientside
        }
        /Common/ejob_ae_SNI {
            context clientside
        }
        /Common/ejob_dubai_gov_ae_SNI {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Dubainow_PRD_SSL_Base
        /Common/Dubainow_PRD_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dubainow_PRD_vs {
    destination /Common/10.21.13.184:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Dubainow_PRD_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dubainow_QA_80_vs {
    destination /Common/10.21.13.182:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Dubainow_QA_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dubainow_QA_SSL_vs {
    destination /Common/10.21.13.182:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/DockerPoc_QA_cookie {
            default yes
        }
    }
    profiles {
        /Common/Dubainow_QA_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Dubainow_QA_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Dubainowsvc_PROD_SSL_vs {
    description Dubainowsvc_PROD_SSL_vs
    destination /Common/10.21.13.183:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/Dubainowsvc_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/dubainowsvc_PROD_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/EDCP_PROD_vs {
    destination /Common/10.21.13.25:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/EDCP_PROD_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/EDCP_PROD_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/EDCP_PROD_Base
        /Common/EDCP_PROD_Maintenance
        /Common/EDCP_PROD_Pool_Select
        /Common/EDCP_PROD_Pool_Select_sso
        /Common/EDCP_PROD_Pool_SSL_Disable
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/EDCP_PROD_vs_80 {
    destination /Common/10.21.13.25:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/EDCP_PROD_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/EDCP_PROD_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/EDCP_QA_vs {
    destination /Common/10.21.13.16:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/EDCP_QA_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/EDCP_QA_vs_http { }
        /Common/EDCP_QA_vs_ssl {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/EDCP_QA_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/EDCP_QA_vs_80 {
    destination /Common/10.21.13.16:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/EDCP_QA_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/EDCP_QA_vs_http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/EDCP_QA_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Email_Archive_SSL_vs {
    description "TMG to F5 Migration Test"
    destination /Common/10.21.13.52:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    pool /Common/Email_Archive_Pool
    profiles {
        /Common/Email_Archive_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Email_Archive_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Email_Archive_vs_80 {
    description "TMG to F5 Migration Test_80"
    destination /Common/10.21.13.52:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Email_Archive_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch2016_SSL_Services {
    destination /Common/10.21.13.56:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch2016_ssl_Services {
            context clientside
        }
        /Common/Exch_2016_tcp { }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
    }
    rules {
        /Common/Exch2016_Services_SSL
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch2016_Services {
    destination /Common/10.21.13.56:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/http { }
    }
    rules {
        /Common/Exch2016_Services
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_IMAPS_vs {
    destination /Common/10.21.13.70:993
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch2016_ssl_Services {
            context clientside
        }
        /Common/Exch_2016_tcp { }
        /Common/serverssl {
            context serverside
        }
    }
    rules {
        /Common/Exch2016_IMAPS_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_IMAP_vs {
    destination /Common/10.21.13.70:143
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Exch_SrcIP {
            default yes
        }
    }
    profiles {
        /Common/Exch_2016_tcp { }
    }
    rules {
        /Common/Exch_IMAP_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_Outlook_vs {
    destination /Common/10.21.13.70:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Exch_Outlook_SSLID {
            default yes
        }
    }
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/Exch_Outlook_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
    }
    rules {
        /Common/Exch_Outlook_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_POP3S_vs {
    destination /Common/10.21.13.70:995
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch2016_ssl_Services {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Exch2016_POP3S_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_POP_vs {
    destination /Common/10.21.13.70:110
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Exch_SrcIP {
            default yes
        }
    }
    profiles {
        /Common/Exch_2016_tcp { }
    }
    rules {
        /Common/Exch_POP3_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Exch_autodisc_vs {
    destination /Common/10.21.13.71:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/http { }
    }
    rules {
        /Common/Exch_autodisc_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/GIN-ME-Public_vs {
    destination /Common/10.21.13.6:63984
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/GIN-ME-Public
    profiles {
        /Common/clientssl {
            context clientside
        }
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/GSA_PROD_vs {
    destination /Common/10.22.65.99:80
    disabled
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/GSA_PROD_Pool
    profiles {
        /Common/tcp { }
    }
    source 10.22.65.0/24
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_765
    }
    vlans-enabled
}
ltm virtual /Common/GSB_PROD_80_vs {
    destination /Common/10.21.13.31:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/GSB_PROD_80_Base
        /Common/GSB_PROD_80_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/GeSSPROD_for_GSBPROD_vs {
    destination /Common/10.21.13.32:54546
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/GeSSPROD_for_GSBPROD_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HHRC-JIRA-PRD-SSL-vs {
    destination /Common/10.21.13.48:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/HHRC-JIRA-PRD-ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/HHRC-JIRA-PRD-SSL-Base
        /Common/HHRC-UTM-QA-ssl-Disable
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HHRC-JIRA-PRD-vs {
    destination /Common/10.21.13.48:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HHRC-JIRA-PRD-Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_PROD_5100_vs {
    destination /Common/10.21.13.28:5100
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/HMC_NET_PROD_5100
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_PROD_SSL_vs {
    destination /Common/10.21.13.28:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/HMC_NET_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/DubaiID_PRD_SNI_SSL {
            context clientside
        }
        /Common/DubaiID_www_PRD_SNI_SSL {
            context clientside
        }
        /Common/HMC_NET_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_NET_PROD_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_PROD_vs {
    destination /Common/10.21.13.28:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/HMC_NET_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_NET_PROD_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_QA_5100_vs {
    destination /Common/10.21.13.38:5100
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/HMC_NET_QA_5100
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_QA_SSL_vs {
    destination /Common/10.21.13.38:443
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/HMC_NET_QA_Pool
    profiles {
        /Common/HMC_NET_QA_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_NET_QA_SSL
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_NET_QA_vs {
    description "HMC .NET websites"
    destination /Common/10.21.13.38:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_NET_QA_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_PROD_IIS_FAD_SSL_VS {
    description HMC_PROD_IIS_FAD_SSL_VS
    destination /Common/10.21.13.185:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/FAD_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_PROD_FAD_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HMC_PROD_IIS_FAD_VS_80 {
    description HMC_PROD_IIS_FAD_VS_80
    destination /Common/10.21.13.185:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/HMC_PROD_FAD_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/HTTPS_grp_rel_dev_web_vs {
    destination /Common/10.21.13.54:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/grpNonPROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/grp_nonproduction {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/GRP_NonPROD_443_Global_Variables
        /Common/GRP_NonPROD_443_Handle_www
        /Common/GRP_NonPROD_443_Pool_Select
        /Common/GRP_NonPROD_443_Pools_Maintenance
        /Common/GRP_NonPROD_443_Rewrite_grpdemo
        /Common/GRP_NonPROD_443_Rewrite_grpdev
        /Common/GRP_NonPROD_443_Rewrite_grpsupt
        /Common/GRP_NonPROD_443_Rewrite_grpuat
        /Common/GRP_NonPROD_443_Rewrite_grpproj
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/Hyperion-PRD-13080 {
    destination /Common/10.25.1.99:13080
    disabled
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/Hyperion-PRD-13080
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/Hyperion-FE
    }
    vlans-enabled
}
ltm virtual /Common/Hyperion-PRD-INT {
    destination /Common/10.25.1.99:19000
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/Hyperion-PRD-INT-Pool
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/Hyperion-FE
    }
    vlans-enabled
}
ltm virtual /Common/Hyperion-PRD-SSL-vs {
    destination /Common/10.21.13.69:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Hyperion-PRD-Cookie {
            default yes
        }
    }
    pool /Common/Hyperion-PRD-Pool
    profiles {
        /Common/Hyperion-PRD-ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Hyperion-PROD-SSL-Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Hyperion-PRD-vs {
    destination /Common/10.21.13.69:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Hyperion-PROD-Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/IDS_PROD_vs {
    destination /Common/10.21.13.24:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/IDS_PROD_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/IDS_PROD_2018_DEWA {
            context clientside
        }
        /Common/IDS_PROD_2018_DEWA_Srv {
            context serverside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/IDS_PROD_Base
        /Common/IDS_PROD_Pool_Select
        /Common/IDS_PROD_Pool_SSL_Disable
        /Common/IDS_PROD_Rewrite
        /Common/IDS_PROD_Splunk_Log
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/JIRA-CONF-DEV-SSL-vs {
    destination /Common/10.21.13.180:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/JIRA-CONF-DEV-ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/JIRA_CONF_DEV_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/JIRA-CONF-DEV-vs {
    destination /Common/10.21.13.180:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/JIRA_CONF_DEV_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/JIRA_STG_vs {
    description INC000000196736
    destination /Common/10.21.13.45:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/JIRA_CONF_PRD_SDP {
            context clientside
        }
        /Common/JIRA_STG_vs_ssl {
            context clientside
        }
        /Common/SonarQA_http_Profile { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/JIRA_STG_SSL_Base
        /Common/JIRA_STG_SSL_Pool_SSL_Disable
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/JIRA_STG_vs_22 {
    destination /Common/10.21.13.45:22
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SmrtBld_Cloud_PROD_22_Pool
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/JIRA_STG_vs_80 {
    description INC000000196736
    destination /Common/10.21.13.45:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/JIRA_STG_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/LAD-DMZ-WF-INT-vs {
    destination /Common/10.23.72.97:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    pool /Common/LAD-DMZ-WF-Pool
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V972
    }
    vlans-enabled
}
ltm virtual /Common/LAD-Intra-WF-INT-vs {
    destination /Common/10.23.72.98:80
    disabled
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    pool /Common/LAD-Intra-WF-Pool
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V972
    }
    vlans-enabled
}
ltm virtual /Common/LAD-Office-SSL-INT-vs {
    destination /Common/10.23.72.99:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    pool /Common/LAD-Office-SSL-Pool
    profiles {
        /Common/LAD_CMS_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V972
    }
    vlans-enabled
}
ltm virtual /Common/LAD-Office-Web-INT-vs {
    destination /Common/10.23.72.99:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    pool /Common/LAD-Office-Web-Pool
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V972
    }
    vlans-enabled
}
ltm virtual /Common/LAD_CMS_SSL_vs {
    destination /Common/10.21.13.14:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/LAD_CMS_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/LAD_CMS_SSL_Base
        /Common/LAD_CMS_SSL_Disable
        /Common/LAD_CMS_SSL_Rewrite_tadween
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/LAD_CMS_vs {
    destination /Common/10.21.13.14:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/LAD_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/LAD_CMS_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/MyID_PROD_EIDA_vs {
    destination /Common/10.21.13.27:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/MyID_PROD_EIDA_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/MyID_PROD_EIDA_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/OEM-DSG-SSL-vs {
    destination /Common/10.21.13.58:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/OEM-DSG-ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/OEM-DSG-SSL-Base
        /Common/OEM-DSG-SSL-Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/OEM-DSG-vs {
    destination /Common/10.21.13.58:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/OEM-DSG-Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/RSA_Self_Service {
    destination /Common/10.21.13.15:443
    disabled
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ssl {
            default yes
        }
    }
    pool /Common/RSA_Self_Service
    profiles {
        /Common/degrsa.dubai.gov.ae {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/RSA_Self_Service_P
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/SFB_SSL_vs {
    description "SFB_SSL_vs Skype MS"
    destination /Common/10.21.13.36:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/Exch_Outlook_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
    }
    rules {
        /Common/SFB_PROD_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SFB_Vs {
    description "SFB_Vs Skype MS"
    destination /Common/10.21.13.36:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Exch_Outlook_SSLID {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SFB_PROD_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SRM_Vitrue_SSL_vs {
    destination /Common/10.21.13.166:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/SRM_Vitrue_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SRM_Vitrue_SSL_Base
        /Common/SRM_Vitrue_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SRM_Vitrue_vs {
    destination /Common/10.21.13.166:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SRM_Vitrue_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO-ADP-PRD-1099-vs {
    destination /Common/10.23.20.131:1099
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-ADP-PRD-1099
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-ADP-PRD-1199-vs {
    destination /Common/10.23.20.131:1199
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-ADP-PRD-1199
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-ADP-PRD-1299-vs {
    destination /Common/10.23.20.131:1299
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-ADP-PRD-1299
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-ADP-PRD-45580-vs {
    destination /Common/10.23.20.131:45580
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-ADP-PRD-45580
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-CLM-PRD-7136-vs {
    destination /Common/10.23.20.132:7136
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-CLM-PRD-7136
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-HHRC-AD-Agent-vs {
    description "SSO HHRC Active Directory Agent"
    destination /Common/10.21.13.186:45580
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-HHRC-AD-Agent-pool
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-STG-1099-vs {
    destination /Common/10.23.12.202:1099
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-SIM-STG-1099
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-STG-45580-vs {
    destination /Common/10.23.12.202:45580
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-SIM-STG-45580
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-STG-SSL-vs {
    destination /Common/10.23.11.52:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/SSO-SIM-STG-SSL
    profiles {
        /Common/clientssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_911
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-STG-Web-vs {
    destination /Common/10.23.11.52:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO-SIM-STG-Web-Base
    }
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_911
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-V813-SSL-vs {
    destination /Common/10.21.13.60:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_GRP_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Idmsvc_Prod_SSL
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO-SIM-V983-SSL-vs {
    destination /Common/192.168.3.32:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/source_addr {
            default yes
        }
    }
    pool /Common/SSO-SIM-PRD-SSL
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V983
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-PRD-389-vs {
    destination /Common/10.23.20.133:389
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-PRD-389
    profiles {
        /Common/SSO-TDS-PRD-389-tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-PRD-636-vs {
    destination /Common/10.23.20.133:636
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-PRD-636
    profiles {
        /Common/SSO-TDS-PRD-636-tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-PRD-1389-vs {
    destination /Common/10.23.20.133:1389
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-PRD-1389
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-PRD-1636-vs {
    destination /Common/10.23.20.133:1636
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-PRD-1636
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V920
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-STG-389-vs {
    destination /Common/10.23.12.201:389
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-STG-389
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-STG-636-vs {
    destination /Common/10.23.12.201:636
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-STG-1636
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-STG-1389-vs {
    destination /Common/10.23.12.201:1389
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-STG-1389
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO-TDS-STG-1636-vs {
    destination /Common/10.23.12.201:1636
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/SSO-TDS-STG-1636
    profiles {
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/V912
    }
    vlans-enabled
}
ltm virtual /Common/SSO_DEMO_80_vs3 {
    destination /Common/10.21.13.19:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_DEMO_vs3_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_DEMO_vs3_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_DEMO_vs1 {
    destination /Common/10.21.13.17:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_DEMO_vs1_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_DEMO_vs1_https { }
        /Common/SSO_DEMO_vs1_ssl {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_DEMO_vs1_Base
        /Common/SSO_DEMO_vs1_Handle_www
        /Common/SSO_DEMO_vs1_Pool_Select
        /Common/SSO_DEMO_vs1_Pool_Select_nosso
        /Common/SSO_DEMO_vs1_Pool_SSL_Disable
        /Common/SSO_DEMO_vs1_Pool_xCookie
        /Common/SSO_DEMO_vs1_Rewrite_demowebmail
        /Common/SSO_DEMO_vs1_Rewrite_grpdemo
        /Common/SSO_DEMO_vs1_Rewrite_gdemo_nosso
        /Common/SSO_DEMO_vs1_Rewrite_grpdemo_discov
        /Common/SSO_DEMO_vs1_Rewrite_grpdemo_dmz
        /Common/SSO_DEMO_vs1_Rewrite_idm
        /Common/SSO_DEMO_vs1_Rewrite_idp
        /Common/SSO_DEMO_vs1_Rewrite_sp2_dga
        /Common/SSO_DEMO_vs1_Rewrite_sp_dga
        /Common/SSO_DEMO_vs1_Rewrite_sp_edcp
        /Common/SSO_DEMO_vs1_Rewrite_edcpqa
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_DEMO_vs1_80 {
    destination /Common/10.21.13.17:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/SSO_DEMO_vs1_https { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_DEMO_vs1_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_DEMO_vs2 {
    destination /Common/10.21.13.18:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_DEMO_vs2_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_DEMO_vs2_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_DEMO_vs2_Base
        /Common/SSO_DEMO_vs2_Handle_www
        /Common/SSO_DEMO_vs2_Pool_Select
        /Common/SSO_DEMO_vs2_Rewrite_sdesk
        /Common/SSO_DEMO_vs2_Rewrite_sp_da
        /Common/SSO_DEMO_vs2_Rewrite_epay
        /Common/SSO_DEMO_vs2_Rewrite_mpay
        /Common/SSO_DEMO_vs2_Rewrite_ecomp
        /Common/SSO_DEMO_vs2_Rewrite_esugg
        /Common/SSO_DEMO_vs2_Rewrite_gess
        /Common/SSO_DEMO_vs2_Rewrite_sync
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_DEMO_vs3 {
    destination /Common/10.21.13.19:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_DEMO_vs3_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_DEMO_vs3_https { }
        /Common/SSO_DEMO_vs3_ssl {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_DEMO_vs3_Base
        /Common/SSO_DEMO_vs3_Handle_www
        /Common/SSO_DEMO_vs3_Pool_Select
        /Common/SSO_DEMO_vs3_Rewrite_grpportal
        /Common/SSO_DEMO_vs3_Rewrite_sp_pda
        /Common/SSO_DEMO_vs3_Rewrite_teams
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_80_vs1 {
    destination /Common/10.21.13.22:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_vs1_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_80_vs2 {
    destination /Common/10.21.13.23:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_vs2_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_GRP_80_vs {
    destination /Common/10.21.13.50:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_GRP_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/GPR_Oneconnect { }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_GRP_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_GRP_MSCA_vs {
    destination /Common/10.21.13.50:65332
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/grp_10332WebPool
    profiles {
        /Common/GPR_Oneconnect { }
        /Common/SSO_PROD_GRP_MSCA_tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_GRP_vs {
    destination /Common/10.21.13.50:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_GRP_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/GPR_Oneconnect { }
        /Common/SSO_PROD_GRP_tcp { }
        /Common/SSO_PROD_GRP_vs_https { }
        /Common/SSO_PROD_GRP_vs_ssl {
            context clientside
        }
        /Common/stream { }
    }
    rules {
        /Common/SSO_PROD_GRP_Base
        /Common/SSO_PROD_GRP_Pool_Select
        /Common/SSO_PROD_GRP_Pool_Select_sso
        /Common/SSO_PROD_GRP_Pool_Maintenance
        /Common/SSO_PROD_GRP_Rewrite_discov
        /Common/SSO_PROD_GRP_Rewrite_eJob
        /Common/SSO_PROD_GRP_Rewrite_grp
        /Common/SSO_PROD_GRP_Rewrite_grpdmz
        /Common/SSO_PROD_GRP_Rewrite_iSup
        /Common/SSO_PROD_GRP_Rewrite_endeca
        /Common/SSO_PROD_GRP_Rewrite_ssoDiscov
        /Common/SSO_PROD_GRP_Rewrite_ssogrp
        /Common/SSO_PROD_GRP_Rewrite_ssogrpDmz
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_Gess_Sync_80_vs {
    destination /Common/10.21.13.44:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_GessSync_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_Gess_Sync_vs {
    destination /Common/10.21.13.44:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_Gess_Sync_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_Gess_Sync_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_GessSync_Base
        /Common/SSO_PROD_GessSync_Pool_Select
        /Common/SSO_PROD_GessSync_Rewrite_gess
        /Common/SSO_PROD_GessSync_Rewrite_sync
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_ShPnt_80_vs {
    destination /Common/10.21.13.26:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_ShPnt_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_ShPnt_vs {
    destination /Common/10.21.13.26:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_ShPnt_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/PMO_Smartdubai_SNI {
            context clientside
        }
        /Common/SSO_PROD_ShPnt { }
        /Common/SSO_PROD_ShPnt_sdg {
            context clientside
        }
        /Common/SSO_PROD_ShPnt_vs_ssl {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_ShPnt_Base
        /Common/SSO_PROD_ShPnt_Pool_Maintenance
        /Common/SSO_PROD_ShPnt_Pool_Select
        /Common/SSO_PROD_ShPnt_Pool_Select_sso
        /Common/SSO_PROD_ShPnt_Pool_SSL_Disable
        /Common/SSO_PROD_ShPnt_Rewrite_ssoteams
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_eComp_eSugg_80_vs {
    destination /Common/10.21.13.43:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_CompSugg_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_eComp_eSugg_vs {
    destination /Common/10.21.13.43:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_eComp_eSugg_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_eComp_eSugg_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_CompSugg_Base
        /Common/SSO_PROD_CompSugg_Pool_Select
        /Common/SSO_PROD_CompSugg_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_ePay_mPay_80_vs {
    destination /Common/10.21.13.42:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_ePaymPay_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_ePay_mPay_vs {
    destination /Common/10.21.13.42:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_ePay_mPay_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_ePay_mPay_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_ePaymPay_Base
        /Common/SSO_PROD_ePaymPay_Maintenance
        /Common/SSO_PROD_ePaymPay_Pool_Select
        /Common/SSO_PROD_ePaymPay_Rewrite_epay
        /Common/SSO_PROD_ePaymPay_Rewrite_mpay
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_sDesk_80_vs {
    destination /Common/10.21.13.21:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_sDesk_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_SDESK_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_sDesk_vs {
    destination /Common/10.21.13.21:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_sDesk_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_sDesk_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_SDesk_Base
        /Common/SSO_PROD_SDesk_Handle_www
        /Common/SSO_PROD_SDesk_Pool_Select
        /Common/SSO_PROD_SDesk_Pool_Select_sso
        /Common/SSO_PROD_SDesk_Rewrite_dsgdesk
        /Common/SSO_PROD_SDesk_Rewrite_dsgdsso
        /Common/SSO_PROD_SDesk_Rewrite_sdesk
        /Common/SSO_PROD_SDesk_Rewrite_dofdesk
        /Common/SSO_PROD_SDesk_Rewrite_sdesksso
        /Common/SSO_PROD_SDesk_Rewrite_slcdesk
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_vs1 {
    destination /Common/10.21.13.22:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_vs1_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_vs1_https { }
        /Common/SSO_PROD_vs1_ssl {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_vs1_Base
        /Common/SSO_PROD_vs1_Handle_www
        /Common/SSO_PROD_vs1_Pool_Maintenance
        /Common/SSO_PROD_vs1_Pool_Select
        /Common/SSO_PROD_vs1_Pool_SSL_Disable
        /Common/SSO_PROD_vs1_Pool_xCookie
        /Common/SSO_PROD_vs1_Rewrite_idp
        /Common/SSO_PROD_vs1_Rewrite_idm
        /Common/SSO_PROD_vs1_Rewrite_sp_dga
        /Common/SSO_PROD_vs1_Rewrite_sp1_dga
        /Common/SSO_PROD_vs1_Rewrite_sp2_dga
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_vs2 {
    destination /Common/10.21.13.23:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_vs2_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_vs2_https { }
        /Common/SSO_PROD_vs2_ssl {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/SSO_PROD_vs2_Base
        /Common/SSO_PROD_vs2_Handle_www
        /Common/SSO_PROD_vs2_Pool_Select
        /Common/SSO_PROD_vs2_Rewrite_sp_deg
        /Common/SSO_PROD_vs2_Rewrite_sp_dghr
        /Common/SSO_PROD_vs2_Rewrite_sp_dof
        /Common/SSO_PROD_vs2_Rewrite_sp_dsg
        /Common/SSO_PROD_vs2_Rewrite_sp_dubai
        /Common/SSO_PROD_vs2_Rewrite_sp_fad
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_wMail_80_vs {
    destination /Common/10.21.13.29:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/http { }
    }
    rules {
        /Common/SSO_PROD_wMail_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/SSO_PROD_wMail_vs {
    destination /Common/10.21.13.29:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/SSO_PROD_wMail_vs_cookie {
            default yes
        }
    }
    profiles {
        /Common/Exch_2016_tcp { }
        /Common/SSO_PROD_wMail_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
    }
    rules {
        /Common/SSO_PROD_wMail_Base
        /Common/SSO_PROD_wMail_Handle_www
        /Common/SSO_PROD_wMail_Pool_Maintenance
        /Common/SSO_PROD_wMail_Pool_Select
        /Common/SSO_PROD_wMail_Pool_Select_sso
        /Common/SSO_PROD_wMail_Pool_SSL_Disable
        /Common/SSO_PROD_wMail_Rewrite_ssowmail
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2007_PROD_vs {
    destination /Common/10.21.13.20:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2007_PROD_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2010_PROD_SSL_vs {
    description "ShPnt 2010 with HTTPS access"
    destination /Common/10.21.13.47:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt2013_PROD_Cookie {
            default yes
        }
    }
    profiles {
        /Common/ShPnt2010_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2010_PROD_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2010_PROD_vs {
    description "Redirect to ShPnt2010_PROD_SSL_vs"
    destination /Common/10.21.13.47:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2010_PROD_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2013_PROD_vs {
    description "ShPnt 2013 with NO HTTPS access"
    destination /Common/10.21.13.37:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt2013_PROD_Cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2013_PROD_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2013_SSL_80_vs {
    destination /Common/10.21.13.57:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2013_SSL_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2013_SSL_vs {
    destination /Common/10.21.13.57:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt2013_SSL_Cookie {
            default yes
        }
    }
    profiles {
        /Common/ShPnt2013_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt2013_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2016_80_vs {
    description "ShPnt2016_80_vs ,INC000000346814"
    destination /Common/10.21.13.189:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_2016_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt2016_SSL_vs {
    description "ShPnt2016_SSL_vs ,INC000000346814"
    destination /Common/10.21.13.189:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/ShPnt2013_ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_2016_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_Admins_SSL_vs {
    destination /Common/10.21.13.11:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt_Admins_cookie {
            default yes
        }
    }
    profiles {
        /Common/SSO_PROD_ShPnt { }
        /Common/ShPnt_Admins_ssl_SDG {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_Admins_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_Admins_vs {
    destination /Common/10.21.13.11:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_Admins_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_PROD_vs_80 {
    description "ShPnt 2010 with NO HTTPS access"
    destination /Common/10.21.13.35:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_PROD_80_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_PROD_vs_443 {
    description "Temp request"
    destination /Common/10.21.13.35:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/dubaicustoms {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_PROD_443_Tmp
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_QA_vs {
    destination /Common/10.21.13.46:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt_QA_cookie {
            default yes
        }
    }
    profiles {
        /Common/ShPnt_QA_DBXcustoms {
            context clientside
        }
        /Common/ShPnt_QA_SSL { }
        /Common/ShPnt_QA_dubai_ae {
            context clientside
        }
        /Common/ShPnt_QA_ssl {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_QA_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ShPnt_QA_vs_80 {
    destination /Common/10.21.13.46:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ShPnt_QA_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/ShPnt_QA_80_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Smart_Customer_SSL_vs {
    destination /Common/10.21.13.72:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Smart_Customer_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Smart_Customer_SSL_Base
        /Common/Smart_Customer_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Smart_Customer_vs {
    destination /Common/10.21.13.72:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Smart_Customer_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Sts-Interna_PRD_SSL_vs {
    description STS-PROD
    destination /Common/10.21.13.186:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/Sts-Internal_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/STS_PROD_SSL_Base
        /Common/STS_PROD_SSL_xCookie
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Survey_PROD_vs {
    destination /Common/10.21.13.121:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Cookie_Testing {
            default yes
        }
    }
    profiles {
        /Common/Survey_PROD_vs_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Survey_PROD_Base
        /Common/Survey_PROD_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Twig_PROD_QA_SSL_vs {
    destination /Common/10.21.13.62:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Twig_PROD_QA_cookie {
            default yes
        }
    }
    profiles {
        /Common/Twig_PROD_QA_ssl {
            context clientside
        }
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Twig_PROD_QA_SSL_Base
        /Common/Twig_PROD_QA_SSL_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Twig_PROD_QA_vs {
    destination /Common/10.21.13.62:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Twig_PROD_QA_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Twig_PROD_QA_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/UCP_DTR_Docker_Prod {
    description "INC000000376139 Docker Prod"
    destination /Common/10.21.13.130:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/cookie {
            default yes
        }
    }
    profiles {
        /Common/Dubainowsvc_PROD_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Docker_UCP_DTR_Prod_SSL_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Veridoc-JBoss-PRD-SSL-vs {
    destination /Common/10.21.13.181:443
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/Veridoc-JBoss-PRD
    profiles {
        /Common/Veridoc-JBoss-PRD-ssl {
            context clientside
        }
        /Common/http { }
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Veridoc-JBoss-PRD-vs {
    destination /Common/10.21.13.181:80
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/Veridoc-JBoss-PRD
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/WatchDox_SSL_vs {
    destination /Common/10.21.13.59:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/WatchDox_ssl {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/WatchDox_SSL_Base
        /Common/WatchDox_SSL_SRVRCONN
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/WatchDox_vs {
    destination /Common/10.21.13.59:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/WatchDox_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Watson_Prod_SSL_vs {
    description Watson_Prod_SSL_vs
    destination /Common/10.21.13.167:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/Watson_Prod_Cookie {
            default yes
        }
    }
    profiles {
        /Common/Watson_Prod_ssl {
            context clientside
        }
        /Common/http { }
        /Common/rashid_ae_SNI {
            context clientside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/Watson_Prod_Pool_Select
        /Common/Watson_Prod_SSL_Rewrite
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/Watson_Prod_vs {
    description Watson_Prod_vs
    destination /Common/10.21.13.167:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Watson_Prod_Base
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/ePayPROD_for_mPayPROD_vs {
    destination /Common/10.22.5.98:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/epay_prod {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/tcp { }
    }
    rules {
        /Common/ePayPROD_for_mPayPROD_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_705
    }
    vlans-enabled
}
ltm virtual /Common/ePayPROD_vs {
    destination /Common/10.21.13.34:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/ePayPROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/ePayPROD_http { }
        /Common/epay_prod {
            context clientside
        }
        /Common/epay_tcp_client { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
    }
    rules {
        /Common/ePayPROD_Global_Variables
        /Common/ePayPROD_Maintenance
        /Common/ePayPROD_Pool_Select
        /Common/ePayPROD_Pool_URI_Log
        /Common/ePayPROD_Pool_xCookie
        /Common/ePayPROD_Pool_SSL_Disable
        /Common/ePayPROD_Raise_Timeout
        /Common/ePayPROD_Replace_JID
        /Common/ePayPROD_Rewrite
        /Common/ePayPROD_Rewrite_Reports
        /Common/ePayPROD_Rewrite_ePayHub
        /Common/ePayPROD_Rewrite_ePayHub_Ext_CS
        /Common/ePayPROD_Rewrite_wwePayHub
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/eServPROD_DSS_Internal_vs {
    destination /Common/10.21.13.165:9763
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/eServPROD_DSS_for_eServPROD_GSB_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/eServPROD_ESB_TL_vs {
    destination /Common/10.21.13.31:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/gsb_prod_2018 {
            context clientside
        }
        /Common/http { }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/eServPROD_GSB_Global_Variables
        /Common/eServPROD_GSB_Pool_Select
        /Common/eServPROD_GSB_Pool_SSL_Disable
        /Common/eServPROD_GSB_Rewrite_grp
        /Common/eServPROD_GSB_Rewrite_sec
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/eServPROD_SYNC_Int_vs {
    destination /Common/10.22.1.99:54546
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/eServPROD_SYNC_Int_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_701
    }
    vlans-enabled
}
ltm virtual /Common/eServPROD_SYNC_for_mPayPROD_vs {
    destination /Common/10.22.5.99:54546
    disabled
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/eServPROD_SYNC_for_mPayPROD_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_705
    }
    vlans-enabled
}
ltm virtual /Common/eServicesPROD_vs {
    destination /Common/10.21.13.32:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/eServicesPROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/eServicePROD_http_to_https { }
        /Common/eservices_prod {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/eServicesPROD_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/grp_rel_dev_web_vs {
    destination /Common/10.21.13.54:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/grpNonPROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/ARP_PRD_HTTP { }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/GRP_NonPROD_80_Global_Variables
        /Common/GRP_NonPROD_80_Pool_Select
        /Common/GRP_NonPROD_80_Pools_Maintenance
        /Common/GRP_NonPROD_80_Rewrite_exception
        /Common/GRP_NonPROD_80_Rewrite_grpdemo
        /Common/GRP_NonPROD_80_Rewrite_grpdev
        /Common/GRP_NonPROD_80_Rewrite_grpsupt
        /Common/GRP_NonPROD_80_Rewrite_grpuat
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/grpapp_Internal_vs {
    destination /Common/10.21.11.99:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/grpapp_Internal_iRule
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_11
    }
    vlans-enabled
}
ltm virtual /Common/mDubai_PROD {
    destination /Common/10.21.13.51:80
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/mDubai_PROD_cookie {
            default yes
        }
    }
    pool /Common/mDubai_PROD_Pool
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/mDubai_PROD_SSL_vs {
    destination /Common/10.21.13.51:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/mDubai_PROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/http { }
        /Common/mDubai_PROD_ssl {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/mDubai_PROD_SSL_Base
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/mPayPROD_80_vs {
    destination /Common/10.21.13.39:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/mPayPROD_80_Pool_Select
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/mPayPROD_vs {
    destination /Common/10.21.13.39:443
    ip-protocol tcp
    mask 255.255.255.255
    persist {
        /Common/mPayPROD_cookie {
            default yes
        }
    }
    profiles {
        /Common/mPayPROD_http { }
        /Common/mPay_Prod_ssl {
            context clientside
        }
        /Common/serverssl {
            context serverside
        }
        /Common/stream { }
        /Common/tcp { }
    }
    rules {
        /Common/mPayPROD_Global_Variables
        /Common/mPayPROD_Maintenance
        /Common/mPayPROD_Pool_Select
        /Common/mPayPROD_Pool_SSL_Disable
        /Common/mPayPROD_Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/remedy-sdapp3-vs {
    destination /Common/10.21.13.12:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Remedy-sdapp3-Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/remedy-sdapp4-8181-vs {
    destination /Common/10.21.13.13:8181
    ip-protocol tcp
    mask 255.255.255.255
    pool /Common/remedy-sdapp4-8181
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/vlan_13
    }
    vlans-enabled
}
ltm virtual /Common/remedy-sdapp4-HTTP-vs {
    destination /Common/10.21.13.13:80
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/tcp { }
    }
    rules {
        /Common/Remedy-sdapp4-HTTP-Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/remedy-sdapp4-vs {
    destination /Common/10.21.13.13:443
    ip-protocol tcp
    mask 255.255.255.255
    profiles {
        /Common/http { }
        /Common/msd_remedy {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/Remedy-sdapp4-Rewrite
        /Common/SIEM_Splunk_HTTP
    }
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual-address /Common/10.21.11.99 {
    address 10.21.11.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.6 {
    address 10.21.13.6
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.11 {
    address 10.21.13.11
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.12 {
    address 10.21.13.12
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.13 {
    address 10.21.13.13
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.14 {
    address 10.21.13.14
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.15 {
    address 10.21.13.15
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.16 {
    address 10.21.13.16
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.17 {
    address 10.21.13.17
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.18 {
    address 10.21.13.18
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.19 {
    address 10.21.13.19
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.20 {
    address 10.21.13.20
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.21 {
    address 10.21.13.21
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.22 {
    address 10.21.13.22
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.23 {
    address 10.21.13.23
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.24 {
    address 10.21.13.24
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.25 {
    address 10.21.13.25
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.26 {
    address 10.21.13.26
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.27 {
    address 10.21.13.27
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.28 {
    address 10.21.13.28
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.29 {
    address 10.21.13.29
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.30 {
    address 10.21.13.30
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.31 {
    address 10.21.13.31
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.32 {
    address 10.21.13.32
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.33 {
    address 10.21.13.33
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.34 {
    address 10.21.13.34
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.35 {
    address 10.21.13.35
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.36 {
    address 10.21.13.36
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.37 {
    address 10.21.13.37
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.38 {
    address 10.21.13.38
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.39 {
    address 10.21.13.39
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.40 {
    address 10.21.13.40
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.41 {
    address 10.21.13.41
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.42 {
    address 10.21.13.42
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.43 {
    address 10.21.13.43
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.44 {
    address 10.21.13.44
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.45 {
    address 10.21.13.45
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.46 {
    address 10.21.13.46
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.47 {
    address 10.21.13.47
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.48 {
    address 10.21.13.48
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.49 {
    address 10.21.13.49
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.50 {
    address 10.21.13.50
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.51 {
    address 10.21.13.51
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.52 {
    address 10.21.13.52
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.54 {
    address 10.21.13.54
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.55 {
    address 10.21.13.55
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.56 {
    address 10.21.13.56
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.57 {
    address 10.21.13.57
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.58 {
    address 10.21.13.58
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.59 {
    address 10.21.13.59
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.60 {
    address 10.21.13.60
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.61 {
    address 10.21.13.61
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.62 {
    address 10.21.13.62
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.63 {
    address 10.21.13.63
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.69 {
    address 10.21.13.69
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.70 {
    address 10.21.13.70
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.71 {
    address 10.21.13.71
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.72 {
    address 10.21.13.72
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.121 {
    address 10.21.13.121
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.130 {
    address 10.21.13.130
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.161 {
    address 10.21.13.161
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.165 {
    address 10.21.13.165
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.166 {
    address 10.21.13.166
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.167 {
    address 10.21.13.167
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.180 {
    address 10.21.13.180
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.181 {
    address 10.21.13.181
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.182 {
    address 10.21.13.182
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.183 {
    address 10.21.13.183
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.184 {
    address 10.21.13.184
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.185 {
    address 10.21.13.185
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.186 {
    address 10.21.13.186
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.187 {
    address 10.21.13.187
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.188 {
    address 10.21.13.188
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.21.13.189 {
    address 10.21.13.189
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.1.94 {
    address 10.22.1.94
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.1.97 {
    address 10.22.1.97
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.1.99 {
    address 10.22.1.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.1.100 {
    address 10.22.1.100
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.5.98 {
    address 10.22.5.98
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.5.99 {
    address 10.22.5.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.22.65.99 {
    address 10.22.65.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.11.52 {
    address 10.23.11.52
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.12.201 {
    address 10.23.12.201
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.12.202 {
    address 10.23.12.202
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.20.131 {
    address 10.23.20.131
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.20.132 {
    address 10.23.20.132
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.20.133 {
    address 10.23.20.133
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.72.97 {
    address 10.23.72.97
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.72.98 {
    address 10.23.72.98
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.23.72.99 {
    address 10.23.72.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.25.1.99 {
    address 10.25.1.99
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.100.100.191 {
    address 10.100.100.191
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-local-only
}
ltm virtual-address /Common/192.168.3.32 {
    address 192.168.3.32
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/192.168.6.11 {
    address 192.168.6.11
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/192.168.6.12 {
    address 192.168.6.12
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/213.42.48.6 {
    address 213.42.48.6
    arp enabled
    icmp-echo enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm data-group internal /Common/ACL_EDCP_PROD_SSO_Enable {
    records {
        213.42.49.10/32 { }
        213.42.49.149/32 { }
        213.42.50.10/32 { }
        213.42.50.74/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.51.72/32 { }
        213.42.51.99/32 { }
        213.42.51.141/32 { }
        213.42.52.74/32 { }
        213.42.52.138/32 { }
        213.42.52.144/32 { }
        213.42.53.10/32 { }
        213.42.53.42/32 { }
        213.42.53.47/32 { }
        213.42.53.73/32 { }
        213.42.53.138/32 { }
        213.42.54.40/32 { }
        213.42.54.55/32 { }
        213.42.54.56/32 { }
        213.42.54.62/32 { }
        213.42.54.193/32 { }
        213.42.54.214/32 { }
        213.42.55.34/32 { }
        213.42.55.56/32 { }
        213.42.55.97/32 { }
        213.42.55.99/32 { }
        213.42.84.8/32 { }
        213.42.84.25/32 { }
        213.42.84.40/32 { }
        213.42.84.41/32 { }
        213.42.84.43/32 { }
        213.42.84.58/32 { }
        213.42.84.72/32 { }
        213.42.84.136/32 { }
        213.42.87.200/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_GRP_PROD_DMZ_IPs {
    records {
        213.42.54.62/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_GRP_PROD_SSO_Enable {
    records {
        213.42.49.10/32 { }
        213.42.49.149/32 { }
        213.42.49.200/32 { }
        213.42.50.10/32 { }
        213.42.50.74/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.51.72/32 { }
        213.42.51.99/32 { }
        213.42.51.141/32 { }
        213.42.52.74/32 { }
        213.42.52.138/32 { }
        213.42.52.144/32 { }
        213.42.53.10/32 { }
        213.42.53.42/32 { }
        213.42.53.47/32 { }
        213.42.53.73/32 { }
        213.42.53.138/32 { }
        213.42.54.40/32 { }
        213.42.54.56/32 { }
        213.42.54.214/32 { }
        213.42.55.34/32 { }
        213.42.55.56/32 { }
        213.42.55.97/32 { }
        213.42.55.99/32 { }
        213.42.84.8/32 { }
        213.42.84.25/32 { }
        213.42.84.40/32 { }
        213.42.84.41/32 { }
        213.42.84.43/32 { }
        213.42.84.58/32 { }
        213.42.84.72/32 { }
        213.42.84.136/32 { }
        213.42.87.200/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_GTest_PROD_GIN_Supernet {
    records {
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_GTest_PROD_Maint_Exempt {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_MS_GRP_PROD_GIN_Supernet {
    records {
        172.16.200.0/28 { }
        185.78.244.246/32 { }
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_MS_GRP_PROD_HTTP_to_HTTPS {
    records {
        0.0.0.0 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_MS_GRP_PROD_Maint_Exempt {
    records {
        213.42.48.184/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
        213.42.87.15/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_PROD_SSO_Enable {
    records {
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_Remedy_PROD_HTTP_to_HTTPS {
    records {
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SDESK_PROD_SSO_Enable {
    records {
        213.42.49.10/32 { }
        213.42.49.149/32 { }
        213.42.50.10/32 { }
        213.42.50.74/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.51.72/32 { }
        213.42.51.99/32 { }
        213.42.51.141/32 { }
        213.42.52.74/32 { }
        213.42.52.138/32 { }
        213.42.52.144/32 { }
        213.42.53.10/32 { }
        213.42.53.42/32 { }
        213.42.53.47/32 { }
        213.42.53.73/32 { }
        213.42.53.138/32 { }
        213.42.54.40/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
        213.42.54.214/32 { }
        213.42.54.249/32 { }
        213.42.55.34/32 { }
        213.42.55.56/32 { }
        213.42.55.97/32 { }
        213.42.55.99/32 { }
        213.42.84.8/32 { }
        213.42.84.25/32 { }
        213.42.84.40/32 { }
        213.42.84.41/32 { }
        213.42.84.43/32 { }
        213.42.84.58/32 { }
        213.42.84.62/32 { }
        213.42.84.72/32 { }
        213.42.84.136/32 { }
        213.42.87.200/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_DEMO_ADFS_GINTest {
    records {
        213.42.48.182/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_DEMO_ADFS_HHRC {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_ADFS_DSG {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.97/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_ADFS_GINMGT {
    records {
        213.42.48.180/32 { }
        213.42.50.172/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_ADFS_GINTest {
    records {
        213.42.48.182/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_ADFS_HHRC {
    records {
        213.42.50.170/32 { }
        213.42.50.180/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_DSG {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_SSO_PROD_GINSupernet {
    records {
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_ShPnt_PROD_SSO_Enable {
    records {
        0.0.0.0 { }
        213.42.49.149/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.55/32 { }
        213.42.54.56/32 { }
        213.42.54.62/32 { }
        213.42.54.193/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_grpdemoDmz {
    records {
        213.42.48.182/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_grpdemoDmz_Test {
    records {
        213.42.54.55/32 { }
        213.42.54.62/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACL_wMail_PROD_SSO_Enable {
    records {
        213.42.49.10/32 { }
        213.42.49.149/32 { }
        213.42.50.10/32 { }
        213.42.50.74/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.51.72/32 { }
        213.42.51.99/32 { }
        213.42.51.141/32 { }
        213.42.52.74/32 { }
        213.42.52.138/32 { }
        213.42.52.144/32 { }
        213.42.53.10/32 { }
        213.42.53.42/32 { }
        213.42.53.47/32 { }
        213.42.53.73/32 { }
        213.42.53.138/32 { }
        213.42.54.40/32 { }
        213.42.54.55/32 { }
        213.42.54.56/32 { }
        213.42.54.62/32 { }
        213.42.54.202/32 { }
        213.42.54.214/32 { }
        213.42.55.34/32 { }
        213.42.55.56/32 { }
        213.42.55.97/32 { }
        213.42.55.99/32 { }
        213.42.84.8/32 { }
        213.42.84.25/32 { }
        213.42.84.40/32 { }
        213.42.84.41/32 { }
        213.42.84.43/32 { }
        213.42.84.58/32 { }
        213.42.84.72/32 { }
        213.42.84.136/32 { }
        213.42.87.200/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpcrpa {
    records {
        213.42.48.160/27 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.50.186/32 { }
        213.42.54.49/32 { }
        213.42.54.50/32 { }
        213.42.54.54/32 { }
        213.42.54.249/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpdemo {
    records {
        213.42.48.180/32 { }
        213.42.48.181/32 { }
        213.42.48.184/32 { }
        213.42.48.186/32 { }
        213.42.49.10/32 { }
        213.42.49.149/32 { }
        213.42.50.10/32 { }
        213.42.50.74/32 { }
        213.42.50.106/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.50.186/32 { }
        213.42.51.67/32 { }
        213.42.51.99/32 { }
        213.42.51.141/32 { }
        213.42.52.42/32 { }
        213.42.52.74/32 { }
        213.42.52.138/32 { }
        213.42.52.140/32 { }
        213.42.53.9/32 { }
        213.42.53.10/32 { }
        213.42.53.47/32 { }
        213.42.53.73/32 { }
        213.42.53.138/32 { }
        213.42.54.40/32 { }
        213.42.54.54/32 { }
        213.42.55.56/32 { }
        213.42.55.99/32 { }
        213.42.84.8/32 { }
        213.42.84.40/32 { }
        213.42.84.58/32 { }
        213.42.84.72/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpdev {
    records {
        213.42.48.180/32 { }
        213.42.48.182/32 { }
        213.42.48.186/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpdsgn {
    records {
        213.42.48.182/32 { }
        213.42.48.186/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.54/32 { }
        213.42.55.99/32 { }
        213.42.85.61/32 { }
        213.42.85.62/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpproj {
    records {
        213.42.48.160/27 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpsite {
    records {
        0.0.0.0 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.54/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpstar {
    records {
        213.42.48.182/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrptrng {
    records {
        213.42.48.182/32 { }
        213.42.50.106/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.52.140/32 { }
        213.42.53.42/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ACLgrpuat {
    records {
        185.78.244.246/32 { }
        213.42.48.0/21 { }
        213.42.48.160/27 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.54/32 { }
        213.42.55.99/32 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/ARP_PRD_APP_Src {
    records {
        213.42.48.180/32 { }
        213.42.48.182/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.54/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
        213.42.54.201/32 { }
        213.42.55.99/32 { }
        213.42.87.15/32 { }
        213.42.87.29/32 { }
    }
    type ip
}
ltm data-group internal /Common/DSG_Intranet_ACL {
    records {
        213.42.48.160/27 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.193/32 { }
        213.42.55.99/32 { }
        213.42.87.9/32 { }
    }
    type ip
}
ltm data-group internal /Common/EDCP_PROD_Allowed_IPs {
    records {
        91.235.159.0/24 { }
        94.200.218.192/29 { }
        213.42.48.0/21 { }
        213.42.53.42/32 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
        213.42.87.9/32 { }
    }
    type ip
}
ltm data-group internal /Common/EDCP_PROD_Maint_BypassIPs {
    records {
        213.42.48.180/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/Exch2016_GIN {
    records {
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/GIN_Range {
    records {
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/GINsubnets {
    records {
        213.42.48.0/21 { }
        213.42.56.0/25 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/GRP_NonPROD_Maintenance_Exempt {
    records {
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/GRPdb2web {
    records {
        10.21.22.0/24 { }
    }
    type ip
}
ltm data-group internal /Common/GRPrewritegrp {
    records {
        grp.dubai.gov.ae/ {
            data pweb.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpReply {
    records {
        \\\"9005\\\" {
            data \\\"65005\\\"
        }
        \\\"dapp\\\" {
            data \\\"grpdsgnapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpcrpa {
    records {
        grpcrpa.dubai.gov.ae/ {
            data rweb.dubai.gov.ae:8035/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpcrpaReply {
    records {
        \\\"9035\\\" {
            data \\\"65035\\\"
        }
        \\\"rapp\\\" {
            data \\\"grpcrpaapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpdemo {
    records {
        grpdemo.dubai.gov.ae/ {
            data rweb.dubai.gov.ae:8001/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpdemoReply {
    records {
        \\\"9001\\\" {
            data \\\"65001\\\"
        }
        \\\"rapp\\\" {
            data \\\"grpdemoapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpdsgn {
    records {
        grpdsgn.dubai.gov.ae/ {
            data dweb.dubai.gov.ae:8005/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpdsgnReply {
    records {
        \\\"9005\\\" {
            data \\\"65005\\\"
        }
        \\\"dapp\\\" {
            data \\\"grpdsgnapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpsite {
    records {
        grpsite.dubai.gov.ae/ {
            data dweb.dubai.gov.ae:8022/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpsiteReply {
    records {
        \\\"9022\\\" {
            data \\\"65022\\\"
        }
        \\\"dapp\\\" {
            data \\\"grpsiteapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrptrng {
    records {
        grptrng.dubai.gov.ae/ {
            data rweb.dubai.gov.ae:8040/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrptrngReply {
    records {
        \\\"9040\\\" {
            data \\\"65040\\\"
        }
        \\\"rapp\\\" {
            data \\\"grptrngapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpuat {
    records {
        grpuat.dubai.gov.ae/ {
            data rweb.dubai.gov.ae:8030/
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewritegrpuatReply {
    records {
        \\\"9030\\\" {
            data \\\"65030\\\"
        }
        \\\"rapp\\\" {
            data \\\"grpuatapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/GRPrewriteservices {
    records {
        grp.dubai.gov.ae/ {
            data services.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/HHRC_Public_IPs {
    records {
        0.0.0.0 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
        213.42.54.193/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/IDS_PROD_Maint_BypassIPs {
    records {
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
        213.42.56.171/32 { }
    }
    type ip
}
ltm data-group internal /Common/JIRA_PROD_Allowed_IPs {
    records {
        185.78.244.0/24 { }
        185.78.245.0/24 { }
        185.78.246.0/24 { }
        185.78.247.0/24 { }
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/PRODeJobRedirect {
    records {
        /AMAF { }
        /CDA { }
        /DAC { }
        /DCAA { }
        /DCAS { }
        /DCD { }
        /DED { }
        /DEG { }
        /DGDCD { }
        /DGHR { }
        /DGMO { }
        /DIA { }
        /DLD { }
        /DMD { }
        /DOF { }
        /DPP { }
        /DSC { }
        /DTCM { }
        /DWE { }
        /DWG { }
        /FAD { }
        /HA { }
        /KHDA { }
        /MRHE { }
        /NEDAA { }
        /RTA { }
        /SLC { }
        /TEC { }
    }
    type string
}
ltm data-group internal /Common/ProxyPassHTTPS_grp_vs {
    records {
        grp.dubai.gov.ae/ {
            data pweb.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/ProxyPassHTTPS_grp_vsReply {
    records {
        \\\"9050\\\" {
            data \\\"80\\\"
        }
        \\\"papp\\\" {
            data \\\"grpapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/ProxyPassgrp_vs {
    records {
        grp.dubai.gov.ae/ {
            data pweb.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/ProxyPassgrp_vsReply {
    records {
        \\\"9050\\\" {
            data \\\"80\\\"
        }
        \\\"papp\\\" {
            data \\\"grpapp\\\"
        }
    }
    type string
}
ltm data-group internal /Common/RemedyPROD_Maint_Bypass {
    records {
        213.42.48.182/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/SSO_PROD_ShPnt_MP_BypassIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/SSO_PROD_wMail_Maint_BypassIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/STS_PROD_HHRC_IPs {
    records {
        185.78.244.246/32 { }
        213.42.50.170/32 { }
        213.42.50.172/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
        213.42.54.55/32 { }
        213.42.54.62/32 { }
        213.42.55.99/32 { }
        213.42.85.23/32 { }
        213.42.85.24/32 { }
    }
    type ip
}
ltm data-group internal /Common/eCom_eSug_Admin_Src {
    records {
        2.50.55.235/32 { }
        87.201.216.48/29 { }
        91.73.239.17/32 { }
        91.74.160.192/29 { }
        91.235.159.22/32 { }
        94.200.85.176/29 { }
        94.200.218.194/32 { }
        151.253.66.243/32 { }
        185.78.244.0/22 { }
        194.170.213.21/32 { }
        194.170.213.22/32 { }
        194.170.213.99/32 { }
        194.170.214.17/32 { }
        213.42.25.142/32 { }
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.64.58/32 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/ePayAdmin_Allowed_IPs {
    records {
        213.42.48.180/32 { }
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ePayPROD_Maint_Bypass {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ePayPROD_Recon_SrcIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ePayPROD_TestAuth_SrcIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ePayPROD_ePayURI_SrcIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/ePayPROD_processRequestAPI {
    records {
        5.32.54.207/32 { }
        10.23.72.22/32 { }
        10.23.72.23/32 { }
        41.196.200.70/32 { }
        52.7.66.12/32 { }
        77.72.6.66/32 { }
        78.47.4.254/32 { }
        80.227.48.31/32 { }
        80.227.168.98/32 { }
        86.96.197.246/32 { }
        87.200.2.20/32 { }
        91.72.219.81/32 { }
        91.72.219.181/32 { }
        91.73.236.133/32 { }
        91.235.159.22/32 { }
        94.200.87.240/32 { }
        94.206.36.219/32 { }
        162.13.166.187/32 { }
        191.238.144.159/32 { }
        192.252.214.167/32 { }
        195.154.45.109/32 { }
        195.229.233.189/32 { }
        199.10.29.186/32 { }
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/eServPROD_GSB_DLD_RERASrc {
    records {
        94.56.46.46/32 { }
        213.42.51.243/32 { }
    }
    type ip
}
ltm data-group internal /Common/eServPROD_GSB_GRPSrc {
    records {
        185.78.244.246/32 { }
        213.42.48.0/21 { }
        213.42.56.0/24 { }
        213.42.84.0/22 { }
    }
    type ip
}
ltm data-group internal /Common/eServPROD_GSB_TLSrc {
    records {
        213.42.48.50/32 { }
        213.42.53.138/32 { }
        213.42.53.147/32 { }
    }
    type ip
}
ltm data-group internal /Common/eServ_PROD_Maint_BypassIPs {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/grpNonPROD_http_to_https_migration {
    records {
        0.0.0.0 { }
        213.42.48.182/32 { }
    }
    type ip
}
ltm data-group internal /Common/grpPROD_Maintenance_Exempt {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/grpPROD_http_to_https_migration {
    records {
        172.16.3.12/32 { }
        213.42.50.170/32 { }
        213.42.50.180/32 { }
        213.42.50.181/32 { }
    }
    type ip
}
ltm data-group internal /Common/grp_departmentMigration {
    records {
        172.16.3.12/32 { }
    }
    type ip
}
ltm data-group internal /Common/mPayPROD_Maint_Bypass {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/mPayPROD_mPayGateway_SrcIP {
    records {
        213.132.55.107/32 { }
        213.132.55.110/32 { }
    }
    type ip
}
ltm data-group internal /Common/maintenanceException {
    records {
        213.42.50.172/32 { }
        213.42.50.181/32 { }
        213.42.55.99/32 { }
    }
    type ip
}
ltm data-group internal /Common/rewriteExtentions {
    records {
        .htm { }
        .html { }
        .js { }
        .jsp { }
        Execute\? { }
        cgi\? { }
        launch\? { }
    }
    type string
}
ltm data-group internal /Common/servicesRedirect {
    records {
        ejob.ae {
            data /OA_HTML/IrcVisitor.jsp\?L=AR
        }
        irec.ae {
            data /OA_HTML/IrcVisitor.jsp\?L=AR
        }
        irecruitment.ae {
            data /OA_HTML/IrcVisitor.jsp\?L=AR
        }
    }
    type string
}
ltm data-group internal /Common/servicesRewriteejob {
    records {
        ejob.ae/ {
            data services.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/servicesRewriteejobReply {
    type string
}
ltm data-group internal /Common/servicesRewriteirec {
    records {
        irec.ae/ {
            data services.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/servicesRewriteirecReply {
    type string
}
ltm data-group internal /Common/servicesRewriteirecruitment {
    records {
        irecruitment.ae/ {
            data services.dubai.gov.ae:8050/
        }
    }
    type string
}
ltm data-group internal /Common/servicesRewriteirecruitmentReply {
    type string
}
ltm monitor gateway-icmp /Common/SwitchGatewayHC {
    adaptive disabled
    defaults-from /Common/gateway_icmp
    destination 10.20.1.200:*
    interval 5
    time-until-up 0
    timeout 16
}
ltm monitor http /Common/HMC_NET_HTTP_Probe {
    adaptive disabled
    defaults-from /Common/http
    destination *:*
    interval 60
    ip-dscp 0
    recv none
    recv-disable none
    send "GET /apphealth.htm\\r\\n"
    time-until-up 0
    timeout 5
}
ltm monitor http /Common/customHTTPTRNG {
    adaptive disabled
    defaults-from /Common/http
    destination *:*
    interval 5
    ip-dscp 0
    recv none
    recv-disable none
    send "GET /\\r\\n"
    time-until-up 0
    timeout 100
}
ltm monitor http /Common/maintenance_test {
    adaptive disabled
    defaults-from /Common/http
    destination *:*
    interval 30
    ip-dscp 0
    recv none
    recv-disable none
    send "GET /sites/maintenance/maintenance.aspx\\r\\nHost: deg.gov.ae\\r\\n"
    time-until-up 0
    timeout 16
}
ltm monitor http /Common/testm {
    adaptive disabled
    defaults-from /Common/http
    destination *:*
    interval 5
    ip-dscp 0
    recv none
    recv-disable none
    send "GET /sites/maintenance/maintenance.aspx HTTP/1.0\\r\\n\\r\\n"
    time-until-up 0
    timeout 16
}
ltm monitor https /Common/EXCH2016_ActiveSync {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 ActiveSync Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /microsoft-server-activesync/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_AutoDisc {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 Auto Discover Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /autodiscover/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_ECP {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 ECP Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /ecp/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_EWS {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 EWS"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /ews/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_MAPI {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 MAPI Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /mapi/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_OAB {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 OAB"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /oab/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_OWA {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 OWA Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /owa/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor https /Common/EXCH2016_RPC {
    adaptive disabled
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    defaults-from /Common/https
    description "EXCH2016 RPC Monitor"
    destination *:*
    interval 10
    ip-dscp 0
    recv "200 OK"
    recv-disable none
    send "GET /rpc/healthcheck.htm HTTP/1.1\r\nHost: mail.dubai.gov.ae\r\nConnection: Close\r\n\r\n"
    time-until-up 0
    timeout 31
}
ltm monitor icmp /Common/SS_FE_FW_ICMP {
    adaptive disabled
    defaults-from /Common/icmp
    interval 3
    time-until-up 0
    timeout 10
}
ltm monitor tcp /Common/EXCH2016_tcp_monitor {
    adaptive disabled
    defaults-from /Common/tcp
    description "EXCH2016 TCP Monitor interval 30 timeout 91"
    destination *:*
    interval 5
    ip-dscp 0
    recv none
    recv-disable none
    send none
    time-until-up 0
    timeout 16
}
ltm monitor tcp /Common/GINPPSTCP {
    adaptive disabled
    defaults-from /Common/tcp
    destination *:*
    interval 5
    ip-dscp 0
    recv none
    recv-disable none
    send none
    time-until-up 0
    timeout 16
}
ltm persistence cookie /Common/API_PROD_cookie {
    app-service none
    cookie-name API_PROD
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ARP_PRD_cookie {
    app-service none
    cookie-encryption disabled
    cookie-name ARP_PRD
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/BI_PROD_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$C2$XU+OBJtZgUCR1IyZnxXAdQ==
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/Cookie_Testing {
    app-service none
    cookie-name STY1
    defaults-from /Common/cookie
    method insert
}
ltm persistence cookie /Common/DockerPoc_QA_cookie {
    app-service none
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/Dubainow_PRD_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$71$u6sUZWiVcXymJ+ckzdTIrQ==
    defaults-from /Common/cookie
    expiration 0
    method insert
    timeout 180
}
ltm persistence cookie /Common/EDCP_PROD_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/EDCP_QA_vs_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$1j$dByA3Y1Zt94/k3HIKuAzvg==
    defaults-from /Common/cookie
    expiration 0
    method insert
    timeout 0
}
ltm persistence cookie /Common/HMC_NET_PROD_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$uV$vH2j7CnjbNEbKwZCAACtDg==
    cookie-name HMC_NET_PROD
    defaults-from /Common/cookie
    expiration 0
    timeout 180
}
ltm persistence cookie /Common/HMC_NET_QA_cookie {
    app-service none
    cookie-name HMC_NET_QA
    defaults-from /Common/cookie
    method insert
    timeout 180
}
ltm persistence cookie /Common/HMC_PROD_vs_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$0G$twcrRvrpX3P0aq0TbC5RPQ==
    defaults-from /Common/cookie
    expiration 0
    method insert
}
ltm persistence cookie /Common/Hyperion-INT-Cookie {
    app-service none
    cookie-name HYP-INT
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/Hyperion-PRD-Cookie {
    app-service none
    cookie-name HYP-PRD
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/IDS_PROD_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/LAD_PROD_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$br$fUGKMqraKrlaZZ4qChxBug==
    defaults-from /Common/cookie
    expiration 0
    method insert
    timeout 0
}
ltm persistence cookie /Common/REMEDY_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_DEMO_vs1_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$Li$5bEI49w7eILWmGu+peXKNbDuC5YaLpvBrJznmbipXxE=
    defaults-from /Common/cookie
    expiration 0
    override-connection-limit enabled
    timeout 0
}
ltm persistence cookie /Common/SSO_DEMO_vs2_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_DEMO_vs3_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_GRP_vs_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$OC$IdAO6h7vMFumXHxE27x1S7lowwkC6ZLlhlcWhBvuU4o=
    defaults-from /Common/cookie
    expiration 0
    method insert
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_Gess_Sync_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_Gtest_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_ShPnt_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_eComp_eSugg_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_ePay_mPay_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_sDesk_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_vs1_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$Ek$XYDhAEaipwYcYKdAiCUA2o8B74rnZ9rnKkukRprOe3o=
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_vs2_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/SSO_PROD_wMail_vs_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/STS_PRD_SSL_cookie {
    app-service none
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ShPnt2010_PROD_cookie {
    app-service none
    cookie-name ShPnt_PROD1
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ShPnt2013_PROD_Cookie {
    app-service none
    cookie-name ShPnt_PROD3
    defaults-from /Common/cookie
    method insert
    timeout 180
}
ltm persistence cookie /Common/ShPnt2013_SSL_Cookie {
    app-service none
    cookie-name ShPnt_SSL3
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ShPnt_Admins_cookie {
    app-service none
    cookie-name ShPnt_Admins
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ShPnt_PROD_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$kC$bI3MnuSPx7/Qt0ngAWfNTA==
    defaults-from /Common/cookie
    expiration 0
    method insert
    timeout 0
}
ltm persistence cookie /Common/ShPnt_QA_cookie {
    app-service none
    cookie-encryption preferred
    cookie-encryption-passphrase $M$IQ$C6Fz4PGhORPKOHyA4XFgQ48B74rnZ9rnKkukRprOe3o=
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/Twig_PROD_QA_cookie {
    app-service none
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/Watson_Prod_Cookie {
    app-service none
    cookie-name Watson_PROD
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/ePayPROD_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/eServicesPROD_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/ginnpm_persist_profile {
    app-service none
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/grpNonPROD_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/grpPROD_65000_cookie {
    app-service none
    cookie-name grpPROD_Discoverer
    defaults-from /Common/cookie
    method insert
    timeout 0
}
ltm persistence cookie /Common/grpSERV_cookie {
    app-service none
    cookie-name grpServices
    defaults-from /Common/cookie
    method insert
    timeout 0
}
ltm persistence cookie /Common/grp_nonprop_cookie_test {
    app-service none
    cookie-name STY
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/grp_test_cookie {
    app-service none
    cookie-name GRP_Test
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence cookie /Common/mDubai_PROD_cookie {
    app-service none
    cookie-name mDubai_PROD
    defaults-from /Common/cookie
}
ltm persistence cookie /Common/mPayPROD_cookie {
    app-service none
    defaults-from /Common/cookie
    timeout 0
}
ltm persistence source-addr /Common/Exch_SrcIP {
    app-service none
    defaults-from /Common/source_addr
    mask 255.255.255.255
    timeout 7200
}
ltm persistence source-addr /Common/grp_Src_FallBk {
    app-service none
    defaults-from /Common/source_addr
    mask 255.255.255.255
}
ltm persistence ssl /Common/Exch_Outlook_SSLID {
    app-service none
    defaults-from /Common/ssl
}
ltm profile analytics /Common/EDCP_PROD_SSL {
    app-service none
    collect-methods enabled
    collect-page-load-time enabled
    collect-response-codes enabled
    collect-url enabled
    defaults-from /Common/analytics
    description none
    notification-email-addresses none
    traffic-capture {
        capturing-for-EDCP_PROD_SSL { }
    }
}
ltm profile analytics /Common/HMC_NET_PROD {
    app-service none
    collect-ip enabled
    collect-methods enabled
    collect-response-codes disabled
    collect-url enabled
    collect-user-agent enabled
    collect-user-sessions enabled
    defaults-from /Common/analytics
    description none
    notification-email-addresses none
    traffic-capture {
        capturing-for- { }
    }
}
ltm profile analytics /Common/ShPnt_PROD_80 {
    app-service none
    collect-ip enabled
    collect-methods enabled
    collect-response-codes disabled
    collect-url enabled
    collect-user-agent enabled
    collect-user-sessions enabled
    defaults-from /Common/analytics
    description none
    notification-email-addresses none
    traffic-capture {
        capturing-for-ShPnt_PROD_80 { }
    }
}
ltm profile client-ssl /Common/API_MGR_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/API_PROD_ssl {
    app-service none
    cert /Common/api.dubai.gov.ae_2018.crt
    cert-key-chain {
        api.dubai.gov.ae_2018 {
            cert /Common/api.dubai.gov.ae_2018.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/api.dubai.gov.ae_2018.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/api.dubai.gov.ae_2018.key
    passphrase none
}
ltm profile client-ssl /Common/ARP_PRD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    mode enabled
    passphrase none
}
ltm profile client-ssl /Common/ARP_UAT_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Admin_Dubaicareers_PRD_SNI_SSL {
    app-service none
    cert /Common/Admin_DubaiCareers_ae.crt
    cert-key-chain {
        Admin_DubaiCareers_ae_DigiCertCA_SHA2 {
            cert /Common/Admin_DubaiCareers_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/Admin_DubaiCareers_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/Admin_DubaiCareers_ae.key
    passphrase none
    server-name admin.dubaicareers.ae
}
ltm profile client-ssl /Common/BAM_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/BI_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/BI_STAG_vs_ssl {
    app-service none
    ca-file /Common/DeG_CA.crt
    cert /Common/WC_dubai.gov.ae_QA_DEV_2017.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_QA_DEV_2017.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_QA_DEV_2017.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_QA_DEV_2017.key
    passphrase none
}
ltm profile client-ssl /Common/Cloud_NET_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Coesys_PRD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Confl_QA_STG_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Dashboard_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/DubaiID_PRD_SNI_SSL {
    app-service none
    cert /Common/DubaiID_ae.crt
    cert-key-chain {
        DubaiID_ae_DigiCertCA_SHA2 {
            cert /Common/DubaiID_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/DubaiID_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/DubaiID_ae.key
    passphrase none
    server-name dubaiid.ae
}
ltm profile client-ssl /Common/DubaiID_www_PRD_SNI_SSL {
    app-service none
    cert /Common/DubaiID_ae.crt
    cert-key-chain {
        DubaiID_ae_DigiCertCA_SHA2 {
            cert /Common/DubaiID_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/DubaiID_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/DubaiID_ae.key
    mode enabled
    passphrase none
    server-name www.dubaiid.ae
}
ltm profile client-ssl /Common/Dubaicareers_PRD_SNI_SSL {
    app-service none
    cert /Common/DubaiCareers_ae.crt
    cert-key-chain {
        DubaiCareers_ae_DigiCertCA_SHA2 {
            cert /Common/DubaiCareers_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/DubaiCareers_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/DubaiCareers_ae.key
    mode enabled
    passphrase none
    server-name dubaicareers.ae
}
ltm profile client-ssl /Common/Dubaicareers_PRD_SNI_www {
    app-service none
    cert /Common/DubaiCareers_ae.crt
    cert-key-chain {
        DubaiCareers_ae_DigiCertCA_SHA2 {
            cert /Common/DubaiCareers_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/DubaiCareers_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/DubaiCareers_ae.key
    mode enabled
    passphrase none
    server-name www.dubaicareers.ae
}
ltm profile client-ssl /Common/Dubainow_PRD_Parent_ssl {
    app-service none
    cert /Common/default.crt
    cert-key-chain {
        default {
            cert /Common/default.crt
            key /Common/default.key
        }
    }
    chain none
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain true
    key /Common/default.key
    passphrase none
}
ltm profile client-ssl /Common/Dubainow_PRD_dsg_ssl {
    app-service none
    cert /Common/WC_dsg.gov.ae.crt
    cert-key-chain {
        WC_dsg.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dsg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dsg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/WC_dsg.gov.ae.key
    mode enabled
    passphrase none
    server-name *.dsg.gov.ae
}
ltm profile client-ssl /Common/Dubainow_PRD_ssl {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/Dubainow_QA_ssl {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
}
ltm profile client-ssl /Common/Dubainowsvc_PROD_ssl {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
}
ltm profile client-ssl /Common/EDCP_PROD_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/EDCP_QA_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
    passphrase none
}
ltm profile client-ssl /Common/Email_Archive_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Exch2016_ssl_Services {
    alert-timeout 10
    allow-non-ssl disabled
    app-service none
    cache-size 262144
    cache-timeout 3600
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!RC4:!SSLv3
    defaults-from /Common/clientssl
    generic-alert enabled
    handshake-timeout 10
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    max-renegotiations-per-minute 5
    mod-ssl-methods disabled
    mode enabled
    options { dont-insert-empty-fragments }
    passphrase none
    peer-no-renegotiate-timeout 10
    proxy-ssl disabled
    proxy-ssl-passthrough disabled
    renegotiate-max-record-delay indefinite
    renegotiate-period indefinite
    renegotiate-size indefinite
    renegotiation enabled
    secure-renegotiation require
    server-name none
    session-mirroring disabled
    session-ticket disabled
    sni-default false
    sni-require false
    ssl-sign-hash any
    strict-resume disabled
    unclean-shutdown enabled
}
ltm profile client-ssl /Common/Exch_Outlook_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/FAD_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/HHRC-JIRA-PRD-ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/HMC_NET_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/HMC_NET_QA_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Hyperion-PRD-ssl {
    app-service none
    cert /Common/DSG_qa.dubai.gov.ae.crt
    cert-key-chain {
        ae {
            cert /Common/DSG_qa.dubai.gov.ae.crt
            chain /Common/DeG_CA.crt
            key /Common/DSG_qa.dubai.gov.ae.key
        }
    }
    chain /Common/DeG_CA.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/DSG_qa.dubai.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/IDS_PROD_2018 {
    app-service none
    cert /Common/ids.dubai.gov.ae_2018.crt
    cert-key-chain {
        ae_2018 {
            cert /Common/ids.dubai.gov.ae_2018.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/ids.dubai.gov.ae_2018.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/ids.dubai.gov.ae_2018.key
    passphrase none
}
ltm profile client-ssl /Common/IDS_PROD_2018_DEWA {
    app-service none
    cert /Common/ids.dubai.gov.ae_2018.crt
    cert-key-chain {
        ids.dubai.gov_DigiCertCA_SHA2 {
            cert /Common/ids.dubai.gov.ae_2018.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/ids.dubai.gov.ae_2018.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers NONE:AES128-SHA:RC4+RSA
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/ids.dubai.gov.ae_2018.key
    passphrase none
}
ltm profile client-ssl /Common/JIRA-CONF-DEV-ssl {
    app-service none
    cert /Common/WC_dsg.gov.ae.crt
    cert-key-chain {
        WC_dsg.gov.ae {
            cert /Common/WC_dsg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dsg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dsg.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/JIRA_CONF_PRD_SDP {
    app-service none
    cert /Common/WC_smartdubai.ae.crt
    cert-key-chain {
        WC_smartdubai_DigiCertCA_SHA2 {
            cert /Common/WC_smartdubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_smartdubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_smartdubai.ae.key
    passphrase none
    server-name *.smartdubai.ae
}
ltm profile client-ssl /Common/JIRA_STG_vs_ssl {
    app-service none
    cert /Common/WC_dsg.gov.ae.crt
    cert-key-chain {
        WC_dsg.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dsg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dsg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dsg.gov.ae.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/LAD_CMS_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_Legal_02May16.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_Legal_02May16.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_Legal_02May16.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_Legal_02May16.key
    passphrase none
}
ltm profile client-ssl /Common/MyID_PROD_EIDA_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/OEM-DSG-ssl {
    app-service none
    cert /Common/WC_dsg.gov.ae.crt
    cert-key-chain {
        WC_dsg.gov.ae {
            cert /Common/WC_dsg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dsg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dsg.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/PMO_Smartdubai_SNI {
    app-service none
    cert /Common/WC_smartdubai.ae.crt
    cert-key-chain {
        WC_smartdubai_DigiCertCA_SHA2 {
            cert /Common/WC_smartdubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_smartdubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/SSO_PROD_ShPnt_Parent
    inherit-certkeychain false
    key /Common/WC_smartdubai.ae.key
    passphrase none
    server-name *.smartdubai.ae
}
ltm profile client-ssl /Common/SRM_Vitrue_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_DEMO_vs1_ssl {
    app-service none
    ca-file /Common/DeG_CA.crt
    cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_DEMO_vs2_ssl {
    app-service none
    ca-file /Common/DeG_CA.crt
    cert /Common/DeG_dubaigov.ae_Cert.crt
    cert-key-chain {
        ae_Cert {
            cert /Common/DeG_dubaigov.ae_Cert.crt
            key /Common/DeG_dubaigov.ae_Cert.key
        }
    }
    chain none
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/DeG_dubaigov.ae_Cert.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_DEMO_vs3_ssl {
    app-service none
    ca-file /Common/DeG_CA.crt
    cert /Common/DeG_pilot.deg.ae_Cert.crt
    cert-key-chain {
        ae_Cert {
            cert /Common/DeG_pilot.deg.ae_Cert.crt
            key /Common/DeG_pilot.deg.ae_Cert.key
        }
    }
    chain none
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/DeG_pilot.deg.ae_Cert.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_GRP_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_Gess_Sync_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_Gtest_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_ShPnt_Parent {
    app-service none
    cert /Common/default.crt
    cert-key-chain {
        default {
            cert /Common/default.crt
            key /Common/default.key
        }
    }
    chain none
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain true
    key /Common/default.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_ShPnt_sdg {
    app-service none
    cert /Common/WC_sdg.gov.ae.crt
    cert-key-chain {
        WC_sdg.gov_DigiCertCA_SHA2 {
            cert /Common/WC_sdg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_sdg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/SSO_PROD_ShPnt_Parent
    inherit-certkeychain false
    key /Common/WC_sdg.gov.ae.key
    passphrase none
    server-name *.sdg.gov.ae
}
ltm profile client-ssl /Common/SSO_PROD_ShPnt_vs_ssl {
    app-service none
    cert /Common/Teams_SAN_18Jun17.crt
    cert-key-chain {
        Teams_SAN_18Jun17_DigiCertCA_SHA2 {
            cert /Common/Teams_SAN_18Jun17.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/Teams_SAN_18Jun17.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/SSO_PROD_ShPnt_Parent
    inherit-certkeychain false
    key /Common/Teams_SAN_18Jun17.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/SSO_PROD_eComp_eSugg_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_ePay_mPay_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_sDesk_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_vs1_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_vs2_ssl {
    app-service none
    ca-file /Common/DigiCertCA.crt
    cert /Common/SSOSPs_SAN_23Aug16.crt
    cert-key-chain {
        SSOSPs_SAN_23Aug16_DigiCertCA_SHA2 {
            cert /Common/SSOSPs_SAN_23Aug16.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/SSOSPs_SAN_23Aug16.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/SSOSPs_SAN_23Aug16.key
    passphrase none
}
ltm profile client-ssl /Common/SSO_PROD_wMail_vs_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt2010_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt2013_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt_Admins_ssl {
    app-service none
    cert /Common/ShPnt_Admins_cert.crt
    cert-key-chain {
        ShPnt_Admins_cert {
            cert /Common/ShPnt_Admins_cert.crt
            chain /Common/DeG_CA.crt
            key /Common/ShPnt_Admins_cert.key
        }
    }
    chain /Common/DeG_CA.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/ShPnt_Admins_cert.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt_Admins_ssl_SDG {
    app-service none
    cert /Common/SDG_Internal_Cert.crt
    cert-key-chain {
        SDG_Internal_Cert_SDG_CA {
            cert /Common/SDG_Internal_Cert.crt
            chain /Common/SDG_CA.crt
            key /Common/SDG_Internal_Cert.key
        }
    }
    chain /Common/SDG_CA.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/SDG_Internal_Cert.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt_PROD_ssl {
    app-service none
    cert /Common/Teams_SAN_18Jun17.crt
    cert-key-chain {
        Teams_SAN_18Jun17_DigiCertCA_SHA2 {
            cert /Common/Teams_SAN_18Jun17.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/Teams_SAN_18Jun17.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/Teams_SAN_18Jun17.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt_QA_DBXcustoms {
    app-service none
    cert /Common/WC_dubaicustoms.gov.ae.crt
    cert-key-chain {
        WC_dubaicustoms.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubaicustoms.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubaicustoms.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/ShPnt_QA_Parent
    inherit-certkeychain false
    key /Common/WC_dubaicustoms.gov.ae.key
    passphrase none
    server-name *.dxbcustoms.gov.ae
}
ltm profile client-ssl /Common/ShPnt_QA_Parent {
    app-service none
    cert /Common/default.crt
    cert-key-chain {
        default {
            cert /Common/default.crt
            key /Common/default.key
        }
    }
    chain none
    defaults-from /Common/clientssl
    inherit-certkeychain true
    key /Common/default.key
    passphrase none
}
ltm profile client-ssl /Common/ShPnt_QA_dubai_ae {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/ShPnt_QA_Parent
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
    server-name *.dubai.ae
}
ltm profile client-ssl /Common/ShPnt_QA_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/ShPnt_QA_Parent
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_QA_DEV_160816.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/Smart_Customer_ssl {
    app-service none
    cert /Common/WC_dsg.gov.ae.crt
    cert-key-chain {
        WC_dsg.gov.ae {
            cert /Common/WC_dsg.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dsg.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dsg.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/Sts-Internal_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Survey_PROD_vs_ssl {
    app-service none
    cert /Common/Teams_SAN_18Jun17.crt
    cert-key-chain {
        Teams_SAN_18Jun17_DigiCertCA_SHA2 {
            cert /Common/Teams_SAN_18Jun17.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/Teams_SAN_18Jun17.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/Teams_SAN_18Jun17.key
    passphrase none
}
ltm profile client-ssl /Common/Twig_PROD_QA_ssl {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
}
ltm profile client-ssl /Common/Veridoc-JBoss-PRD-ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov.ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/WatchDox_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/Watson_Prod_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
    sni-default true
}
ltm profile client-ssl /Common/clientssl {
    alert-timeout 10
    allow-non-ssl disabled
    app-service none
    authenticate once
    authenticate-depth 9
    ca-file none
    cache-size 262144
    cache-timeout 3600
    cert /Common/default.crt
    cert-extension-includes { basic-constraints subject-alternative-name }
    cert-key-chain {
        default {
            cert /Common/default.crt
            key /Common/default.key
        }
    }
    cert-lifespan 30
    cert-lookup-by-ipaddr-port disabled
    chain none
    ciphers DEFAULT:!RC4:!SSLv3
    client-cert-ca none
    crl-file none
    generic-alert enabled
    handshake-timeout 10
    inherit-certkeychain false
    key /Common/default.key
    max-renegotiations-per-minute 5
    mod-ssl-methods disabled
    mode enabled
    options { dont-insert-empty-fragments }
    passphrase none
    peer-cert-mode ignore
    peer-no-renegotiate-timeout 10
    proxy-ca-cert none
    proxy-ca-key none
    proxy-ssl disabled
    proxy-ssl-passthrough disabled
    renegotiate-max-record-delay indefinite
    renegotiate-period indefinite
    renegotiate-size indefinite
    renegotiation enabled
    retain-certificate true
    secure-renegotiation require
    server-name none
    session-mirroring disabled
    session-ticket disabled
    sni-default false
    sni-require false
    ssl-forward-proxy disabled
    ssl-forward-proxy-bypass disabled
    ssl-sign-hash any
    strict-resume disabled
    unclean-shutdown enabled
}
ltm profile client-ssl /Common/degrsa.dubai.gov.ae {
    app-service none
    cert /Common/dubai.gov.ae.crt
    cert-key-chain {
        ae {
            cert /Common/dubai.gov.ae.crt
            chain /Common/DigiCertCA.crt
            key /Common/dubai.gov.ae.key
        }
    }
    chain /Common/DigiCertCA.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/dubai.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/dubaicustoms {
    app-service none
    cert /Common/WC_dubaicustoms.gov.ae.crt
    cert-key-chain {
        WC_dubaicustoms.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubaicustoms.gov.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubaicustoms.gov.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubaicustoms.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/ejob_ae_SNI {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    mode enabled
    passphrase none
    server-name ejob.ae
}
ltm profile client-ssl /Common/ejob_dubai_gov_ae_SNI {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        WC_dubai.gov_DigiCertCA_SHA2 {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/Dubainow_PRD_Parent_ssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    mode enabled
    passphrase none
    server-name ejob.dubai.gov.ae
}
ltm profile client-ssl /Common/epay_prod {
    app-service none
    cert /Common/epayment_dubai_ae_2020.crt
    cert-key-chain {
        epayment_dubai_ae_2020_DigiCertCA_SHA2 {
            cert /Common/epayment_dubai_ae_2020.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/epayment_dubai_ae_2020.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/epayment_dubai_ae_2020.key
    passphrase none
}
ltm profile client-ssl /Common/eservices_prod {
    app-service none
    cert /Common/WC_Dubai.ae.crt
    cert-key-chain {
        WC_Dubai_DigiCertCA_SHA2 {
            cert /Common/WC_Dubai.ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_Dubai.ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_Dubai.ae.key
    passphrase none
}
ltm profile client-ssl /Common/grp_nonproduction {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/grp_production {
    app-service none
    cert /Common/dubai.gov.ae.crt
    cert-key-chain {
        ae {
            cert /Common/dubai.gov.ae.crt
            chain /Common/DigiCertCA.crt
            key /Common/dubai.gov.ae.key
        }
    }
    chain /Common/DigiCertCA.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/dubai.gov.ae.key
    passphrase none
}
ltm profile client-ssl /Common/gsb_prod {
    alert-timeout 60
    allow-non-ssl disabled
    app-service none
    ca-file none
    cache-size 262144
    cache-timeout 3600
    cert /Common/gsb.dubai.gov.ae_2018.crt
    cert-key-chain {
        gsb.dubai.gov.ae_2018 {
            cert /Common/gsb.dubai.gov.ae_2018.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/gsb.dubai.gov.ae_2018.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    handshake-timeout 60
    inherit-certkeychain false
    key /Common/gsb.dubai.gov.ae_2018.key
    mod-ssl-methods disabled
    passphrase none
    renegotiate-max-record-delay 10
    renegotiate-period indefinite
    renegotiate-size indefinite
    renegotiation disabled
    strict-resume disabled
    unclean-shutdown enabled
}
ltm profile client-ssl /Common/gsb_prod_2018 {
    app-service none
    cert /Common/gsb.dubai.gov.ae_2018.crt
    cert-key-chain {
        ae_2018 {
            cert /Common/gsb.dubai.gov.ae_2018.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/gsb.dubai.gov.ae_2018.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/gsb.dubai.gov.ae_2018.key
    passphrase none
}
ltm profile client-ssl /Common/mDubai_PROD_ssl {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/mPayPROD_2014-2017 {
    app-service none
    cert /Common/mpay.dubai.ae_NEW.crt
    cert-key-chain {
        mpay.dubai_DigiCertCA_SHA2 {
            cert /Common/mpay.dubai.ae_NEW.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/mpay.dubai.ae_NEW.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/mpay.dubai.ae_NEW.key
    passphrase none
}
ltm profile client-ssl /Common/mPay_Prod_ssl {
    app-service none
    cert /Common/mpay.dubai.ae_2020.crt
    cert-key-chain {
        mpay.dubai_DigiCertCA_SHA2 {
            cert /Common/mpay.dubai.ae_2020.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/mpay.dubai.ae_2020.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    ciphers DEFAULT:!SSLv3:!RC4:!MD5:!DES:!3DES
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/mpay.dubai.ae_2020.key
    passphrase none
}
ltm profile client-ssl /Common/msd_remedy {
    app-service none
    cert /Common/WC_dubai.gov.ae_GRP.crt
    cert-key-chain {
        ae_GRP {
            cert /Common/WC_dubai.gov.ae_GRP.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/WC_dubai.gov.ae_GRP.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/WC_dubai.gov.ae_GRP.key
    passphrase none
}
ltm profile client-ssl /Common/rashid_ae_SNI {
    app-service none
    cert /Common/rashid_ae.crt
    cert-key-chain {
        rashid_ae_DigiCertCA_SHA2 {
            cert /Common/rashid_ae.crt
            chain /Common/DigiCertCA_SHA2.crt
            key /Common/rashid_ae.key
        }
    }
    chain /Common/DigiCertCA_SHA2.crt
    defaults-from /Common/clientssl
    inherit-certkeychain false
    key /Common/rashid_ae.key
    passphrase none
    server-name rashid.ae
}
ltm profile http /Common/ARP_ADF_Http_Profile {
    app-service none
    defaults-from /Common/http
    header-insert "WL-Proxy-SSL: true"
    proxy-type reverse
    redirect-rewrite matching
}
ltm profile http /Common/ARP_PRD_HTTP {
    app-service none
    defaults-from /Common/http
    proxy-type reverse
    request-chunking selective
    response-chunking unchunk
}
ltm profile http /Common/Dubainow_PRD_http {
    app-service none
    defaults-from /Common/http
    encrypt-cookie-secret $M$QP$CLNsCFJaqdDraeyhDVrqC0zsLd+o33nr33O8CPFrt24=
    encrypt-cookies { DubaiNow_Portal DubaiNow_Dev DubaiNow_admin }
    proxy-type reverse
}
ltm profile http /Common/EDCP_QA_vs_http {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
}
ltm profile http /Common/SSO_DEMO_vs1_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/SSO_DEMO_vs2_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
}
ltm profile http /Common/SSO_DEMO_vs3_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/SSO_PROD_GRP_vs_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    redirect-rewrite matching
    response-chunking selective
}
ltm profile http /Common/SSO_PROD_Gtest_vs_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/SSO_PROD_ShPnt {
    app-service none
    defaults-from /Common/http
    header-insert "FRONT-END-HTTPS: On"
    proxy-type reverse
}
ltm profile http /Common/SSO_PROD_vs1_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/SSO_PROD_vs2_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/ShPnt_QA_SSL {
    app-service none
    defaults-from /Common/http
    encrypt-cookie-secret $M$W3$6nuwoqClPMUZFDv831nGlS27GFe4NfEBUDLMJO1rb48=
    encrypt-cookies { ShPnt_QA_DubaiNow }
    proxy-type reverse
}
ltm profile http /Common/SonarQA_http_Profile {
    app-service none
    defaults-from /Common/http
    header-insert "X_FORWARDED_PROTO: https"
    proxy-type reverse
}
ltm profile http /Common/ePayPROD_http {
    app-service none
    defaults-from /Common/http
    encrypt-cookie-secret $M$Zh$XKA0gy6hX2VGPAq8HfBrSQ==
    encrypt-cookies { ePayPROD ePayPROD_AuxPool ePayPROD_ActiveStandby ePayPROD_Ext_CS ePayPROD_Reports ePayPROD1 }
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
}
ltm profile http /Common/eServicePROD_http_to_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    redirect-rewrite all
}
ltm profile http /Common/f5_test1_http {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking unchunk
}
ltm profile http /Common/ginnpm_http_profile {
    app-service none
    defaults-from /Common/http-wan-optimized-compression
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
}
ltm profile http /Common/grp_prod_https {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/http {
    app-service none
    basic-auth-realm none
    encrypt-cookies none
    enforcement {
        max-header-count 64
        max-header-size 32768
        max-requests 0
        pipeline allow
        unknown-method allow
    }
    fallback-host none
    fallback-status-codes none
    header-erase none
    header-insert none
    insert-xforwarded-for enabled
    lws-separator none
    lws-width 80
    oneconnect-transformations enabled
    proxy-type reverse
    redirect-rewrite none
    request-chunking preserve
    response-chunking selective
    response-headers-permitted none
}
ltm profile http /Common/http-wan-optimized-compression {
    app-service none
    basic-auth-realm none
    defaults-from /Common/http
    encrypt-cookies none
    enforcement {
        max-header-size 32768
        max-requests 0
        pipeline allow
        unknown-method allow
    }
    fallback-host none
    fallback-status-codes none
    header-erase none
    header-insert none
    insert-xforwarded-for enabled
    lws-separator none
    lws-width 80
    oneconnect-transformations enabled
    proxy-type reverse
    redirect-rewrite none
    response-chunking selective
    response-headers-permitted none
}
ltm profile http /Common/mPayPROD_http {
    app-service none
    defaults-from /Common/http
    encrypt-cookie-secret $M$J5$1y/r8hYYoWQhB73v4B8PaQ==
    encrypt-cookies { mPayPROD mPayPROD_AuxPool }
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
}
ltm profile http /Common/test_http {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking selective
}
ltm profile http /Common/test_http_1 {
    app-service none
    defaults-from /Common/http
    enforcement {
        unknown-method allow
    }
    proxy-type reverse
    response-chunking unchunk
}
ltm profile http-compression /Common/EDCP_QA_vs_http-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_DEMO_vs1_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_DEMO_vs2_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_DEMO_vs3_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_PROD_GRP_vs_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_PROD_Gtest_vs_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_PROD_vs1_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/SSO_PROD_vs2_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/Test_SD_dubaigov_21April {
    app-service none
    defaults-from /Common/httpcompression
    keep-accept-encoding enabled
}
ltm profile http-compression /Common/eServicePROD_http_to_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/f5_test1_http-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/ginnpm_http_profile-compression {
    app-service none
    content-type-include { text/ "application/(xml|x-javascript)" application/pdf }
    defaults-from /Common/http-wan-optimized-compression-compression
}
ltm profile http-compression /Common/grp_prod_https-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/http-compression {
    allow-http-10 disabled
    app-service none
    browser-workarounds disabled
    buffer-size 4096
    content-type-exclude none
    content-type-include { text/ "application/(xml|x-javascript)" }
    cpu-saver enabled
    cpu-saver-high 90
    cpu-saver-low 75
    defaults-from /Common/httpcompression
    gzip-level 1
    gzip-memory-level 8k
    gzip-window-size 16k
    keep-accept-encoding disabled
    method-prefer gzip
    min-size 1024
    uri-exclude none
    uri-include { .* }
    vary-header enabled
}
ltm profile http-compression /Common/http-wan-optimized-compression-compression {
    allow-http-10 enabled
    app-service none
    browser-workarounds disabled
    buffer-size 131072
    content-type-exclude none
    content-type-include { text/ "application/(xml|x-javascript)" }
    cpu-saver enabled
    cpu-saver-high 90
    cpu-saver-low 75
    defaults-from /Common/httpcompression
    gzip-level 1
    gzip-memory-level 16k
    gzip-window-size 64k
    keep-accept-encoding disabled
    method-prefer gzip
    min-size 1024
    uri-exclude none
    uri-include { .* }
    vary-header enabled
}
ltm profile http-compression /Common/test_http-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile http-compression /Common/test_http_1-compression {
    app-service none
    defaults-from /Common/httpcompression
}
ltm profile one-connect /Common/GPR_Oneconnect {
    app-service none
    defaults-from /Common/oneconnect
    source-mask 255.255.255.255
}
ltm profile rewrite /Common/Hyperion_PROD_Rewrite {
    app-service none
    bypass-list none
    client-caching-type cache-css-js
    defaults-from /Common/rewrite-uri-translation
    java-ca-file /Common/ca-bundle.crt
    java-crl none
    java-sign-key /Common/default.key
    java-sign-key-passphrase-encrypted $M$RD$7/8k8nkLOyZQEutuZ9eTZQ==
    java-signer /Common/default.crt
    location-specific false
    request {
        insert-xforwarded-for enabled
        insert-xforwarded-host disabled
        insert-xforwarded-proto disabled
        rewrite-headers enabled
    }
    response {
        rewrite-content disabled
        rewrite-headers enabled
    }
    rewrite-list none
    rewrite-mode uri-translation
    split-tunneling false
    uri-rules {
        uri_1445846965987 {
            client {
                path /
            }
            server {
                path /workspace/index.jsp/
            }
            type request
        }
    }
}
ltm profile server-ssl /Common/IDS_PROD_2018_DEWA_Srv {
    app-service none
    ciphers NONE:AES128-SHA:RC4+RSA
    defaults-from /Common/serverssl
}
ltm profile stream /Common/grptest {
    app-service none
    defaults-from /Common/stream
}
ltm profile tcp /Common/EDCP_PROD_TCP {
    ack-on-push disabled
    app-service none
    defaults-from /Common/tcp
    nagle enabled
}
ltm profile tcp /Common/Exch_2016_tcp {
    app-service none
    defaults-from /Common/tcp
    idle-timeout 1800
}
ltm profile tcp /Common/GRP_RELEASE {
    ack-on-push disabled
    app-service none
    defaults-from /Common/SSO_PROD_GRP_tcp
    nagle enabled
}
ltm profile tcp /Common/SSO-TDS-PRD-389-tcp {
    app-service none
    defaults-from /Common/tcp
    idle-timeout 7200
}
ltm profile tcp /Common/SSO-TDS-PRD-636-tcp {
    app-service none
    defaults-from /Common/tcp
    idle-timeout 7200
}
ltm profile tcp /Common/SSO_PROD_GRP_MSCA_tcp {
    app-service none
    defaults-from /Common/tcp
    idle-timeout 3600
}
ltm profile tcp /Common/SSO_PROD_GRP_tcp {
    ack-on-push disabled
    app-service none
    defaults-from /Common/tcp
    idle-timeout 1800
    nagle enabled
}
ltm profile tcp /Common/edcp_test {
    app-service none
    defaults-from /Common/tcp
}
ltm profile tcp /Common/edcp_test1 {
    app-service none
    defaults-from /Common/tcp-wan-optimized
}
ltm profile tcp /Common/epay_tcp_client {
    app-service none
    defaults-from /Common/tcp
    zero-window-timeout 300000
}
ltm profile tcp /Common/ginnpm_lan-optimized_tcp_profile {
    app-service none
    defaults-from /Common/tcp-lan-optimized
}
ltm profile tcp /Common/ginnpm_wan-optimized_tcp_profile {
    app-service none
    defaults-from /Common/tcp-wan-optimized
}
ltm profile tcp /Common/tcp {
    abc enabled
    ack-on-push disabled
    app-service none
    close-wait-timeout 5
    cmetrics-cache enabled
    congestion-control high-speed
    deferred-accept disabled
    delay-window-control disabled
    delayed-acks enabled
    dsack disabled
    early-retransmit disabled
    ecn disabled
    fin-wait-timeout 5
    hardware-syn-cookie enabled
    idle-timeout 300
    init-cwnd 0
    init-rwnd 0
    ip-tos-to-client 0
    keep-alive-interval 1800
    limited-transmit enabled
    link-qos-to-client 0
    max-retrans 8
    max-segment-size 1460
    md5-signature disabled
    md5-signature-passphrase none
    minimum-rto 0
    mptcp disabled
    mptcp-csum disabled
    mptcp-csum-verify disabled
    mptcp-debug disabled
    mptcp-fallback reset
    mptcp-fastjoin disabled
    mptcp-join-max 5
    mptcp-makeafterbreak disabled
    mptcp-nojoindssack disabled
    mptcp-rtomax 5
    mptcp-rxmitmin 1000
    mptcp-subflowmax 6
    mptcp-timeout 3600
    nagle enabled
    pkt-loss-ignore-burst 0
    pkt-loss-ignore-rate 0
    proxy-buffer-high 16384
    proxy-buffer-low 4096
    proxy-mss disabled
    proxy-options disabled
    rate-pace disabled
    receive-window-size 32768
    reset-on-timeout enabled
    selective-acks enabled
    selective-nack disabled
    send-buffer-size 32768
    slow-start enabled
    syn-cookie-whitelist disabled
    syn-max-retrans 3
    syn-rto-base 0
    tail-loss-probe disabled
    time-wait-recycle enabled
    time-wait-timeout 2000
    timestamps enabled
    verified-accept disabled
    zero-window-timeout 20000
}
ltm profile tcp /Common/tcp_epay_client_test {
    app-service none
    defaults-from /Common/tcp
    zero-window-timeout 300000
}
ltm profile tcp /Common/tcp_epay_server_test {
    app-service none
    defaults-from /Common/tcp
    keep-alive-interval 60
}
ltm profile web-acceleration /Common/EDCP_QA_vs_http-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_DEMO_vs1_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_DEMO_vs2_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_DEMO_vs3_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_PROD_GRP_vs_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_PROD_Gtest_vs_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_PROD_vs1_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/SSO_PROD_vs2_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/eServicePROD_http_to_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/f5_test1_http-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/ginnpm_http_profile-cache {
    app-service none
    defaults-from /Common/http-wan-optimized-compression-cache
}
ltm profile web-acceleration /Common/grp_prod_https-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/http-cache {
    app-service none
    cache-aging-rate 9
    cache-client-cache-control-mode all
    cache-insert-age-header enabled
    cache-max-age 3600
    cache-max-entries 10000
    cache-object-max-size 50000
    cache-object-min-size 500
    cache-size 75mb
    cache-uri-exclude none
    cache-uri-include-override none
    cache-uri-pinned none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/http-wan-optimized-compression-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/test_http-cache {
    app-service none
    defaults-from /Common/webacceleration
}
ltm profile web-acceleration /Common/test_http_1-cache {
    app-service none
    defaults-from /Common/webacceleration
}
net route /Common/10.23.14.0/24 {
    gw 10.23.16.3
    network 10.23.14.0/24
}
net route /Common/10.23.17.0/24 {
    gw 10.23.21.3
    network 10.23.17.0/24
}
net route /Common/10.55.1.0/24 {
    gw 10.21.13.1
    network 10.55.1.0/24
}
net route /Common/Cloud_DIWAN_STG_FE {
    gw 172.18.31.3
    network 10.55.11.0/24
}
net route /Common/Cloud_DSG_DEV_BE {
    gw 172.18.31.1
    network 10.50.22.0/24
}
net route /Common/Cloud_DSG_PRD_AD {
    gw 172.18.31.1
    network 10.50.8.0/24
}
net route /Common/Cloud_DSG_PRD_BE {
    gw 172.18.31.1
    network 10.50.2.0/24
}
net route /Common/Cloud_DSG_PRD_FE {
    gw 172.18.31.1
    network 10.50.1.0/24
}
net route /Common/Cloud_DSG_QA-Temp_BE {
    gw 172.18.31.1
    network 10.50.21.0/24
}
net route /Common/Cloud_DSG_QA_BE {
    gw 172.18.31.1
    network 10.50.12.0/24
}
net route /Common/Cloud_DSG_QA_FE {
    gw 172.18.31.1
    network 10.50.11.0/24
}
net route /Common/Cloud_EXCH2016 {
    description "Exchange 2016 Front End"
    gw 172.18.31.1
    network 10.50.5.0/24
}
net route /Common/Cloud_HHRC_Srvs {
    description "Cloud_HHRC_Srvs Subnet"
    gw 172.18.31.1
    network 10.50.10.0/24
}
net route /Common/Cloud_PROTO_PRD_BE {
    description "NOT USED NOW"
    gw 172.18.31.2
    network 10.56.2.0/24
}
net route /Common/Cloud_PROTO_STG_FE {
    description "NOT USED NOW"
    gw 172.18.31.2
    network 10.56.11.0/24
}
net route /Common/Dubainow_PRD {
    gw 172.18.31.1
    network 10.50.6.0/24
}
net route /Common/default {
    gw 10.21.13.1
    network default
}
net ipsec ike-daemon /Common/ikedaemon { }
pem global-settings analytics { }
security dos udp-portlist /Common/dos-udp-portlist {
    entries {
        entry1 {
            match-direction both
            port-number 53
        }
    }
    list-type exclude-listed-ports
}
sys file ifile /Common/MaintenancePage {
    cache-path /config/filestore/files_d/Common_d/ifile_d/:Common:MaintenancePage_140070_1
    revision 1
}
sys file ifile /Common/eserverrorpage {
    cache-path /config/filestore/files_d/Common_d/ifile_d/:Common:eserverrorpage_140620_1
    revision 1
}
sys file ifile /Common/eservrestrictip {
    cache-path /config/filestore/files_d/Common_d/ifile_d/:Common:eservrestrictip_140634_1
    revision 1
}
sys file ssl-cert /Common/Admin_DubaiCareers_ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:Admin_DubaiCareers_ae.crt_151032_1
    revision 1
    source-path /config/ssl/ssl.crt/Admin_DubaiCareers_ae.crt
}
sys file ssl-cert /Common/ComtrustCA.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:ComtrustCA.crt_14286_1
    revision 1
}
sys file ssl-cert /Common/DSG_WC_OtherDomians_SAN.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DSG_WC_OtherDomians_SAN.crt_14308_1
    revision 1
}
sys file ssl-cert /Common/DSG_qa.dubai.gov.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DSG_qa.dubai.gov.ae.crt_60832_1
    revision 1
    source-path /config/ssl/ssl.crt/DSG_qa.dubai.gov.ae.crt
}
sys file ssl-cert /Common/DeG_CA.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_CA.crt_14320_1
    revision 1
}
sys file ssl-cert /Common/DeG_Global_SAN_Cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_Global_SAN_Cert.crt_14270_1
    revision 1
}
sys file ssl-cert /Common/DeG_Global_SAN_Cert_Test.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_Global_SAN_Cert_Test.crt_14256_1
    revision 1
}
sys file ssl-cert /Common/DeG_SAN_Cert_Non_PROD.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_SAN_Cert_Non_PROD.crt_14300_1
    revision 1
}
sys file ssl-cert /Common/DeG_Staging_CA.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_Staging_CA.crt_14264_1
    revision 1
}
sys file ssl-cert /Common/DeG_dubai.gov.ae_Cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_dubai.gov.ae_Cert.crt_14272_1
    revision 1
}
sys file ssl-cert /Common/DeG_dubaigov.ae_Cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_dubaigov.ae_Cert.crt_14328_1
    revision 1
}
sys file ssl-cert /Common/DeG_pilot.deg.ae_Cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DeG_pilot.deg.ae_Cert.crt_14234_1
    revision 1
}
sys file ssl-cert /Common/DigiCertCA.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DigiCertCA.crt_14254_1
    revision 1
}
sys file ssl-cert /Common/DigiCertCA_2.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DigiCertCA_2.crt_14304_1
    revision 1
}
sys file ssl-cert /Common/DigiCertCA_CA3.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DigiCertCA_CA3.crt_14240_1
    revision 1
}
sys file ssl-cert /Common/DigiCertCA_EV.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DigiCertCA_EV.crt_14332_1
    revision 1
}
sys file ssl-cert /Common/DigiCertCA_SHA2.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DigiCertCA_SHA2.crt_14282_1
    revision 1
}
sys file ssl-cert /Common/DubaiCareers_ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DubaiCareers_ae.crt_150948_1
    revision 1
    source-path /config/ssl/ssl.crt/DubaiCareers_ae.crt
}
sys file ssl-cert /Common/DubaiID_ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:DubaiID_ae.crt_56723_1
    revision 1
    source-path /config/ssl/ssl.crt/DubaiID_ae.crt
}
sys file ssl-cert /Common/PROTOCOL_TEST.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:PROTOCOL_TEST.crt_52062_1
    revision 1
    source-path /config/ssl/ssl.crt/PROTOCOL_TEST.crt
}
sys file ssl-cert /Common/SDG_CA.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:SDG_CA.crt_137686_1
    revision 1
}
sys file ssl-cert /Common/SDG_Internal_Cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:SDG_Internal_Cert.crt_137694_1
    revision 1
    source-path /config/ssl/ssl.crt/SDG_Internal_Cert.crt
}
sys file ssl-cert /Common/SSOPROD_SAN_SPs.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:SSOPROD_SAN_SPs.crt_14250_1
    revision 1
}
sys file ssl-cert /Common/SSOSPs_SAN_23Aug16.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:SSOSPs_SAN_23Aug16.crt_137819_1
    revision 1
    source-path /config/ssl/ssl.crt/SSOSPs_SAN_23Aug16.crt
}
sys file ssl-cert /Common/ShPnt_Admins_cert.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:ShPnt_Admins_cert.crt_47801_1
    revision 1
    source-path /config/ssl/ssl.crt/ShPnt_Admins_cert.crt
}
sys file ssl-cert /Common/Teams_SAN_18Jun17.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:Teams_SAN_18Jun17.crt_62174_1
    revision 1
    source-path /config/ssl/ssl.crt/Teams_SAN_18Jun17.crt
}
sys file ssl-cert /Common/WC_Dubai.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_Dubai.ae.crt_67192_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_Dubai.ae.crt
}
sys file ssl-cert /Common/WC_dsg.gov.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dsg.gov.ae.crt_50895_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dsg.gov.ae.crt
}
sys file ssl-cert /Common/WC_dubai.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.ae.crt_47815_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.ae.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_GRP.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_GRP.crt_58684_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_GRP.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_Legal_02May16.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_Legal_02May16.crt_51468_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_Legal_02May16.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_QA_DEV.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_QA_DEV.crt_51632_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_QA_DEV.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_QA_DEV_2017.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_QA_DEV_2017.crt_56921_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_QA_DEV_2017.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_QA_DEV_100416.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_QA_DEV_100416.crt_50770_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_QA_DEV_100416.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_QA_DEV_160816.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_QA_DEV_160816.crt_137679_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubai.gov.ae_QA_DEV_160816.crt
}
sys file ssl-cert /Common/WC_dubai.gov.ae_SAN_SSOPROD.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubai.gov.ae_SAN_SSOPROD.crt_14278_1
    revision 1
}
sys file ssl-cert /Common/WC_dubaicustoms.gov.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_dubaicustoms.gov.ae.crt_64068_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_dubaicustoms.gov.ae.crt
}
sys file ssl-cert /Common/WC_sdg.gov.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_sdg.gov.ae.crt_60926_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_sdg.gov.ae.crt
}
sys file ssl-cert /Common/WC_smartdubai.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:WC_smartdubai.ae.crt_50782_1
    revision 1
    source-path /config/ssl/ssl.crt/WC_smartdubai.ae.crt
}
sys file ssl-cert /Common/api.dubai.gov.ae_2018.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:api.dubai.gov.ae_2018.crt_57872_1
    revision 1
    source-path /config/ssl/ssl.crt/api.dubai.gov.ae_2018.crt
}
sys file ssl-cert /Common/dubai.gov.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:dubai.gov.ae.crt_14302_1
    revision 1
}
sys file ssl-cert /Common/dubaicustom.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:dubaicustom.crt_56467_1
    revision 1
    source-path /config/ssl/ssl.crt/dubaicustom.crt
}
sys file ssl-cert /Common/epayment.dubai.ae_EV.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:epayment.dubai.ae_EV.crt_14262_1
    revision 1
}
sys file ssl-cert /Common/epayment_dubai_ae_2020.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:epayment_dubai_ae_2020.crt_55738_1
    revision 1
    source-path /config/ssl/ssl.crt/epayment_dubai_ae_2020.crt
}
sys file ssl-cert /Common/gsb.dubai.gov.ae_2018.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:gsb.dubai.gov.ae_2018.crt_57863_1
    revision 1
    source-path /config/ssl/ssl.crt/gsb.dubai.gov.ae_2018.crt
}
sys file ssl-cert /Common/ids.dubai.gov.ae_2018.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:ids.dubai.gov.ae_2018.crt_57881_1
    revision 1
    source-path /config/ssl/ssl.crt/ids.dubai.gov.ae_2018.crt
}
sys file ssl-cert /Common/mpay.dubai.ae_2020.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:mpay.dubai.ae_2020.crt_65097_1
    revision 1
    source-path /config/ssl/ssl.crt/mpay.dubai.ae_2020.crt
}
sys file ssl-cert /Common/mpay.dubai.ae_NEW.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:mpay.dubai.ae_NEW.crt_14274_2
    revision 2
}
sys file ssl-cert /Common/rashid_ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:rashid_ae.crt_66141_1
    revision 1
    source-path /config/ssl/ssl.crt/rashid_ae.crt
}
sys file ssl-cert /Common/smartlead.dubaidata.ae.crt {
    cache-path /config/filestore/files_d/Common_d/certificate_d/:Common:smartlead.dubaidata.ae.crt_57075_1
    revision 1
    source-path /config/ssl/ssl.crt/smartlead.dubaidata.ae.crt
}
sys file ssl-key /Common/Admin_DubaiCareers_ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:Admin_DubaiCareers_ae.key_151028_1
    revision 1
    source-path /config/ssl/ssl.key/Admin_DubaiCareers_ae.key
}
sys file ssl-key /Common/DSG_WC_OtherDomians_SAN.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DSG_WC_OtherDomians_SAN.key_14248_1
    revision 1
}
sys file ssl-key /Common/DSG_qa.dubai.gov.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DSG_qa.dubai.gov.ae.key_60829_1
    revision 1
    source-path /config/ssl/ssl.key/DSG_qa.dubai.gov.ae.key
}
sys file ssl-key /Common/DeG_Global_SAN_Cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_Global_SAN_Cert.key_14306_1
    revision 1
}
sys file ssl-key /Common/DeG_Global_SAN_Cert_Test.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_Global_SAN_Cert_Test.key_14310_1
    revision 1
}
sys file ssl-key /Common/DeG_SAN_Cert_Non_PROD.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_SAN_Cert_Non_PROD.key_14236_1
    revision 1
}
sys file ssl-key /Common/DeG_dubai.gov.ae_Cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_dubai.gov.ae_Cert.key_14298_1
    revision 1
}
sys file ssl-key /Common/DeG_dubaigov.ae_Cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_dubaigov.ae_Cert.key_14324_1
    revision 1
}
sys file ssl-key /Common/DeG_pilot.deg.ae_Cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DeG_pilot.deg.ae_Cert.key_14284_1
    revision 1
}
sys file ssl-key /Common/DubaiCareers_ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DubaiCareers_ae.key_150944_1
    revision 1
    source-path /config/ssl/ssl.key/DubaiCareers_ae.key
}
sys file ssl-key /Common/DubaiID_ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:DubaiID_ae.key_56719_1
    revision 1
    source-path /config/ssl/ssl.key/DubaiID_ae.key
}
sys file ssl-key /Common/PROTOCOL_TEST.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:PROTOCOL_TEST.key_52058_1
    revision 1
    source-path /config/ssl/ssl.key/PROTOCOL_TEST.key
}
sys file ssl-key /Common/SDG_Internal_Cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:SDG_Internal_Cert.key_137690_1
    revision 1
    source-path /config/ssl/ssl.key/SDG_Internal_Cert.key
}
sys file ssl-key /Common/SSOPROD_SAN_SPs.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:SSOPROD_SAN_SPs.key_14316_1
    revision 1
}
sys file ssl-key /Common/SSOSPs_SAN_23Aug16.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:SSOSPs_SAN_23Aug16.key_137815_1
    revision 1
    source-path /config/ssl/ssl.key/SSOSPs_SAN_23Aug16.key
}
sys file ssl-key /Common/ShPnt_Admins_cert.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:ShPnt_Admins_cert.key_47798_1
    revision 1
    source-path /config/ssl/ssl.key/ShPnt_Admins_cert.key
}
sys file ssl-key /Common/Teams_SAN_18Jun17.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:Teams_SAN_18Jun17.key_62170_1
    revision 1
    source-path /config/ssl/ssl.key/Teams_SAN_18Jun17.key
}
sys file ssl-key /Common/WC_Dubai.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_Dubai.ae.key_67188_1
    revision 1
    source-path /config/ssl/ssl.key/WC_Dubai.ae.key
}
sys file ssl-key /Common/WC_dsg.gov.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dsg.gov.ae.key_50891_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dsg.gov.ae.key
}
sys file ssl-key /Common/WC_dubai.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.ae.key_47812_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.ae.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_GRP.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_GRP.key_58681_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_GRP.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_Legal_02May16.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_Legal_02May16.key_51464_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_Legal_02May16.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_QA_DEV.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_QA_DEV.key_51628_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_QA_DEV.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_QA_DEV_2017.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_QA_DEV_2017.key_56917_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_QA_DEV_2017.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_QA_DEV_100416.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_QA_DEV_100416.key_50766_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_QA_DEV_100416.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_QA_DEV_160816.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_QA_DEV_160816.key_137675_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubai.gov.ae_QA_DEV_160816.key
}
sys file ssl-key /Common/WC_dubai.gov.ae_SAN_SSOPROD.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubai.gov.ae_SAN_SSOPROD.key_14268_1
    revision 1
}
sys file ssl-key /Common/WC_dubaicustoms.gov.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_dubaicustoms.gov.ae.key_64064_1
    revision 1
    source-path /config/ssl/ssl.key/WC_dubaicustoms.gov.ae.key
}
sys file ssl-key /Common/WC_sdg.gov.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_sdg.gov.ae.key_60922_1
    revision 1
    source-path /config/ssl/ssl.key/WC_sdg.gov.ae.key
}
sys file ssl-key /Common/WC_smartdubai.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:WC_smartdubai.ae.key_50778_1
    revision 1
    source-path /config/ssl/ssl.key/WC_smartdubai.ae.key
}
sys file ssl-key /Common/api.dubai.gov.ae_2018.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:api.dubai.gov.ae_2018.key_57869_1
    revision 1
    source-path /config/ssl/ssl.key/api.dubai.gov.ae_2018.key
}
sys file ssl-key /Common/dubai.gov.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:dubai.gov.ae.key_14246_1
    revision 1
}
sys file ssl-key /Common/dubaicustom.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:dubaicustom.key_56463_1
    revision 1
    source-path /config/ssl/ssl.key/dubaicustom.key
}
sys file ssl-key /Common/epayment.dubai.ae_EV.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:epayment.dubai.ae_EV.key_14292_1
    revision 1
}
sys file ssl-key /Common/epayment_dubai_ae_2020.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:epayment_dubai_ae_2020.key_55734_1
    revision 1
    source-path /config/ssl/ssl.key/epayment_dubai_ae_2020.key
}
sys file ssl-key /Common/eservices.dubai.ae_EV.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:eservices.dubai.ae_EV.key_14294_1
    revision 1
}
sys file ssl-key /Common/gsb.dubai.gov.ae_2018.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:gsb.dubai.gov.ae_2018.key_57860_1
    revision 1
    source-path /config/ssl/ssl.key/gsb.dubai.gov.ae_2018.key
}
sys file ssl-key /Common/ids.dubai.gov.ae_2018.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:ids.dubai.gov.ae_2018.key_57878_1
    revision 1
    source-path /config/ssl/ssl.key/ids.dubai.gov.ae_2018.key
}
sys file ssl-key /Common/mpay.dubai.ae_2020.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:mpay.dubai.ae_2020.key_65093_1
    revision 1
    source-path /config/ssl/ssl.key/mpay.dubai.ae_2020.key
}
sys file ssl-key /Common/mpay.dubai.ae_NEW.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:mpay.dubai.ae_NEW.key_14296_1
    revision 1
}
sys file ssl-key /Common/rashid_ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:rashid_ae.key_66137_1
    revision 1
    source-path /config/ssl/ssl.key/rashid_ae.key
}
sys file ssl-key /Common/smartlead.dubaidata.ae.key {
    cache-path /config/filestore/files_d/Common_d/certificate_key_d/:Common:smartlead.dubaidata.ae.key_57071_1
    revision 1
    source-path /config/ssl/ssl.key/smartlead.dubaidata.ae.key
}
sys log-config filter /Common/SIEM-SPLUNK-Log-Filters {
    level info
    publisher /Common/SIEM-SPLUNK-Publishers
}
sys log-config publisher /Common/SIEM-SPLUNK-Publishers {
    destinations {
        /Common/SIEM-SPLUNK-Formatted { }
    }
}
sys log-config destination remote-high-speed-log /Common/SIEM-SPLUNK-RSYSLOG {
    pool-name /Common/Pool-syslog
}
sys log-config destination remote-syslog /Common/SIEM-SPLUNK-Formatted {
    format rfc5424
    remote-high-speed-log /Common/SIEM-SPLUNK-RSYSLOG
}
sys log-config destination splunk /Common/SIEM-SPLUNK-Formatted1 {
    description "Splunk Formate"
    forward-to /Common/SIEM-SPLUNK-RSYSLOG
}
sys software update {
    auto-check disabled
    frequency weekly
}
wom endpoint-discovery { }
